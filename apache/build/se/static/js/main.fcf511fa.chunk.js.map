{"version":3,"sources":["shared/RedLogo.png","components/EditorComponents/ConversationEditorComponents/StakeHoldersComponent/shemptylogo.png","shared/WhiteLogo.png","components/Copyright.js","pages/signup.js","pages/login.js","components/DeleteWarnings/DeleteEntireScenarioWarning.js","components/DashboardComponents/ShareButton.js","components/DashboardComponents/ScenarioCard.js","components/DashboardComponents/AddNewScenarioCard.js","Constants/Config.js","universalHTTPRequests/delete.js","universalHTTPRequests/post.js","universalHTTPRequests/get.js","components/LoadingSpinner.js","components/Banners/SuccessBanner.js","components/Banners/ErrorBanner.js","components/DashboardComponents/DropDown.js","components/DashboardComponents/DropdownMenu.js","components/DashboardComponents/DashboardNavbar.js","pages/dashboard.js","universalHTTPRequests/put.js","components/EditorComponents/LogisticsPageComponents/DropDown.js","components/InfoButtons/GenericInfoButton.js","components/EditorComponents/LogisticsPageComponents/Logistics.js","components/EditorComponents/GeneralPageComponents/Body.js","components/EditorComponents/GeneralPageComponents/Title.js","components/EditorComponents/GenericPageComponents/Generic.js","components/DeleteWarnings/GenericDeleteWarning.js","components/EditorComponents/ConfigureIssuesComponents/IssueEntryField.js","components/EditorComponents/ConfigureIssuesComponents/IssueEntryFieldList.js","components/EditorComponents/ConfigureIssuesComponents/IssueCoverageMatrix.js","components/EditorComponents/ConversationEditorComponents/StakeHoldersComponent/IssueRow.js","components/EditorComponents/ConversationEditorComponents/StakeHoldersComponent/table.js","components/EditorComponents/ConversationEditorComponents/StakeHoldersComponent/StakeHolderQuestions/question.js","components/EditorComponents/ConversationEditorComponents/StakeHoldersComponent/StakeHolderQuestions/questions.js","components/EditorComponents/ConversationEditorComponents/StakeHoldersComponent/stakeHolder.js","components/EditorComponents/ConversationEditorComponents/StakeHoldersComponent/stakeHolders.js","components/EditorComponents/ConfigureIssuesComponents/ConfigureIssues.js","components/EditorComponents/ConversationEditorComponents/ConversationEditor.js","components/EditorComponents/ReflectionPageComponents/QuestionComponent/question.js","components/EditorComponents/ReflectionPageComponents/QuestionComponent/questions.js","components/EditorComponents/ReflectionPageComponents/Reflection.js","components/EditorComponents/ActionPageComponents/Action.js","components/EditorComponents/GenericPageComponents/Introduction.js","components/EditorComponents/FlowDiagramComponents/HelperFunctions/node.js","components/EditorComponents/FlowDiagramComponents/HelperFunctions/addEdge.js","components/EditorComponents/FlowDiagramComponents/FlowDiagram.js","components/EditorComponents/FlowDiagramComponents/HelperFunctions/initializeElements.js","components/EditedSunEditor.js","components/EditorComponents/AddNewScenarioPageDialogBody.js","components/EditorComponents/AddNewSimulationScenarioPageDialog.js","components/ConfigurationSideBarComponents/NavSideBarNode.js","components/ConfigurationSideBarComponents/NavSideBarList.js","components/EditorComponents/ToDoListDialog.js","pages/editor.js","components/StudentResponsesComponents/ReflectionResponseComponent/QuestionResponseField.js","components/StudentResponsesComponents/ReflectionResponseComponent/ReflectionResponse.js","components/StudentResponsesComponents/ActionResponseComponent/ActionResponse.js","components/StudentResponsesComponents/SideBar/NavSideBarListNode.js","components/StudentResponsesComponents/SideBar/NavSideBarList.js","shared/mockScenarioData.js","components/StudentResponsesComponents/StudentResposeDialog.js","pages/data.js","components/HomepageComponents/HomepageNavBar.js","pages/homepage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Copyright","Typography","align","Date","getFullYear","useStyles","makeStyles","theme","container","marginTop","spacing","display","flexDirection","alignItems","logo","width","form","submit","backgroundColor","palette","primary","main","color","copyright","margin","opacity","Signup","classes","Container","component","maxWidth","className","src","RedLogo","alt","variant","TextField","required","fullWidth","id","label","name","autoComplete","autoFocus","Button","Link","to","type","Box","Login","Grid","direction","item","RouterLink","FormControlLabel","control","Checkbox","value","Transition","React","forwardRef","props","ref","Slide","DeleteEntireScenarioWarning","data","remove","open","setOpen","handleClose","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","onClick","root","padding","textAlign","closeButton","position","right","top","grey","shareInfo","borderBottom","paddingBottom","marginBottom","saveButton","float","textTransform","buttonText","UserRole","title","disableTypography","IconButton","aria-label","ShareDialog","useState","email","setEmail","dividers","Autocomplete","options","getOptionLabel","option","style","renderInput","params","onChange","event","target","scenarioContainer","minHeight","minWidth","light","borderStyle","borderColor","border","buttonContainer","button","withStyles","children","other","noWrap","MuiDialogContent","ScenarioCard","scenarioID","scenarioName","isFinished","dateCreated","courses","onDelete","openDeletePopup","setOpenDeletePopup","dataButton","pathname","xs","buttons","key","Card","CardContent","map","COURSE","NAME","addNewScenarioContainer","height","borderRadius","addNewScenarioButton","addIcon","fontSize","addNewScenarioText","AddNewScenarioCard","fixed","justify","baseURL","universalDelete","setResponse","endpoint","onError","onSuccess","requestBody","loading","error","axios","delete","then","resp","catch","err","universalPost","post","universalFetch","get","circularProgress","LoadingSpinner","CircularProgress","size","bottom","zIndex","success","dark","justifyContent","icon","paddingRight","SuccessBanner","successMessage","fade","Fade","timeout","appear","exit","in","ErrorBanner","errorMessage","checkedIcon","Tags","multiple","disableCloseOnSelect","values","update","noOptionsText","renderOption","selected","inputValue","Fragment","marginRight","checked","placeholder","SimpleMenu","anchorEl","setAnchorEl","aria-controls","aria-haspopup","currentTarget","shemptylogo","Menu","Boolean","MenuItem","DashboardNavbar","CssBaseline","AppBar","Toolbar","flexGrow","issue","errorContainer","iconError","iconRefreshLarge","iconRefreshSmall","MuiDialogActions","Dashboard","finishedScenarios","setFinishedScenarios","unfinishedScenarios","setUnfinishedScenarios","menuCourseItems","setMenuCourseItems","fetchScenariosResponse","setFetchScenariosResponse","setFetchCourseResponse","setDeleteReq","successBannerMessage","setSuccessBannerMessage","successBannerFade","setSuccessBannerFade","errorBannerMessage","setErrorBannerMessage","errorBannerFade","setErrorBannerFade","errorName","setErrorName","errorNameText","setErrorNameText","errorCourses","setErrorCourses","shouldFetch","setShouldFetch","setPost","IS_FINISHED","PUBLIC","NUM_CONVERSATIONS","PROFESSOR","COURSES","NewScenario","setNewScenario","useEffect","setTimeout","clearTimeout","handleOnChangeName","deleteScenario","deleteReq","filter","entry","SCENARIO","getData","response","DATE_CREATED","finished","getCourses","helperText","rows","selectedClasses","sel","element","push","marginLeft","Divider","info","labelPlacement","validInput","trim","length","universalPut","put","getOptionSelected","current","GenericInfoButton","description","textfields","authorButtons","subdiv","bannerContainer","Logistics","scenario_ID","fetchCourseResponse","authors","initialAuthorsWithID","author","Math","floor","random","setAuthorsWithID","authorsWithID","shouldRender","setShouldRender","fetchLogisticsResponse","setFetchLogisticsResponse","setResponseSave","errorNumConvos","setErrorNumConvos","errorNumConvosText","setErrorNumConvosText","currentCourses","setCurrentCourses","setScenarioName","numConvos","setNumConvos","isPublic","setIsPublic","setIsFinished","handleOnChangeNumConvo","NUM_CONVERSATION","setEdit","VERSION","DATA_CREATED","i","j","makeNewCourses","handleOnChange","noValidate","isNaN","Body","body","setBody","setContents","setOptions","buttonList","content","Title","setTitle","handleChange","Generic","scenarioComponents","setScenarioComponents","setCurrentPageID","page_id","page_type","page_title","next_page_id","bodies","xCoord","yCoord","postValues","setPostValues","setDeleteValues","pageID","setPageID","bodyText","setBodyText","bodiesText","errorTitle","setErrorTitle","errorTitleText","setErrorTitleText","errorBody","setErrorBody","postReqBody","PAGE_TYPE","PAGE_TITLE","PAGE_BODY","NEXT_PAGE","BODIES","X_COORDINATE","Y_COORDINATE","s_id","first_time","deleteEndPoint","newScenarioComponents","find","x","PAGE","handlePost","GenericDeleteWarning","IssueEntryField","score","isNewIssue","setIssueEntryFieldList","issueEntryFieldList","setPut","issueID","setIssueID","toString","issueScore","setIssueScore","issueName","setIssueName","newIssue","setNewIssue","unsaved","setUnsaved","handleChangeScore","handleChangeName","errorScore","setErrorScore","errorScoreText","setErrorScoreText","p","m","multiline","Number","indexOf","ISSUE","onFailure","IMPORTANCE_SCORE","saveIssue","newData","deleteIssue","IssueEntryFieldList","setNewIssueID","newID","collision","checkNewID","entryCur","setEntryCur","e","preventDefault","newEntry","concat","tableIcons","Add","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","RateReview","exitButton","IssueMatrix","scenario","didGetSHs","setDidGetSHs","stakeHolders","useRef","cols","setColumns","setRows","issueSums","setSums","didSetData","setDidSetData","isLoading","setLoading","require","sums","DESCRIPTION","stakeHolder","ISSUES","curIssue","undefined","toUpperCase","changedStakeHolder","issues","curStakeHolder","curRow","forEach","COVERAGE_SCORE","STAKEHOLDER","config","method","url","headers","saveStakeHolders","onStakeHolderIssueChange","field","insertBoolean","setColData","row","JOB","setRowData","icons","exportButton","editable","isEditHidden","rowData","isDeleteHidden","onRowAdd","Promise","resolve","reject","onRowUpdate","oldData","dataUpdate","tableData","onRowDelete","columns","IssueRow","issue_number","setIssues","TableRow","TableCell","scope","defaultValue","val","updatedIssues","updateIssueScore","table","BasicTable","stakeholder_id","passed_issues","getCurrentTimeInt","currentTime","setCurrentTime","d","substring","setTime","t","ret","checkTime","TableContainer","Paper","Table","TableHead","TableBody","QuestionField","removeQuestion","question","summary","QRs","setQRs","questionValue","setQuestionValue","responseValue","setResponseValue","summaryValue","setSummaryValue","updateQRs","shq","shr","shs","updatedQRs","qr","CONVERSATION","QUESTION","RESPONSE","SUMMARY","issue1","issue2","issue3","issue4","issue5","bgcolor","QuestionFields","qrs","isMultiEnabled","setIsMultiEnabled","questionID","leftQuestions","q","JSON","stringify","newQRs","input","StakeHolder","bio","mainConvo","removeStakeHolder","job","setStakeHolders","openBio","setOpenBio","openMainConvo","setOpenMainConvo","openPointSelection","setOpenPointSelection","openQuestions","setOpenQuestions","stakeHolderName","setStakeHolderName","stakeHolderJob","setStakeHolderJob","stakeHolderBiography","setStakeHolderBiography","stakeHolderConversation","setStakeHolderConversation","qRData","setQRData","handleCloseBio","updateBasicText","handleCloseMainConvo","handleClosePointSelection","handleCloseQuestions","shname","shjob","shbio","shconvo","updatedStakeHolders","sh","INTRODUCTION","htmlFor","accept","getIssues","editor","StakeHolderFields","stakeHolderID","leftStakeHolders","s","ConfigureIssues","setIssueCoverageMatrix","openHelp","setOpenHelp","ConversationEditor","listOfQuestions","setListOfQuestions","setReqBodyNew","listOfQuestions2","REFLECTION_QUESTION","reqBody","obj","questions","setQuestions","newQuestions","newQuestionsList","Reflection","version_ID","reflection_questions","a","questionsForReqBody","setQuestionsForReqBody","errorQuestions","setErrorQuestions","errorQuestionsMessage","setErrorQuestionsMessage","REFLECTION_QUESTIONS","qs","qsrb","trimmedQuestions","questionSet","Set","Action","choice1","choice2","option1","setOption1","option2","setOption2","errorOption1","setErrorOption1","errorOption1Text","setErrorOption1Text","errorOption2","setErrorOption2","errorOption2Text","setErrorOption2Text","CHOICES","CHOICE","RESULT_PAGE","onChangeOption1","onChangeOption2","Introduction","actionNode","onConnect","console","log","left","introNode","reflectionNode","genericNode","conversationNode","addEdge","elements","source","newEdge","arrowHeadType","strokeWidth","arrowWidth","FlowDiagram","fetchedElements","setFetchedElements","elementsPUT","setElementsPUT","setElements","errorText","setErrorText","positionElements","introductionElement","componentData","genericElements","reflectionElements","actionElements","stakeholderConversationElement","edges","isEdge","initialElements","y","initializeElements","reduce","acc","currentValue","currentElement","ACTION","addEdges","isRemoveButtonDisabled","setIsRemoveButtonDisabled","currentEdgeSelected","setCurrentEdgeSelected","nodeTypes","openReset","setOpenReset","openRefresh","setOpenRefresh","ConfirmationDialog","disableBackdropClick","disableEscapeKeyDown","refresh","reset","resetElements","array","isNode","onElementClick","onNodeDragStop","index","findIndex","ele","elementsCopy","updatedElements","nodeElement","SCENARIO_id","actionData","PAGE_id","currElement","some","disabled","removeElements","EditedSunEditor","setText","text","menuButton","addButton","selectMenu","magin","AddNewScenarioPageDialogBody","addPage","setOpenPopup","pageType","setPageType","pageName","setPageName","pageBody","setPageBody","Select","labelId","dialogWrapper","exitOutButton","AddNewSimulationScenarioPageDialog","openPopup","paper","pageButton","overflowWrap","deleteButton","deleteButtonContainer","NavSideBarNode","deleteByID","scenarioPages","isIntroPage","handleClickOpen","handleDisplayComponent","NavSideBarList","scenarioPage","background","secondary","ToDoListDialog","setOpenToDo","openToDo","orientation","flexItem","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","hide","drawer","flexShrink","drawerPaper","addPageButton","drawerHeader","mixins","toolbar","content1","contentShift","Editor","showComponent","setShowComponent","scenarioIDFromURL","useLocation","split","pop","location","getValues","setGetValues","scenarioComponent","setScenarioComponent","showEditor","setShowEditor","addNewPageIndex","setAddNewPageIndex","currentPageID","handleLogisticsGet","initialComponents","logistics_and_pages","is_finished","public_scenario","num_convos","professors","pages","PAGES","splice","handlePageGet","g_id","scenarioComponentsArray","c","currPageInfo","created","r1","r2","useTheme","handleDrawerClose","WhiteTextTypography","BlackTextTypography","d_id","handleDelete","Sidebar","Drawer","anchor","NavBar","clsx","edge","ReflectionResponse","studentReflections","questionResponsesWithID","questionResponses","ActionStudentResponse","choice","page","studentResponsePages","studentResponsePage","mockFinishedScenarioStudentResponse","getTime","actions","reflections","closeDialogButton","componentType","Data","selectedResponseData","openDrawer","setOpenDrawer","reflectionResponses","actionResponses","result","setStudentResponsePage","fullScreen","setSelectedResponseData","studentList","setStudentList","tooltip","signupButton","paddingTop","loginButton","signupButtonText","loginButtonText","HomepageNavBar","WhiteLogo","studentAccessContainer","ethisimIntroContainer","textField","accessButton","ValidationTextField","borderWidth","borderLeftWidth","StudentAccess","EthisimIntro","Homepage","App","basename","exact","path","render","window","hostname","match","createMuiTheme","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fcf511fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/RedLogo.7b5edd0c.png\";","module.exports = __webpack_public_path__ + \"static/media/shemptylogo.577a3a75.png\";","module.exports = __webpack_public_path__ + \"static/media/WhiteLogo.9f51d9c8.png\";","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function Copyright() {\r\n    return (\r\n        <Typography align=\"center\">\r\n            Copyright © Ethisim {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Box,\r\n    Typography,\r\n    Container,\r\n} from '@material-ui/core';\r\nimport Copyright from '../components/Copyright';\r\nimport RedLogo from '../shared/RedLogo.png';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    logo: {\r\n        width: '100px',\r\n    },\r\n    form: {\r\n        marginTop: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    submit: {\r\n        marginTop: theme.spacing(2),\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: 'white',\r\n    },\r\n    copyright: {\r\n        margin: theme.spacing(2),\r\n        opacity: 0.5,\r\n    },\r\n}));\r\n\r\nexport default function Signup() {\r\n    const classes = useStyles();\r\n\r\n    //TODO add functionality to signup account button\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <div className={classes.container}>\r\n                <img src={RedLogo} alt=\"EthismLogo\" className={classes.logo} />\r\n                <Typography variant=\"h4\">Sign up</Typography>\r\n                <form className={classes.form}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"first_name\"\r\n                        label=\"First Name\"\r\n                        name=\"first_name\"\r\n                        autoComplete=\"first_name\"\r\n                        autoFocus\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"last_name\"\r\n                        label=\"Last Name\"\r\n                        name=\"last_name\"\r\n                        autoComplete=\"last_name\"\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email_address\"\r\n                        label=\"Email Address\"\r\n                        name=\"email_address\"\r\n                        autoComplete=\"email_address\"\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"username\"\r\n                        label=\"Username\"\r\n                        name=\"username\"\r\n                        autoComplete=\"username\"\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"password\"\r\n                        label=\"Password\"\r\n                        name=\"password\"\r\n                        autoComplete=\"password\"\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"confirm_password\"\r\n                        label=\"Confirm Password\"\r\n                        name=\"confirm_password\"\r\n                        autoComplete=\"confirm_password\"\r\n                    />\r\n                    <Button\r\n                        component={Link}\r\n                        to={'/login'}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign up\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n            <Box className={classes.copyright}>\r\n                <Copyright />\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Button,\r\n    TextField,\r\n    FormControlLabel,\r\n    Checkbox,\r\n    Box,\r\n    Typography,\r\n    Container,\r\n    Link,\r\n    Grid,\r\n} from '@material-ui/core';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport Copyright from '../components/Copyright';\r\nimport RedLogo from '../shared/RedLogo.png';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    logo: {\r\n        width: '100px',\r\n    },\r\n    form: {\r\n        marginTop: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    submit: {\r\n        marginTop: theme.spacing(2),\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: 'white',\r\n    },\r\n    copyright: {\r\n        margin: theme.spacing(2),\r\n        opacity: 0.5,\r\n    },\r\n}));\r\n\r\nexport default function Login() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <div className={classes.container}>\r\n                <img src={RedLogo} alt=\"EthismLogo\" className={classes.logo} />\r\n                <Typography variant=\"h4\">Login</Typography>\r\n                <form className={classes.form}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <Grid container direction=\"column\">\r\n                        <Grid item>\r\n                            <Link component={RouterLink} to={'/signup'}>\r\n                                Need to create an account?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        value=\"remember\"\r\n                                        color=\"primary\"\r\n                                    />\r\n                                }\r\n                                label=\"Remember me\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        className={classes.submit}\r\n                        component={RouterLink}\r\n                        to={'/dashboard'}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n            <Box className={classes.copyright}>\r\n                <Copyright />\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nDeleteEntireScenarioWarning.propTypes = {\r\n    remove: PropTypes.any.isRequired,\r\n    open: PropTypes.any.isRequired,\r\n    setOpen: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default function DeleteEntireScenarioWarning(props) {\r\n    DeleteEntireScenarioWarning.propTypes = props.data;\r\n    const data = props;\r\n    const { remove, open, setOpen } = data;\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-slide-title\"\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-slide-title\">\r\n                {'Are you sure you want to delete this?'}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                    This action will delete the entire scenario and all the work\r\n                    associated with this scenario. Once this action is\r\n                    performed, it cannot be undone!\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={remove} color=\"primary\">\r\n                    Yes\r\n                </Button>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    No\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport {\r\n    Typography,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    TextField,\r\n    IconButton,\r\n} from '@material-ui/core';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport PropTypes from 'prop-types';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n        textAlign: 'center',\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n    shareInfo: {\r\n        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\r\n        paddingBottom: '6px',\r\n        marginBottom: '6px',\r\n    },\r\n    saveButton: {\r\n        margin: theme.spacing(2),\r\n        float: 'right',\r\n        textTransform: 'unset',\r\n    },\r\n    buttonText: {\r\n        width: '100%',\r\n        textTransform: 'unset',\r\n    },\r\n}));\r\n\r\nDialogTitle.propTypes = {\r\n    onClose: PropTypes.any.isRequired,\r\n};\r\n\r\nconst UserRole = [\r\n    { title: 'Read Only' },\r\n    { title: 'Edit Only' },\r\n    { title: 'Admin' },\r\n];\r\n\r\nfunction DialogTitle(props) {\r\n    const classes = useStyles();\r\n    const { onClose } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root}>\r\n            <Typography variant=\"h6\">Share with Professor</Typography>\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    className={classes.closeButton}\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n}\r\n\r\nexport default function ShareDialog(props) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const [email, setEmail] = useState('');\r\n\r\n    const onChangeEmail = (event) => {\r\n        setEmail(event.target.value);\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleClickOpen}\r\n                className={classes.buttonText}\r\n            >\r\n                <ShareIcon />\r\n                <Typography variant=\"subtitle1\">Share</Typography>\r\n            </Button>\r\n            <Dialog\r\n                fullWidth={true}\r\n                maxWidth=\"sm\"\r\n                onClose={handleClose}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n            >\r\n                <DialogTitle onClose={handleClose}></DialogTitle>\r\n                <DialogContent dividers>\r\n                    <Typography align=\"left\" variant=\"h6\">\r\n                        Select User Role\r\n                    </Typography>\r\n                    <Autocomplete\r\n                        id=\"User_Role\"\r\n                        options={UserRole}\r\n                        getOptionLabel={(option) => option.title}\r\n                        style={{ width: 300 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                label=\"User Role Options\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"Enter Email\"\r\n                        label=\"Enter Email\"\r\n                        name=\"Enter Email\"\r\n                        value={email}\r\n                        onChange={onChangeEmail}\r\n                    />\r\n                    <Button\r\n                        className={classes.saveButton}\r\n                        autoFocus\r\n                        color=\"primary\"\r\n                        onClick={handleClose}\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\nimport { Typography, Grid, Card, CardContent, Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n//import ShareIcon from '@material-ui/icons/Share';\r\nimport AssessmentIcon from '@material-ui/icons/Assessment';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport DeleteEntireScenarioWarning from '../DeleteWarnings/DeleteEntireScenarioWarning';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ClassIcon from '@material-ui/icons/Class';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport ShareButton from './ShareButton';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    scenarioContainer: {\r\n        minHeight: '100px',\r\n        minWidth: '200px',\r\n        backgroundColor: theme.palette.primary.light,\r\n        borderStyle: 'solid',\r\n        borderColor: theme.palette.primary.light,\r\n        border: 2,\r\n    },\r\n    buttonContainer: {\r\n        borderStyle: 'solid',\r\n        borderColor: theme.palette.primary.light,\r\n        border: 3,\r\n    },\r\n    button: {\r\n        borderStyle: 'solid',\r\n        borderColor: theme.palette.primary.light,\r\n        border: 3,\r\n    },\r\n    buttonText: {\r\n        width: '100%',\r\n        textTransform: 'unset',\r\n    },\r\n}));\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 1,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\" noWrap={true}>\r\n                Classes for\r\n            </Typography>\r\n            <Typography variant=\"h6\" noWrap={true} color=\"primary\">\r\n                {children}\r\n            </Typography>\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    className={classes.closeButton}\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent);\r\n\r\nScenarioCard.propTypes = {\r\n    data: PropTypes.any,\r\n    scenarioID: PropTypes.number,\r\n    scenarioName: PropTypes.string,\r\n    isFinished: PropTypes.bool,\r\n    dateCreated: PropTypes.string,\r\n    courses: PropTypes.any,\r\n    onDelete: PropTypes.any,\r\n};\r\n\r\nexport default function ScenarioCard({\r\n    data,\r\n    scenarioID,\r\n    scenarioName,\r\n    isFinished,\r\n    dateCreated,\r\n    courses,\r\n    onDelete,\r\n}) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [openDeletePopup, setOpenDeletePopup] = React.useState(false);\r\n    const classes = useStyles();\r\n\r\n    const handleClickOpenDeletePopup = () => {\r\n        setOpenDeletePopup(true);\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    //If scenario is unfinished, we show the buttons \"Edit,\" \"Delete,\" \"View Classes,\" \"Share\"\r\n    //If scenario is finished, we show the button \"Edit,\" \"Delete,\" \"View Classes,\" \"Share,\" \"View Student Data\"\r\n\r\n    const dataButton = isFinished ? (\r\n        <Grid\r\n            component={Link}\r\n            to={{\r\n                pathname: '/data/' + scenarioID,\r\n                data: data,\r\n            }}\r\n            className={classes.button}\r\n            item\r\n            xs={12}\r\n        >\r\n            <Button\r\n                className={classes.buttonText}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n            >\r\n                <AssessmentIcon />\r\n                <Typography variant=\"subtitle1\" noWrap>\r\n                    Data\r\n                </Typography>\r\n            </Button>\r\n        </Grid>\r\n    ) : null;\r\n\r\n    const buttons = (\r\n        <Grid className={classes.buttonContainer} container>\r\n            <Grid className={classes.button} item xs={6}>\r\n                <Button\r\n                    component={Link}\r\n                    to={{\r\n                        pathname: '/editor/' + scenarioID,\r\n                        data: data,\r\n                    }}\r\n                    className={classes.buttonText}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                >\r\n                    <EditIcon />\r\n                    <Typography variant=\"subtitle1\">Edit</Typography>\r\n                </Button>\r\n            </Grid>\r\n            <Grid className={classes.button} item xs={6}>\r\n                <Button\r\n                    className={classes.buttonText}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleClickOpenDeletePopup}\r\n                >\r\n                    <DeleteForeverIcon />\r\n                    <Typography variant=\"subtitle1\" noWrap>\r\n                        Delete\r\n                    </Typography>\r\n                </Button>\r\n                <DeleteEntireScenarioWarning\r\n                    open={openDeletePopup}\r\n                    setOpen={setOpenDeletePopup}\r\n                    remove={function () {\r\n                        onDelete(scenarioID, isFinished);\r\n                    }}\r\n                />\r\n            </Grid>\r\n            <Grid className={classes.button} item xs={6}>\r\n                <Button\r\n                    className={classes.buttonText}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleClickOpen}\r\n                >\r\n                    <ClassIcon />\r\n                    <Typography variant=\"subtitle1\" noWrap>\r\n                        View Classes\r\n                    </Typography>\r\n                </Button>\r\n            </Grid>\r\n            <Grid className={classes.button} item xs={6}>\r\n                <ShareButton />\r\n            </Grid>\r\n\r\n            {dataButton}\r\n        </Grid>\r\n    );\r\n\r\n    return (\r\n        <Grid key={scenarioID} item xs>\r\n            <Card>\r\n                <CardContent className={classes.scenarioContainer}>\r\n                    <Typography variant=\"h6\" display=\"block\" noWrap>\r\n                        {scenarioName}\r\n                    </Typography>\r\n                    <Typography\r\n                        variant=\"subtitle1\"\r\n                        color=\"textSecondary\"\r\n                        display=\"block\"\r\n                        noWrap\r\n                    >\r\n                        Date created: {dateCreated}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n            <Grid className={classes.buttonContainer} container>\r\n                {buttons}\r\n            </Grid>\r\n            <div>\r\n                <Dialog\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"customized-dialog-title\"\r\n                    open={open}\r\n                    maxWidth=\"sm\"\r\n                    fullWidth={true}\r\n                >\r\n                    <div>\r\n                        <DialogTitle\r\n                            id=\"customized-dialog-title\"\r\n                            onClose={handleClose}\r\n                        >\r\n                            {scenarioName}\r\n                        </DialogTitle>\r\n                        <DialogContent dividers>\r\n                            {courses.map((data) => (\r\n                                <form\r\n                                    style={{ marginBottom: 20 }}\r\n                                    key={data.COURSE}\r\n                                >\r\n                                    <Button\r\n                                        className={classes.buttonText}\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                    >\r\n                                        <Typography\r\n                                            display=\"block\"\r\n                                            variant=\"subtitle1\"\r\n                                            noWrap={true}\r\n                                        >\r\n                                            {data.NAME}\r\n                                        </Typography>\r\n                                    </Button>\r\n                                </form>\r\n                            ))}\r\n                        </DialogContent>\r\n                    </div>\r\n                </Dialog>\r\n            </div>\r\n        </Grid>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Typography, Grid, Button } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    addNewScenarioContainer: {\r\n        height: '100%',\r\n        borderStyle: 'dashed',\r\n        borderColor: theme.palette.primary.main,\r\n        border: 3,\r\n        borderRadius: 3,\r\n        padding: 0,\r\n    },\r\n    addNewScenarioButton: {\r\n        width: '100%',\r\n        height: '100%',\r\n        textTransform: 'unset',\r\n    },\r\n    addIcon: {\r\n        color: theme.palette.primary.main,\r\n        fontSize: 70,\r\n    },\r\n    addNewScenarioText: {\r\n        color: theme.palette.primary.main,\r\n    },\r\n}));\r\n\r\nAddNewScenarioCard.propTypes = {\r\n    onClick: PropTypes.any,\r\n};\r\n\r\nexport default function AddNewScenarioCard({ onClick }) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid key=\"createNewScenarioButton\" item xs>\r\n            <Container className={classes.addNewScenarioContainer} fixed={true}>\r\n                <Button\r\n                    className={classes.addNewScenarioButton}\r\n                    onClick={onClick}\r\n                >\r\n                    <Grid\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <Grid item>\r\n                            <AddIcon className={classes.addIcon} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography\r\n                                className={classes.addNewScenarioText}\r\n                                variant=\"h6\"\r\n                                noWrap\r\n                            >\r\n                                Create New Scenario\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Button>\r\n            </Container>\r\n        </Grid>\r\n    );\r\n}\r\n","const baseURL = 'http://ethisim2.cs.umass.edu:8000';\n\nexport { baseURL };\n","import axios from 'axios';\r\nimport { baseURL } from './../Constants/Config';\r\n// Universal delete request using axios\r\nexport default function universalDelete(\r\n    setResponse,\r\n    endpoint,\r\n    onError,\r\n    onSuccess,\r\n    requestBody\r\n) {\r\n    setResponse({\r\n        data: null,\r\n        loading: true,\r\n        error: null,\r\n    });\r\n    axios\r\n        .delete(baseURL + endpoint, requestBody)\r\n        .then((resp) => {\r\n            setResponse({\r\n                data: resp.data,\r\n                loading: false,\r\n                error: null,\r\n            });\r\n            onSuccess && onSuccess(resp);\r\n        })\r\n        .catch((err) => {\r\n            setResponse({\r\n                data: null,\r\n                loading: false,\r\n                error: err,\r\n            });\r\n            onError && onError(err);\r\n        });\r\n}\r\n","import axios from 'axios';\r\n\r\nimport { baseURL } from './../Constants/Config';\r\n\r\n// Universal fetch request using axios\r\nexport default function universalPost(\r\n    setResponse,\r\n    endpoint,\r\n    onError,\r\n    onSuccess,\r\n    requestBody\r\n) {\r\n    setResponse({\r\n        data: null,\r\n        loading: true,\r\n        error: null,\r\n    });\r\n    axios\r\n        .post(baseURL + endpoint, requestBody)\r\n        .then((resp) => {\r\n            setResponse({\r\n                data: resp.data,\r\n                loading: false,\r\n                error: null,\r\n            });\r\n            onSuccess && onSuccess(resp);\r\n        })\r\n        .catch((err) => {\r\n            setResponse({\r\n                data: null,\r\n                loading: false,\r\n                error: err,\r\n            });\r\n            onError && onError(err);\r\n        });\r\n}\r\n","import axios from 'axios';\r\n\r\nimport { baseURL } from './../Constants/Config';\r\n\r\n// Universal fetch request using axios\r\nexport default function universalFetch(\r\n    setResponse,\r\n    endpoint,\r\n    onError,\r\n    onSuccess\r\n) {\r\n    setResponse({\r\n        data: null,\r\n        loading: true,\r\n        error: null,\r\n    });\r\n    axios\r\n        .get(baseURL + endpoint)\r\n        .then((resp) => {\r\n            setResponse({\r\n                data: resp.data,\r\n                loading: false,\r\n                error: null,\r\n            });\r\n            onSuccess && onSuccess(resp);\r\n        })\r\n        .catch((err) => {\r\n            setResponse({\r\n                data: null,\r\n                loading: false,\r\n                error: err,\r\n            });\r\n            onError && onError(err);\r\n        });\r\n}\r\n","import React from 'react';\r\nimport { Typography, CircularProgress } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    circularProgress: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nexport default function LoadingSpinner() {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.container}>\r\n            <Typography align=\"center\" variant=\"h3\">\r\n                Loading ...\r\n            </Typography>\r\n            <CircularProgress className={classes.circularProgress} size={100} />\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Typography, Fade } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        position: 'fixed',\r\n        padding: theme.spacing(1),\r\n        bottom: '0px',\r\n        width: '50%',\r\n        border: '5px solid',\r\n        zIndex: '100',\r\n        borderColor: theme.palette.success.dark,\r\n        backgroundColor: theme.palette.success.main,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        color: 'white',\r\n    },\r\n    icon: {\r\n        paddingRight: theme.spacing(1),\r\n        fontSize: '40px',\r\n        color: 'white',\r\n    },\r\n}));\r\n\r\nSuccessBanner.propTypes = {\r\n    fade: PropTypes.any,\r\n    successMessage: PropTypes.string,\r\n};\r\n\r\n/* To use fade correctly:\r\n\r\n    1. Set state of fade variable\r\n    const [successBannerFade, setSuccessBannerFade] = useState(false);\r\n    \r\n    2. Use useEffect to switch \"fade\" from true to false, fading out the success banner.\r\n\r\n        useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            setSuccessBannerFade(false);\r\n        }, 1000);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [successBannerFade]);\r\n\r\n    When \"Success\" (successful GET/POST/PUT/DELETE request):\r\n    2. setSuccessBannerFade(true);\r\n       setSuccessBannerMessage('Success!');\r\n\r\n    useEffect will detect the change, and in setSuccessBannerFade(false), after 1 second, the banner will fade away.\r\n*/\r\n\r\nexport default function SuccessBanner({ successMessage, fade }) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Fade timeout={{ appear: 0, exit: 3000 }} in={fade}>\r\n            <div className={classes.container}>\r\n                <ThumbUpIcon className={classes.icon} />\r\n                <Typography align=\"center\" variant=\"h6\">\r\n                    {successMessage}\r\n                </Typography>\r\n            </div>\r\n        </Fade>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Typography, Fade } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        position: 'fixed',\r\n        padding: theme.spacing(1),\r\n        bottom: '0px',\r\n        width: '50%',\r\n        border: '5px solid',\r\n        zIndex: '100',\r\n        borderColor: theme.palette.error.dark,\r\n        backgroundColor: theme.palette.error.main,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        color: 'white',\r\n    },\r\n    icon: {\r\n        paddingRight: theme.spacing(2),\r\n        fontSize: '40px',\r\n        color: 'white',\r\n    },\r\n}));\r\n\r\nErrorBanner.propTypes = {\r\n    fade: PropTypes.any,\r\n    errorMessage: PropTypes.string,\r\n};\r\n\r\n/* To use fade correctly:\r\n\r\n    1. Set state of fade variable\r\n    const [successBannerFade, setErrorBannerFade] = useState(false);\r\n    \r\n    2. Use useEffect to switch \"fade\" from true to false, fading out the success banner.\r\n\r\n        useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            setErrorBannerFade(false);\r\n        }, 1000);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [successBannerFade]);\r\n\r\n    When \"Error\" (successful GET/POST/PUT/DELETE request):\r\n    2. setErrorBannerFade(true);\r\n       setErrorBannerMessage('Error!');\r\n\r\n    useEffect will detect the change, and in setErrorBannerFade(false), after 1 second, the banner will fade away.\r\n*/\r\n\r\nexport default function ErrorBanner({ errorMessage, fade }) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Fade timeout={{ appear: 0, exit: 3000 }} in={fade}>\r\n            <div className={classes.container}>\r\n                <ErrorIcon className={classes.icon} />\r\n                <Typography align=\"center\" variant=\"h6\">\r\n                    {errorMessage}\r\n                </Typography>\r\n            </div>\r\n        </Fade>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" color=\"primary\" />;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 500,\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(3),\r\n        },\r\n    },\r\n}));\r\n\r\nTags.propTypes = {\r\n    update: PropTypes.func,\r\n    courses: PropTypes.array,\r\n};\r\n\r\nexport default function Tags(props) {\r\n    const classes = useStyles();\r\n\r\n    const onTagsChange = (event, values) => {\r\n        props.update(values);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Autocomplete\r\n                multiple\r\n                id=\"checkboxes-tags-demo\"\r\n                options={props.courses}\r\n                disableCloseOnSelect\r\n                getOptionLabel={(option) => option.NAME}\r\n                onChange={onTagsChange}\r\n                noOptionsText={'Loading courses...'}\r\n                renderOption={(option, { selected, inputValue }) => {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option.NAME}\r\n                        </React.Fragment>\r\n                    );\r\n                }}\r\n                style={{ width: 500 }}\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        variant=\"outlined\"\r\n                        label=\"Courses\"\r\n                        placeholder=\"Courses\"\r\n                        fullWidth\r\n                    />\r\n                )}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Link } from 'react-router-dom';\r\nimport shemptylogo from '../EditorComponents/ConversationEditorComponents/StakeHoldersComponent/shemptylogo.png';\r\n\r\nexport default function SimpleMenu() {\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <IconButton\r\n                aria-controls=\"simple-menu\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleClick}\r\n            >\r\n                <img src={shemptylogo} height={50} width={50} alt=\"\"></img>\r\n            </IconButton>\r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <MenuItem\r\n                    onClick={handleClose}\r\n                    component={Link}\r\n                    to={{\r\n                        pathname: '/home',\r\n                    }}\r\n                >\r\n                    Logout\r\n                </MenuItem>\r\n                <MenuItem onClick={handleClose}>Settings</MenuItem>\r\n                <MenuItem onClick={handleClose}>Help</MenuItem>\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { Box, Typography } from '@material-ui/core';\r\nimport SimpleMenu from './DropdownMenu';\r\n\r\nexport default function DashboardNavbar() {\r\n    return (\r\n        <div>\r\n            <CssBaseline />\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    <Box display=\"flex\" flexGrow={1}>\r\n                        <Typography variant=\"h4\" noWrap>\r\n                            Ethisim Dashboard\r\n                        </Typography>\r\n                    </Box>\r\n                    <SimpleMenu />\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Box, Typography, Grid, Divider } from '@material-ui/core';\r\nimport ScenarioCard from '../components/DashboardComponents/ScenarioCard';\r\nimport AddNewScenarioCard from '../components/DashboardComponents/AddNewScenarioCard';\r\nimport Copyright from '../components/Copyright';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\nimport deleteReq from '../universalHTTPRequests/delete';\r\nimport post from '../universalHTTPRequests/post';\r\nimport get from '../universalHTTPRequests/get';\r\nimport LoadingSpinner from '../components/LoadingSpinner';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport SuccessBanner from '../components/Banners/SuccessBanner';\r\nimport ErrorBanner from '../components/Banners/ErrorBanner';\r\nimport Tags from '../components/DashboardComponents/DropDown';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport DashboardNavBar from '../components/DashboardComponents/DashboardNavbar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        marginTop: theme.spacing(11),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    copyright: {\r\n        margin: theme.spacing(2),\r\n    },\r\n    issue: {\r\n        marginTop: theme.spacing(10),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    errorContainer: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    iconError: {\r\n        paddingRight: theme.spacing(2),\r\n        fontSize: '75px',\r\n    },\r\n    iconRefreshLarge: {\r\n        fontSize: '75px',\r\n    },\r\n    iconRefreshSmall: {\r\n        fontSize: '30px',\r\n    },\r\n    border: {\r\n        borderStyle: 'none none solid none',\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n}));\r\n\r\n//TODO when Shibboleth gets implemented\r\nconst endpointGet = '/dashboard?professor_id=1';\r\nconst endpointGetCourses = '/api/courses/';\r\nconst endpointPost = '/dashboard';\r\nconst endpointDelete = '/api/scenarios/';\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 1,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    className={classes.closeButton}\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n    },\r\n}))(MuiDialogActions);\r\n\r\n//Passing props with React Router in Material UI: https://stackoverflow.com/questions/30115324/pass-props-in-link-react-router\r\nexport default function Dashboard() {\r\n    const classes = useStyles();\r\n\r\n    // post on success, concatenating a scenario card to array\r\n    //delete on success, concatenating a scenario card to array\r\n\r\n    //when posting a new scenario setting fake id, now deleting that scenario, have to replace id with id in database\r\n\r\n    //post returns new id of scenario, when you concatenating to array set the id to that\r\n    const [finishedScenarios, setFinishedScenarios] = useState(null);\r\n    const [unfinishedScenarios, setUnfinishedScenarios] = useState(null);\r\n    const [menuCourseItems, setMenuCourseItems] = useState([]);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [fetchScenariosResponse, setFetchScenariosResponse] = useState({\r\n        data: null,\r\n        loading: false,\r\n        error: null,\r\n    });\r\n    // eslint-disable-next-line\r\n    const [fetchCourseResponse, setFetchCourseResponse] = useState({\r\n        data: null,\r\n        loading: false,\r\n        error: null,\r\n    });\r\n    // eslint-disable-next-line\r\n    const [deleteReqValue, setDeleteReq] = useState({\r\n        data: null,\r\n        loading: false,\r\n        error: null,\r\n    });\r\n    const [successBannerMessage, setSuccessBannerMessage] = useState('');\r\n    const [successBannerFade, setSuccessBannerFade] = useState(false);\r\n    const [errorBannerMessage, setErrorBannerMessage] = useState('');\r\n    const [errorBannerFade, setErrorBannerFade] = useState(false);\r\n    const [errorName, setErrorName] = useState(false);\r\n    const [errorNameText, setErrorNameText] = useState('');\r\n    const [errorCourses, setErrorCourses] = useState(false);\r\n    const [shouldFetch, setShouldFetch] = useState(0);\r\n    // eslint-disable-next-line\r\n    const [postValue, setPost] = useState({\r\n        data: null,\r\n        loading: false,\r\n        error: null,\r\n    });\r\n    const [NewScenario, setNewScenario] = useState({\r\n        NAME: ' ',\r\n        IS_FINISHED: false,\r\n        PUBLIC: false,\r\n        NUM_CONVERSATIONS: 0,\r\n        PROFESSOR: 1,\r\n        COURSES: [],\r\n    });\r\n\r\n    //For Banners\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            setSuccessBannerFade(false);\r\n        }, 1000);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [successBannerFade]);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            setErrorBannerFade(false);\r\n        }, 1000);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [errorBannerFade]);\r\n\r\n    //For create new scenario dialogue box\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n        NewScenario.PUBLIC = false;\r\n        setNewScenario(NewScenario);\r\n        getCourses();\r\n    };\r\n\r\n    const handleCloseSave = () => {\r\n        function onSuccessPost(resp) {\r\n            setShouldFetch(shouldFetch + 1);\r\n            setSuccessBannerMessage('Successfully created Scenario!');\r\n            setSuccessBannerFade(true);\r\n        }\r\n        function onFailurePost() {\r\n            setErrorBannerMessage(\r\n                'Failed to create Scenario! Please try again.'\r\n            );\r\n            setErrorBannerFade(true);\r\n            //Post failed, loading animation should end\r\n            setFetchScenariosResponse({\r\n                data: null,\r\n                loading: false,\r\n                error: null,\r\n            });\r\n        }\r\n\r\n        let validInput = true;\r\n\r\n        if (!NewScenario.NAME || !NewScenario.NAME.trim()) {\r\n            setErrorName(true);\r\n            setErrorNameText('Scenario name cannot be empty');\r\n            validInput = false;\r\n        } else if (NewScenario.NAME.length >= 1000) {\r\n            setErrorName(true);\r\n            setErrorNameText(\r\n                'Scenario name must have less than 1000 characters'\r\n            );\r\n            validInput = false;\r\n        } else {\r\n            setErrorName(false);\r\n        }\r\n\r\n        if (NewScenario.COURSES.length === 0) {\r\n            setErrorCourses(true);\r\n            validInput = false;\r\n        } else {\r\n            setErrorCourses(false);\r\n        }\r\n\r\n        if (validInput) {\r\n            setNewScenario({\r\n                NAME: ' ',\r\n                IS_FINISHED: false,\r\n                PUBLIC: false,\r\n                NUM_CONVERSATIONS: 0,\r\n                PROFESSOR: 1,\r\n                COURSES: [],\r\n            });\r\n            //Smooth loading animation, loading animation will not reset during POST and GET Request\r\n            setFetchScenariosResponse({\r\n                data: null,\r\n                loading: true,\r\n                error: null,\r\n            });\r\n            post(\r\n                setPost,\r\n                endpointPost,\r\n                onFailurePost,\r\n                onSuccessPost,\r\n                NewScenario\r\n            );\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    //X button on dialog for creating new scenario\r\n    const handleClose = () => {\r\n        setNewScenario({\r\n            NAME: ' ',\r\n            IS_FINISHED: false,\r\n            PUBLIC: false,\r\n            NUM_CONVERSATIONS: 0,\r\n            PROFESSOR: 1,\r\n            COURSES: [],\r\n        });\r\n        setErrorName(false);\r\n        setErrorCourses(false);\r\n        setErrorNameText('');\r\n        setOpen(false);\r\n    };\r\n\r\n    //For new Scenario Post\r\n    const handleOnChangeName = (event) => {\r\n        NewScenario.NAME = event.target.value;\r\n        setNewScenario(NewScenario);\r\n    };\r\n\r\n    const handleOnChangePublic = (info) => {\r\n        NewScenario.PUBLIC = !NewScenario.PUBLIC;\r\n        setNewScenario(NewScenario);\r\n    };\r\n\r\n    //Update Classes\r\n    const updateSelectedClasses = (selectedClasses) => {\r\n        //set new scenario courses to selected classes\r\n        let sel = [];\r\n        selectedClasses.map((element) => sel.push({ COURSE: element.COURSE }));\r\n        NewScenario.COURSES = sel;\r\n        setNewScenario(NewScenario);\r\n    };\r\n\r\n    //Delete Scenario\r\n    const deleteScenario = (scenarioID, isFinished) => {\r\n        function successfullyDeleted(resp) {\r\n            if (isFinished) {\r\n                setSuccessBannerFade(true);\r\n                setSuccessBannerMessage('Successfully Deleted Scenario!');\r\n                let newData = [];\r\n                finishedScenarios &&\r\n                    finishedScenarios.filter(\r\n                        (entry) => entry.SCENARIO !== scenarioID\r\n                    );\r\n                setFinishedScenarios(newData);\r\n                setShouldFetch(shouldFetch + 1);\r\n            } else {\r\n                setSuccessBannerFade(true);\r\n                setSuccessBannerMessage('Successfully deleted scenario!');\r\n\r\n                let newData = [];\r\n                unfinishedScenarios &&\r\n                    unfinishedScenarios.filter(\r\n                        (entry) => entry.SCENARIO !== scenarioID\r\n                    );\r\n                setUnfinishedScenarios(newData);\r\n                setShouldFetch(shouldFetch + 1);\r\n            }\r\n        }\r\n\r\n        function onFailure() {\r\n            setErrorBannerMessage(\r\n                'Failed to delete scenario! Please try again.'\r\n            );\r\n            setErrorBannerFade(true);\r\n            //Delete req failed, loading animation should end\r\n            setFetchScenariosResponse({\r\n                data: null,\r\n                loading: false,\r\n                error: null,\r\n            });\r\n        }\r\n\r\n        //Smooth loading animation, loading animation will not reset during DELETE and GET Request\r\n        setFetchScenariosResponse({\r\n            data: null,\r\n            loading: true,\r\n            error: null,\r\n        });\r\n\r\n        deleteReq(\r\n            setDeleteReq,\r\n            endpointDelete + scenarioID + '/',\r\n            onFailure,\r\n            successfullyDeleted,\r\n            null\r\n        );\r\n    };\r\n\r\n    //Get Scenario\r\n    let getData = () => {\r\n        function onSuccess(response) {\r\n            let finishedScenarios = response.data.filter(\r\n                (data) => data.IS_FINISHED\r\n            );\r\n            let unfinishedScenarios = response.data.filter(\r\n                (data) => !data.IS_FINISHED\r\n            );\r\n            finishedScenarios = finishedScenarios.map((data) => (\r\n                <ScenarioCard\r\n                    key={data.SCENARIO}\r\n                    data={data}\r\n                    scenarioID={data.SCENARIO}\r\n                    scenarioName={data.NAME}\r\n                    dateCreated={data.DATE_CREATED}\r\n                    isFinished={data.IS_FINISHED}\r\n                    courses={data.COURSES}\r\n                    onDelete={deleteScenario}\r\n                />\r\n            ));\r\n            unfinishedScenarios = unfinishedScenarios.map((data) => (\r\n                <ScenarioCard\r\n                    key={data.SCENARIO}\r\n                    data={data}\r\n                    scenarioID={data.SCENARIO}\r\n                    scenarioName={data.NAME}\r\n                    dateCreated={data.DATE_CREATED}\r\n                    finished={data.IS_FINISHED}\r\n                    courses={data.COURSES}\r\n                    onDelete={deleteScenario}\r\n                />\r\n            ));\r\n            setFinishedScenarios(finishedScenarios);\r\n            setUnfinishedScenarios(unfinishedScenarios);\r\n        }\r\n\r\n        function onFailure() {\r\n            setErrorBannerMessage('Failed to get scenarios! Please try again.');\r\n            setErrorBannerFade(true);\r\n        }\r\n        get(setFetchScenariosResponse, endpointGet, onFailure, onSuccess);\r\n    };\r\n\r\n    //Get Courses\r\n    let getCourses = () => {\r\n        function onSuccessCourse(response) {\r\n            setMenuCourseItems(response.data);\r\n        }\r\n\r\n        function onFailureCourse() {\r\n            setErrorBannerMessage('Failed to get courses! Please try again.');\r\n            setErrorBannerFade(true);\r\n        }\r\n        get(\r\n            setFetchCourseResponse,\r\n            endpointGetCourses,\r\n            onFailureCourse,\r\n            onSuccessCourse\r\n        );\r\n    };\r\n\r\n    //Reload Page\r\n    useEffect(getData, [shouldFetch]);\r\n\r\n    if (fetchScenariosResponse.loading) {\r\n        return (\r\n            <div>\r\n                <DashboardNavBar />\r\n                <div style={{ marginTop: '100px' }}>\r\n                    <LoadingSpinner />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (fetchScenariosResponse.error) {\r\n        return (\r\n            <div>\r\n                <DashboardNavBar />\r\n                <div className={classes.issue}>\r\n                    <div className={classes.errorContainer}>\r\n                        <ErrorBanner\r\n                            fade={errorBannerFade}\r\n                            errorMessage={errorBannerMessage}\r\n                        />\r\n                        <ErrorIcon className={classes.iconError} />\r\n                        <Typography align=\"center\" variant=\"h3\">\r\n                            Error in fetching Scenarios.\r\n                        </Typography>\r\n                    </div>\r\n                    <div className={classes.errorContainer}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={getData}\r\n                        >\r\n                            <RefreshIcon className={classes.iconRefreshLarge} />\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <DashboardNavBar />\r\n            <Container\r\n                className={classes.container}\r\n                component=\"main\"\r\n                maxWidth=\"lg\"\r\n            >\r\n                <SuccessBanner\r\n                    fade={successBannerFade}\r\n                    successMessage={successBannerMessage}\r\n                />\r\n                <ErrorBanner\r\n                    fade={errorBannerFade}\r\n                    errorMessage={errorBannerMessage}\r\n                />\r\n                <div className={classes.border}>\r\n                    <Typography variant=\"h3\">Unfinished Scenarios</Typography>\r\n                </div>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    {unfinishedScenarios}\r\n                    <AddNewScenarioCard onClick={handleClickOpen} />\r\n                </Grid>\r\n                <div className={classes.border}>\r\n                    <Typography variant=\"h3\">Finished Scenarios</Typography>\r\n                </div>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    {finishedScenarios}\r\n                </Grid>\r\n                <Box className={classes.copyright}>\r\n                    <Copyright />\r\n                </Box>\r\n            </Container>\r\n\r\n            <Dialog\r\n                onClose={handleClose}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                maxWidth={false}\r\n            >\r\n                <div style={{ width: 600 }}>\r\n                    <DialogTitle\r\n                        id=\"customized-dialog-title\"\r\n                        onClose={handleClose}\r\n                    >\r\n                        Create New Scenario\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <form style={{ marginBottom: 20 }}>\r\n                            {errorName ? (\r\n                                <TextField\r\n                                    error\r\n                                    label=\"Scenario Name\"\r\n                                    helperText={errorNameText}\r\n                                    style={{ width: 500 }}\r\n                                    rows={1}\r\n                                    variant=\"outlined\"\r\n                                    onChange={handleOnChangeName}\r\n                                />\r\n                            ) : (\r\n                                <TextField\r\n                                    label=\"Scenario Name\"\r\n                                    style={{ width: 500 }}\r\n                                    rows={1}\r\n                                    variant=\"outlined\"\r\n                                    onChange={handleOnChangeName}\r\n                                />\r\n                            )}\r\n                        </form>\r\n\r\n                        <form style={{ marginBottom: 10 }}>\r\n                            <Tags\r\n                                courses={menuCourseItems}\r\n                                update={updateSelectedClasses}\r\n                            />\r\n                            {errorCourses ? (\r\n                                <Typography\r\n                                    style={{ marginLeft: 15 }}\r\n                                    variant=\"caption\"\r\n                                    display=\"block\"\r\n                                    color=\"error\"\r\n                                >\r\n                                    At least one course must be selected\r\n                                </Typography>\r\n                            ) : null}\r\n                        </form>\r\n\r\n                        <Divider style={{ margin: '20px 0' }} />\r\n\r\n                        <form style={{ marginLeft: -13 }}>\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        onChange={handleOnChangePublic}\r\n                                        color=\"primary\"\r\n                                    />\r\n                                }\r\n                                label=\"Public\"\r\n                                labelPlacement=\"start\"\r\n                            />\r\n                        </form>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            autoFocus\r\n                            onClick={handleCloseSave}\r\n                            color=\"primary\"\r\n                        >\r\n                            Save changes\r\n                        </Button>\r\n                    </DialogActions>\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import axios from 'axios';\r\nimport { baseURL } from './../Constants/Config';\r\n// Universal put request using axios\r\nexport default function universalPut(\r\n    setResponse,\r\n    endpoint,\r\n    onError,\r\n    onSuccess,\r\n    requestBody\r\n) {\r\n    setResponse({\r\n        data: null,\r\n        loading: true,\r\n        error: null,\r\n    });\r\n    axios\r\n        .put(baseURL + endpoint, requestBody)\r\n        .then((resp) => {\r\n            setResponse({\r\n                data: resp.data,\r\n                loading: false,\r\n                error: null,\r\n            });\r\n            onSuccess && onSuccess(resp);\r\n        })\r\n        .catch((err) => {\r\n            setResponse({\r\n                data: null,\r\n                loading: false,\r\n                error: err,\r\n            });\r\n            onError && onError(err);\r\n        });\r\n}\r\n","import React from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" color=\"primary\" />;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 500,\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(3),\r\n        },\r\n    },\r\n}));\r\n\r\nTags.propTypes = {\r\n    update: PropTypes.func,\r\n    courses: PropTypes.array,\r\n    current: PropTypes.array,\r\n};\r\n\r\nexport default function Tags(props) {\r\n    const classes = useStyles();\r\n\r\n    const onTagsChange = (event, values) => {\r\n        props.update(values);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Autocomplete\r\n                multiple\r\n                id=\"checkboxes-tags-demo\"\r\n                options={props.courses}\r\n                disableCloseOnSelect\r\n                getOptionLabel={(option) => option.NAME}\r\n                getOptionSelected={(option, value) => {\r\n                    return option.COURSE === value.COURSE;\r\n                }}\r\n                onChange={onTagsChange}\r\n                value={props.current}\r\n                renderOption={(option, { selected, inputValue }) => {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option.NAME}\r\n                        </React.Fragment>\r\n                    );\r\n                }}\r\n                style={{ width: 500 }}\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        variant=\"outlined\"\r\n                        placeholder=\"Courses\"\r\n                        fullWidth\r\n                    />\r\n                )}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\n\nGenericInfoButton.propTypes = {\n    description: PropTypes.string.isRequired,\n    open: PropTypes.any.isRequired,\n    setOpen: PropTypes.any.isRequired,\n};\n\nexport default function GenericInfoButton(props) {\n    GenericInfoButton.propTypes = props.data;\n    const data = props;\n\n    const { description, open, setOpen } = data;\n\n    //for info button\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <Dialog\n            open={open}\n            keepMounted\n            onClose={handleClose}\n            aria-labelledby=\"alert-dialog-slide-title\"\n            aria-describedby=\"alert-dialog-slide-description\"\n        >\n            <DialogTitle id=\"alert-dialog-slide-title\">\n                {'Information Center'}\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-slide-description\">\n                    {description}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose} color=\"primary\">\n                    Okay\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n//import Author from './Author';\nimport {\n    Button,\n    TextField,\n    Typography,\n    Container,\n    Divider,\n    Grid,\n} from '@material-ui/core';\nimport put from '../../../universalHTTPRequests/put';\nimport get from '../../../universalHTTPRequests/get';\nimport LoadingSpinner from '../../LoadingSpinner';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport SuccessBanner from '../../Banners/SuccessBanner';\nimport ErrorBanner from '../../Banners/ErrorBanner';\nimport Tags from './DropDown';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport PropTypes from 'prop-types';\nimport HelpIcon from '@material-ui/icons/Help';\nimport GenericInfoButton from '../../InfoButtons/GenericInfoButton';\n\nconst useStyles = makeStyles((theme) => ({\n    textfields: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '100%',\n        },\n    },\n    buttons: {\n        '& > *': {\n            margin: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n            width: '100%',\n            textTransform: 'unset',\n        },\n    },\n    authorButtons: {\n        width: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        textTransform: 'unset',\n    },\n    subdiv: {\n        marginTop: theme.spacing(1),\n        width: '750px',\n        '@media (max-width: 1100px)': {\n            width: '100%',\n        },\n    },\n    bannerContainer: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    errorContainer: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    container: {\n        padding: theme.spacing(1),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    iconError: {\n        paddingRight: theme.spacing(2),\n        fontSize: '75px',\n    },\n    iconRefreshLarge: {\n        fontSize: '75px',\n    },\n    iconRefreshSmall: {\n        fontSize: '30px',\n    },\n}));\n\nLogistics.propTypes = {\n    scenario_ID: PropTypes.any,\n};\n\nexport default function Logistics({ scenario_ID }) {\n    //Need scenario id\n    const endpointGetLogistics = '/logistics?scenario_id=';\n    const endpointGetCourses = '/api/courses/';\n    const endPointPut = '/logistics';\n\n    const classes = useStyles();\n    //temporary until backend implements id's\n    const [fetchCourseResponse, setFetchCourseResponse] = useState({\n        data: null,\n        loading: false,\n        error: null,\n    });\n\n    //TODO temporary ID\n    // eslint-disable-next-line\n    const [id, setId] = useState(scenario_ID);\n\n    //Authors mock implementation\n    const [authors, setAuthors] = useState([]);\n\n    //Set fake ID for list item\n    let initialAuthorsWithID = authors.map(function (author) {\n        return {\n            author: author,\n            id: Math.floor(Math.random() * 10000),\n        };\n    });\n\n    const [authorsWithID, setAuthorsWithID] = useState(initialAuthorsWithID);\n\n    let resetAuthorsWithID = (authorsWithID) => {\n        let initialAuthorsWithID = authors.map(function (author) {\n            return {\n                author: author,\n                id: Math.floor(Math.random() * 10000),\n            };\n        });\n        setAuthorsWithID(initialAuthorsWithID);\n    };\n\n    useEffect(resetAuthorsWithID, [authors]);\n\n    // eslint-disable-next-line\n    const removeAuthor = (authorID) => {\n        const leftAuthors = authorsWithID.filter(\n            (author) => author.id !== authorID\n        );\n        setAuthorsWithID(leftAuthors);\n    };\n\n    // eslint-disable-next-line\n    const addAuthor = (e) => {\n        let newAuthors = authorsWithID.map((data) => data.author);\n        newAuthors = [...newAuthors, ''];\n        setAuthors(newAuthors);\n        const newAuthorsWithID = [\n            ...authorsWithID,\n            {\n                id: Math.floor(Math.random() * 10000),\n                author: '',\n            },\n        ];\n        setAuthorsWithID(newAuthorsWithID);\n    };\n\n    // eslint-disable-next-line\n    const [shouldFetch, setShouldFetch] = useState(0);\n    const [shouldRender, setShouldRender] = useState(false);\n    const [fetchLogisticsResponse, setFetchLogisticsResponse] = useState({\n        data: null,\n        loading: true,\n        error: null,\n    });\n    const [menuCourseItems, setMenuCourseItems] = useState(null);\n    // eslint-disable-next-line\n    const [responseSave, setResponseSave] = useState({\n        data: null,\n        loading: false,\n        error: null,\n    });\n    const [successBannerMessage, setSuccessBannerMessage] = useState('');\n    const [successBannerFade, setSuccessBannerFade] = useState(false);\n    const [errorBannerMessage, setErrorBannerMessage] = useState('');\n    const [errorBannerFade, setErrorBannerFade] = useState(false);\n    const [errorName, setErrorName] = useState(false);\n    const [errorNameText, setErrorNameText] = useState('');\n    const [errorNumConvos, setErrorNumConvos] = useState(false);\n    const [errorNumConvosText, setErrorNumConvosText] = useState('');\n    const [errorCourses, setErrorCourses] = useState(false);\n    const [currentCourses, setCurrentCourses] = useState([]);\n    const [scenarioName, setScenarioName] = useState('');\n    const [numConvos, setNumConvos] = useState(0);\n    const [isPublic, setIsPublic] = useState(false);\n    const [isFinished, setIsFinished] = useState(false);\n\n    //for info button\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    //For Banners\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setSuccessBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [successBannerFade]);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setErrorBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [errorBannerFade]);\n\n    const handleOnChangePublic = (event) => {\n        setIsPublic(event.target.checked);\n        setEdit({ ...NewScenario, PUBLIC: event.target.checked });\n    };\n\n    const handleOnChangeFinish = (event) => {\n        setIsFinished(event.target.checked);\n        setEdit({ ...NewScenario, IS_FINISHED: event.target.checked });\n    };\n\n    const handleOnChangeNumConvo = (event) => {\n        NewScenario.NUM_CONVERSATION = event.target.value;\n        setNumConvos(event.target.value);\n        setEdit(NewScenario);\n    };\n\n    const makeNewCourses = (response) => {\n        let sel = [];\n\n        for (let i = 0; i < response.length; i++) {\n            for (let j = 0; j < NewScenario.COURSES.length; j++) {\n                if (response[i].NAME === NewScenario.COURSES[j].NAME) {\n                    sel.push(response[i]);\n                }\n            }\n        }\n\n        NewScenario.COURSES = sel;\n        setCurrentCourses(sel);\n        setEdit(NewScenario);\n    };\n\n    const [NewScenario, setEdit] = useState({\n        SCENARIO: 0,\n        VERSION: 0,\n        NAME: '',\n        PUBLIC: false,\n        NUM_CONVERSATION: 0,\n        PROFESSOR: 0,\n        IS_FINISHED: false,\n        DATE_CREATED: ' ',\n        COURSES: [],\n    });\n\n    let getData = () => {\n        function onSuccess(response) {\n            NewScenario.SCENARIO = response.data.SCENARIO;\n            NewScenario.VERSION = response.data.VERSION;\n            NewScenario.NAME = response.data.NAME;\n            NewScenario.PUBLIC = response.data.PUBLIC;\n            NewScenario.NUM_CONVERSATION = response.data.NUM_CONVERSATION;\n            NewScenario.PROFESSOR = response.data.PROFESSOR;\n            NewScenario.IS_FINISHED = response.data.IS_FINISHED;\n            NewScenario.DATE_CREATED = response.data.DATA_CREATED;\n            NewScenario.COURSES = response.data.COURSES;\n            setScenarioName(response.data.NAME);\n            setIsFinished(response.data.IS_FINISHED);\n            setIsPublic(response.data.PUBLIC);\n            setNumConvos(response.data.NUM_CONVERSATION);\n            setEdit(NewScenario);\n            getCourses();\n        }\n\n        //code for implementing authors\n        /*\n     Authors\n                </form>\n\n                {authorsWithID.map((data) => (\n                    <Author\n                        key={data.id}\n                        id={data.id}\n                        removeAuthor={removeAuthor}\n                        author={data.author}\n                        listOfAuthors={authorsWithID}\n                        setListOfAuthors={setAuthorsWithID}\n                    />\n                ))}\n                <Button variant=\"contained\" color=\"primary\" onClick={addAuthor}>\n                    Add Author\n                </Button>\n                \n        */\n\n        function onFailure() {\n            //GET request failed, loading animation should end\n            setFetchCourseResponse({\n                data: null,\n                loading: false,\n                error: null,\n            });\n        }\n\n        //Smooth loading animation, loading animation will not reset during both GET requests (GET logistics and GET courses)\n        setFetchCourseResponse({\n            data: null,\n            loading: true,\n            error: null,\n        });\n        get(\n            setFetchLogisticsResponse,\n            endpointGetLogistics + id,\n            onFailure,\n            onSuccess\n        );\n    };\n\n    let getCourses = () => {\n        function onSuccessCourse(response) {\n            setMenuCourseItems(response.data);\n            makeNewCourses(response.data);\n            setShouldRender(true);\n        }\n\n        function onFailureCourse() {\n            setErrorBannerMessage('Failed to save! Please try again.');\n            setErrorBannerFade(true);\n        }\n        get(\n            setFetchCourseResponse,\n            endpointGetCourses,\n            onFailureCourse,\n            onSuccessCourse\n        );\n    };\n\n    useEffect(getData, [shouldFetch]);\n\n    const handleSave = () => {\n        function onSuccessLogistic(response) {\n            setSuccessBannerMessage('Successfully Saved!');\n            setSuccessBannerFade(true);\n        }\n\n        function onFailureLogistic() {\n            setErrorBannerMessage('Failed to save! Please try again.');\n            setErrorBannerFade(true);\n        }\n\n        let validInput = true;\n\n        if (!NewScenario.NAME || !NewScenario.NAME.trim()) {\n            setErrorName(true);\n            setErrorNameText('Scenario name cannot be empty');\n            validInput = false;\n        } else if (NewScenario.NAME.length >= 1000) {\n            setErrorName(true);\n            setErrorNameText(\n                'Scenario name must have less than 1000 characters'\n            );\n            validInput = false;\n        } else {\n            setErrorName(false);\n        }\n\n        if (\n            isNaN(NewScenario.NUM_CONVERSATION) ||\n            NewScenario.NUM_CONVERSATION === ''\n        ) {\n            setErrorNumConvos(true);\n            setErrorNumConvosText(\n                'Max Number of Conversations Must Be A Number'\n            );\n            validInput = false;\n        } else {\n            setErrorNumConvos(false);\n        }\n\n        if (NewScenario.COURSES.length === 0) {\n            setErrorCourses(true);\n            validInput = false;\n        } else {\n            setErrorCourses(false);\n        }\n\n        if (validInput) {\n            put(\n                setResponseSave,\n                endPointPut,\n                onFailureLogistic,\n                onSuccessLogistic,\n                NewScenario\n            );\n        } else {\n            setErrorBannerFade(true);\n            setErrorBannerMessage(\n                'There are currently errors within your page. Please fix all errors in order to save.'\n            );\n        }\n    };\n\n    const handleOnChange = (event) => {\n        NewScenario.NAME = event.target.value;\n        setScenarioName(event.target.value);\n        setEdit(NewScenario);\n    };\n\n    const updateSelectedClasses = (selectedClasses) => {\n        //set new scenario courses to selected classes\n        let sel = [];\n        selectedClasses.map((element) =>\n            sel.push({ COURSE: element.COURSE, NAME: element.NAME })\n        );\n        NewScenario.COURSES = sel;\n        setCurrentCourses(sel);\n        setEdit(NewScenario);\n    };\n\n    if (fetchLogisticsResponse.error) {\n        return (\n            <div className={classes.errorContainer}>\n                <ErrorBanner\n                    fade={errorBannerFade}\n                    errorMessage={errorBannerMessage}\n                />\n                <div className={classes.container}>\n                    <ErrorIcon className={classes.iconError} />\n                    <Typography align=\"center\" variant=\"h3\">\n                        Error in fetching scenario logistics.\n                    </Typography>\n                </div>\n                <div className={classes.container}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={getData}\n                    >\n                        <RefreshIcon className={classes.iconRefreshLarge} />\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    if (fetchCourseResponse.error) {\n        return (\n            <div className={classes.errorContainer}>\n                <ErrorBanner\n                    fade={errorBannerFade}\n                    errorMessage={errorBannerMessage}\n                />\n                <div className={classes.container}>\n                    <ErrorIcon className={classes.iconError} />\n                    <Typography align=\"center\" variant=\"h3\">\n                        Error in fetching scenario courses.\n                    </Typography>\n                </div>\n                <div className={classes.container}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={getData}\n                    >\n                        <RefreshIcon className={classes.iconRefreshLarge} />\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    //Loading for both GET requests\n    if (fetchLogisticsResponse.loading || fetchCourseResponse.loading) {\n        return <LoadingSpinner />;\n    }\n\n    return (\n        <div>\n            <div className={classes.bannerContainer}>\n                <SuccessBanner\n                    fade={successBannerFade}\n                    successMessage={successBannerMessage}\n                />\n                <ErrorBanner\n                    fade={errorBannerFade}\n                    errorMessage={errorBannerMessage}\n                />\n            </div>\n            <Container component=\"main\">\n                <Typography align=\"center\" variant=\"h2\">\n                    Logistics\n                </Typography>\n                <Grid container justify=\"flex-end\">\n                    <Button color=\"primary\" onClick={handleClickOpen}>\n                        <HelpIcon />\n                    </Button>\n                    <GenericInfoButton\n                        description={`If it's your first time using Ethism, you'll see in the top left an icon of three horizontal lines.\n                    This is the menu and is accessable from all pages.\n                    The page you're on is the Logistics page handles some organizational pieces of your ethical scenario. \n                    Here, you can edit the name of your scenario, the courses associated with this scenario, etc.\n                    By default the max number of selected conversations in zero. However, you may enter the maximum number of stakeholders you would like to permit students to speak with.\n                    This will be explained more in depth later. The Public checkbox allows your scenario to be viewed publicly by all that have access to Ethism. The\n                    Is Finished checkbox puts your scenario in the Finished section, ready for student distribution.`}\n                        open={open}\n                        setOpen={setOpen}\n                    />\n                </Grid>\n                <form\n                    className={classes.textfields}\n                    noValidate\n                    autoComplete=\"off\"\n                >\n                    Simulation Title\n                    {errorName ? (\n                        <TextField\n                            error\n                            helperText={errorNameText}\n                            value={scenarioName}\n                            rows={1}\n                            onChange={handleOnChange}\n                        />\n                    ) : (\n                        <TextField\n                            value={scenarioName}\n                            rows={1}\n                            onChange={handleOnChange}\n                        />\n                    )}\n                    Courses\n                    {shouldRender ? (\n                        <Tags\n                            courses={menuCourseItems}\n                            current={currentCourses}\n                            update={updateSelectedClasses}\n                        />\n                    ) : null}\n                    {errorCourses ? (\n                        <Typography\n                            style={{ marginLeft: 15 }}\n                            variant=\"caption\"\n                            display=\"block\"\n                            color=\"error\"\n                        >\n                            At least one course must be selected\n                        </Typography>\n                    ) : null}\n                    Max Number Of Selected Conversations\n                    {errorNumConvos ? (\n                        <TextField\n                            error\n                            helperText={errorNumConvosText}\n                            value={numConvos}\n                            rows={1}\n                            onChange={handleOnChangeNumConvo}\n                        />\n                    ) : (\n                        <TextField\n                            value={numConvos}\n                            rows={1}\n                            onChange={handleOnChangeNumConvo}\n                        />\n                    )}\n                    <Divider style={{ margin: '20px 0' }} />\n                </form>\n\n                <form style={{ marginLeft: -15, marginTop: 10 }}>\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={isPublic}\n                                onChange={handleOnChangePublic}\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Public\"\n                        labelPlacement=\"start\"\n                    />\n\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={isFinished}\n                                onChange={handleOnChangeFinish}\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Is Finished\"\n                        labelPlacement=\"start\"\n                    />\n                </form>\n                <div className={classes.subdiv}>\n                    <form\n                        className={classes.buttons}\n                        noValidate\n                        autoComplete=\"off\"\n                    ></form>\n                </div>\n\n                <div className={classes.subdiv}>\n                    <form\n                        className={classes.buttons}\n                        noValidate\n                        autoComplete=\"off\"\n                    >\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={handleSave}\n                        >\n                            Save Scenario Info\n                        </Button>\n                    </form>\n                </div>\n            </Container>\n        </div>\n    );\n}\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SunEditor from 'suneditor-react';\r\nimport 'suneditor/dist/css/suneditor.min.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nBody.propTypes = {\r\n    body: PropTypes.string.isRequired,\r\n    setBody: PropTypes.any.isRequired,\r\n    error: PropTypes.bool,\r\n    errorMessage: PropTypes.string,\r\n};\r\n\r\nexport default function Body(props) {\r\n    const { body, setBody, error, errorMessage } = props;\r\n\r\n    let handleChange = (content) => {\r\n        setBody(content);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h4\">Body</Typography>\r\n            <SunEditor\r\n                setContents={body}\r\n                setOptions={{\r\n                    width: '100%',\r\n                    height: 400,\r\n                    placeholder: 'Enter body of component...',\r\n                    buttonList: [\r\n                        ['font', 'fontSize', 'formatBlock'],\r\n                        ['paragraphStyle', 'blockquote'],\r\n                        [\r\n                            'bold',\r\n                            'underline',\r\n                            'italic',\r\n                            'strike',\r\n                            'subscript',\r\n                            'superscript',\r\n                        ],\r\n                        ['fontColor', 'hiliteColor', 'textStyle'],\r\n                        '/', // Line break\r\n                        ['undo', 'redo'],\r\n                        ['removeFormat'],\r\n                        ['outdent', 'indent'],\r\n                        ['align', 'horizontalRule', 'list', 'lineHeight'],\r\n                        ['table', 'link', 'image', 'video', 'audio'],\r\n                        ['fullScreen', 'showBlocks', 'codeView'],\r\n                        ['preview'],\r\n                        // (min-width: 1000px)\r\n                        [\r\n                            '%1000',\r\n                            [\r\n                                ['undo', 'redo'],\r\n                                [\r\n                                    ':p-More Paragraph-default.more_paragraph',\r\n                                    'font',\r\n                                    'fontSize',\r\n                                    'formatBlock',\r\n                                    'paragraphStyle',\r\n                                    'blockquote',\r\n                                ],\r\n                                ['bold', 'underline', 'italic', 'strike'],\r\n                                [\r\n                                    ':t-More Text-default.more_text',\r\n                                    'subscript',\r\n                                    'superscript',\r\n                                    'fontColor',\r\n                                    'hiliteColor',\r\n                                    'textStyle',\r\n                                ],\r\n                                ['removeFormat'],\r\n                                ['outdent', 'indent'],\r\n                                [\r\n                                    ':e-More Line-default.more_horizontal',\r\n                                    'align',\r\n                                    'horizontalRule',\r\n                                    'list',\r\n                                    'lineHeight',\r\n                                ],\r\n                                [\r\n                                    '-right',\r\n                                    ':i-More Misc-default.more_vertical',\r\n                                    'fullScreen',\r\n                                    'showBlocks',\r\n                                    'codeView',\r\n                                    'preview',\r\n                                ],\r\n                                [\r\n                                    '-right',\r\n                                    ':r-More Rich-default.more_plus',\r\n                                    'table',\r\n                                    'link',\r\n                                    'image',\r\n                                    'video',\r\n                                    'audio',\r\n                                ],\r\n                            ],\r\n                        ],\r\n                        // (min-width: 875px)\r\n                        [\r\n                            '%875',\r\n                            [\r\n                                ['undo', 'redo'],\r\n                                [\r\n                                    ':p-More Paragraph-default.more_paragraph',\r\n                                    'font',\r\n                                    'fontSize',\r\n                                    'formatBlock',\r\n                                    'paragraphStyle',\r\n                                    'blockquote',\r\n                                ],\r\n                                [\r\n                                    ':t-More Text-default.more_text',\r\n                                    'bold',\r\n                                    'underline',\r\n                                    'italic',\r\n                                    'strike',\r\n                                    'subscript',\r\n                                    'superscript',\r\n                                    'fontColor',\r\n                                    'hiliteColor',\r\n                                    'textStyle',\r\n                                    'removeFormat',\r\n                                ],\r\n                                [\r\n                                    ':e-More Line-default.more_horizontal',\r\n                                    'outdent',\r\n                                    'indent',\r\n                                    'align',\r\n                                    'horizontalRule',\r\n                                    'list',\r\n                                    'lineHeight',\r\n                                ],\r\n                                [\r\n                                    ':r-More Rich-default.more_plus',\r\n                                    'table',\r\n                                    'link',\r\n                                    'image',\r\n                                    'video',\r\n                                    'audio',\r\n                                ],\r\n                                [\r\n                                    '-right',\r\n                                    ':i-More Misc-default.more_vertical',\r\n                                    'fullScreen',\r\n                                    'showBlocks',\r\n                                    'codeView',\r\n                                    'preview',\r\n                                ],\r\n                            ],\r\n                        ],\r\n                    ],\r\n                }}\r\n                onChange={handleChange}\r\n            />\r\n            {error ? (\r\n                <Typography\r\n                    style={{ marginLeft: 15 }}\r\n                    variant=\"caption\"\r\n                    display=\"block\"\r\n                    color=\"error\"\r\n                >\r\n                    {errorMessage}\r\n                </Typography>\r\n            ) : null}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography, TextField } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nTitle.propTypes = {\r\n    title: PropTypes.string,\r\n};\r\n\r\nexport default function Title(props) {\r\n    const classes = useStyles();\r\n    Title.propTypes = props.data;\r\n    const title = props.title;\r\n    const setTitle = props.setTitle;\r\n    const error = props.error;\r\n    const errorMessage = props.errorMessage;\r\n\r\n    let handleChange = (content) => {\r\n        setTitle(content.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography variant=\"h4\">Scenario Page Name</Typography>\r\n            {error ? (\r\n                <TextField\r\n                    error\r\n                    helperText={errorMessage}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"title\"\r\n                    label=\"Title of component\"\r\n                    value={title}\r\n                    onChange={handleChange}\r\n                    name=\"title\"\r\n                />\r\n            ) : (\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"title\"\r\n                    label=\"Title of component\"\r\n                    value={title}\r\n                    onChange={handleChange}\r\n                    name=\"title\"\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport Body from '../GeneralPageComponents/Body';\nimport Title from '../GeneralPageComponents/Title';\nimport { Typography, Container, Button, Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport universalPost from '../../../universalHTTPRequests/post.js';\nimport universalDelete from '../../../universalHTTPRequests/delete.js';\nimport SuccessBanner from '../../Banners/SuccessBanner';\nimport ErrorBanner from '../../Banners/ErrorBanner';\nimport LoadingSpinner from '../../LoadingSpinner';\nimport HelpIcon from '@material-ui/icons/Help';\nimport GenericInfoButton from '../../InfoButtons/GenericInfoButton';\n\nconst useStyles = makeStyles((theme) => ({\n    saveButton: {\n        margin: theme.spacing(2),\n        float: 'right',\n        textTransform: 'unset',\n    },\n    bannerContainer: {\n        marginTop: theme.spacing(1),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n}));\n\nGeneric.propTypes = {\n    scenarioComponents: PropTypes.any,\n    setScenarioComponents: PropTypes.any,\n    setCurrentPageID: PropTypes.any,\n    page_id: PropTypes.any,\n    page_type: PropTypes.any,\n    page_title: PropTypes.any,\n    scenario_ID: PropTypes.any,\n    version_ID: PropTypes.any,\n    next_page_id: PropTypes.any,\n    body: PropTypes.any,\n    bodies: PropTypes.any,\n    xCoord: PropTypes.any,\n    yCoord: PropTypes.any,\n};\n\nexport default function Generic(props) {\n    const {\n        scenarioComponents,\n        setScenarioComponents,\n        setCurrentPageID,\n        page_id,\n        page_type,\n        page_title,\n        scenario_ID,\n        next_page_id,\n        body,\n        bodies,\n        xCoord,\n        yCoord,\n    } = props;\n\n    // eslint-disable-next-line\n    const [postValues, setPostValues] = useState({\n        data: null,\n        loading: false,\n        error: null,\n    });\n    // eslint-disable-next-line\n    const [deleteValues, setDeleteValues] = useState({\n        data: null,\n        loading: false,\n        error: null,\n    });\n\n    const classes = useStyles();\n    const [pageID, setPageID] = useState(page_id);\n    const [title, setTitle] = useState(page_title);\n    const [bodyText, setBodyText] = useState(body);\n    // eslint-disable-next-line\n    const [bodiesText, setBodiesText] = useState(bodies);\n    const [errorTitle, setErrorTitle] = useState(false);\n    const [errorTitleText, setErrorTitleText] = useState(false);\n    const [errorBody, setErrorBody] = useState(false);\n\n    var postReqBody = {\n        PAGE_TYPE: page_type,\n        PAGE_TITLE: title,\n        PAGE_BODY: bodyText,\n        SCENARIO: scenario_ID,\n        NEXT_PAGE: next_page_id,\n        BODIES: bodiesText,\n        X_COORDINATE: xCoord,\n        Y_COORDINATE: yCoord,\n    };\n\n    function handlePost(setPostValues, postReqBody, s_id, first_time) {\n        const endpoint = '/page?page_id=' + pageID;\n\n        function onSuccess(resp) {\n            const deleteEndPoint = '/page?page_id=' + pageID;\n            let newScenarioComponents = [...scenarioComponents];\n            let component = newScenarioComponents.find((x) => x.id === pageID);\n            component.id = resp.data.PAGE;\n            component.title = title;\n            setPageID(resp.data.PAGE);\n            setCurrentPageID(resp.data.PAGE);\n            setScenarioComponents(newScenarioComponents);\n            setSuccessBannerFade(true);\n            setSuccessBannerMessage('Successfully saved page!');\n            universalDelete(setDeleteValues, deleteEndPoint, null, null, {\n                PAGE: pageID,\n            });\n        }\n\n        function onFailure() {\n            setErrorBannerFade(true);\n            setErrorBannerMessage('Failed to save page! Please try again.');\n        }\n\n        let validInput = true;\n\n        if (!title || !title.trim()) {\n            setErrorTitle(true);\n            setErrorTitleText('Page title cannot be empty');\n            validInput = false;\n        } else if (title.trim().length >= 1000) {\n            setErrorTitle(true);\n            setErrorTitleText('Page title must have less than 1000 characters');\n            validInput = false;\n        } else {\n            setErrorTitle(false);\n        }\n\n        if (!bodyText || !bodyText.trim()) {\n            setErrorBody(true);\n            validInput = false;\n        } else {\n            setErrorBody(false);\n        }\n\n        if (validInput) {\n            universalPost(\n                setPostValues,\n                endpoint,\n                onFailure,\n                onSuccess,\n                postReqBody\n            );\n        } else {\n            setErrorBannerFade(true);\n            setErrorBannerMessage(\n                'There are currently errors within your page. Please fix all errors in order to save.'\n            );\n        }\n    }\n\n    const savePage = () => {\n        handlePost(setPostValues, postReqBody, scenario_ID, false);\n    };\n\n    //for info button\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const [successBannerMessage, setSuccessBannerMessage] = useState('');\n    const [successBannerFade, setSuccessBannerFade] = useState(false);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setSuccessBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [successBannerFade]);\n\n    const [errorBannerMessage, setErrorBannerMessage] = useState('');\n    const [errorBannerFade, setErrorBannerFade] = useState(false);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setErrorBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [errorBannerFade]);\n\n    if (postValues.loading) {\n        return <LoadingSpinner />;\n    }\n\n    //TODO information list\n    return (\n        <Container component=\"main\">\n            <div className={classes.bannerContainer}>\n                <SuccessBanner\n                    successMessage={successBannerMessage}\n                    fade={successBannerFade}\n                />\n                <ErrorBanner\n                    errorMessage={errorBannerMessage}\n                    fade={errorBannerFade}\n                />\n            </div>\n            <Typography align=\"center\" variant=\"h2\">\n                Generic Component\n            </Typography>\n            <Grid container justify=\"flex-end\">\n                <Button color=\"primary\" onClick={handleClickOpen}>\n                    <HelpIcon />\n                </Button>\n                <GenericInfoButton\n                    description={`on this page`}\n                    open={open}\n                    setOpen={setOpen}\n                />\n            </Grid>\n            <Title\n                title={title}\n                setTitle={setTitle}\n                error={errorTitle}\n                errorMessage={errorTitleText}\n            />\n            <Body\n                body={bodyText}\n                setBody={setBodyText}\n                error={errorBody}\n                errorMessage={'Page body cannot be empty.'}\n            />\n            <Button\n                className={classes.saveButton}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={savePage}\n            >\n                Save\n            </Button>\n        </Container>\n    );\n}\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nGenericDeleteWarning.propTypes = {\r\n    remove: PropTypes.func.isRequired,\r\n    open: PropTypes.any.isRequired,\r\n    setOpen: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default function GenericDeleteWarning(props) {\r\n    GenericDeleteWarning.propTypes = props.data;\r\n    const data = props;\r\n    //Remove must be a function that deletes the component\r\n    const { remove, open, setOpen } = data;\r\n\r\n    //Func that closes the popup window\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-slide-title\"\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-slide-title\">\r\n                {'Are you sure you want to delete this?'}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                    Once this action is performed, it cannot be undone!\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={remove} color=\"primary\">\r\n                    Yes\r\n                </Button>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    No\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Button, Box, Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport GenericDeleteWarning from '../../DeleteWarnings/GenericDeleteWarning';\r\nimport deleteReq from '../../../universalHTTPRequests/delete';\r\nimport post from '../../../universalHTTPRequests/post';\r\nimport put from '../../../universalHTTPRequests/put';\r\nconst endpointPOST = '/api/issues/';\r\n//Need issueID\r\nconst endpointPUT = '/api/issues/';\r\n//Need issueID\r\nconst endpointDELETE = '/api/issues/';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        margin: theme.spacing(0.5),\r\n        marginTop: theme.spacing(0),\r\n        width: '100%',\r\n        textTransform: 'unset',\r\n    },\r\n}));\r\n\r\nIssueEntryField.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    scenarioID: PropTypes.number,\r\n    issue: PropTypes.string,\r\n    score: PropTypes.number,\r\n    isNewIssue: PropTypes.bool,\r\n    issueEntryFieldList: PropTypes.any.isRequired,\r\n    setIssueEntryFieldList: PropTypes.any.isRequired,\r\n    setSuccessBannerFade: PropTypes.any,\r\n    setSuccessBannerMessage: PropTypes.any,\r\n    setErrorBannerMessage: PropTypes.any,\r\n    setErrorBannerFade: PropTypes.any,\r\n};\r\n\r\nexport default function IssueEntryField({\r\n    id,\r\n    scenarioID,\r\n    issue,\r\n    score,\r\n    isNewIssue,\r\n    setIssueEntryFieldList,\r\n    issueEntryFieldList,\r\n    setSuccessBannerMessage,\r\n    setSuccessBannerFade,\r\n    setErrorBannerMessage,\r\n    setErrorBannerFade,\r\n}) {\r\n    const classes = useStyles();\r\n\r\n    //TODO replace once versionID is implemented with backend\r\n    const versionID = 2;\r\n\r\n    // eslint-disable-next-line\r\n    const [postValue, setPost] = useState({\r\n        data: null,\r\n        loading: true,\r\n        error: null,\r\n    });\r\n    // eslint-disable-next-line\r\n    const [putValue, setPut] = useState({\r\n        data: null,\r\n        loading: true,\r\n        error: null,\r\n    });\r\n    // eslint-disable-next-line\r\n    const [deleteReqValue, setDeleteReq] = useState({\r\n        data: null,\r\n        loading: true,\r\n        error: null,\r\n    });\r\n\r\n    const [issueID, setIssueID] = useState(id);\r\n    const [issueScore, setIssueScore] = useState(score ? score.toString() : '');\r\n    const [issueName, setIssueName] = useState(issue ? issue : '');\r\n    const [newIssue, setNewIssue] = useState(isNewIssue);\r\n    const [unsaved, setUnsaved] = useState(isNewIssue);\r\n\r\n    const handleChangeScore = (content) => {\r\n        setUnsaved(true);\r\n        setIssueScore(content.target.value);\r\n    };\r\n\r\n    const handleChangeName = (content) => {\r\n        setUnsaved(true);\r\n        setIssueName(content.target.value);\r\n    };\r\n\r\n    const [errorName, setErrorName] = useState(false);\r\n    const [errorNameText, setErrorNameText] = useState('');\r\n    const [errorScore, setErrorScore] = useState(false);\r\n    const [errorScoreText, setErrorScoreText] = useState('');\r\n\r\n    const saveIssue = () => {\r\n        let validInput = true;\r\n\r\n        //Issue name is null or white space and issue score is null\r\n        if (!issueName || !issueName.trim()) {\r\n            setErrorNameText('Issue score and name is not filled in!');\r\n            setErrorName(true);\r\n            validInput = false;\r\n        } else {\r\n            setErrorName(false);\r\n        }\r\n\r\n        score = Number(issueScore);\r\n        //Issue score is null\r\n        if (!issueScore || !issueScore.trim()) {\r\n            //Issue score is null\r\n            setErrorScoreText('Issue score and name is not filled in!');\r\n            setErrorScore(true);\r\n            validInput = false;\r\n        } else if (\r\n            isNaN(issueScore) ||\r\n            issueScore.toString().indexOf('.') !== -1 ||\r\n            score > 5 ||\r\n            score < 0\r\n        ) {\r\n            //Issue score is not an integer between 0 and 5\r\n            setErrorScoreText(\r\n                'Issue score must be an integer between 0 and 5.'\r\n            );\r\n            setErrorScore(true);\r\n            validInput = false;\r\n        } else {\r\n            setErrorScore(false);\r\n        }\r\n\r\n        if (validInput) {\r\n            if (newIssue) {\r\n                function onSuccess(resp) {\r\n                    //if newly created issue, replace fake ID with new ID\r\n                    if (resp.data) {\r\n                        setUnsaved(false);\r\n                        setIssueID(resp.data.ISSUE);\r\n                        setSuccessBannerFade(true);\r\n                        setSuccessBannerMessage('Successfully created issue!');\r\n                        setNewIssue(false);\r\n                    }\r\n                }\r\n                function onFailure() {\r\n                    setErrorBannerMessage('Failed to save! Please try again.');\r\n                    setErrorBannerFade(true);\r\n                }\r\n                post(setPost, endpointPOST, onFailure, onSuccess, {\r\n                    SCENARIO: scenarioID,\r\n                    VERSION: versionID,\r\n                    IMPORTANCE_SCORE: score,\r\n                    NAME: issueName,\r\n                });\r\n            } else {\r\n                function onSuccess() {\r\n                    setUnsaved(false);\r\n                    setSuccessBannerFade(true);\r\n                    setSuccessBannerMessage('Successfully updated issue!');\r\n                }\r\n                function onFailure() {\r\n                    setErrorBannerMessage('Failed to save! Please try again.');\r\n                    setErrorBannerFade(true);\r\n                }\r\n                put(setPut, endpointPUT + issueID + '/', onFailure, onSuccess, {\r\n                    SCENARIO: scenarioID,\r\n                    VERSION: versionID,\r\n                    IMPORTANCE_SCORE: score,\r\n                    NAME: issueName,\r\n                    ISSUE: id,\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const deleteIssue = () => {\r\n        //remove issue from array, id represents the id in issueEntryFieldList\r\n        //If issue is a new issue, A POST request will replace the fake ID with the ID in database\r\n        //ID in the array will remain the fake id, so that is why we compare with 'id' rather than 'issueID'\r\n        if (newIssue) {\r\n            let newData = issueEntryFieldList.data.filter(\r\n                (entry) => entry.ISSUE !== id\r\n            );\r\n            setIssueEntryFieldList({ ...issueEntryFieldList, data: newData });\r\n        } else {\r\n            function successfullySaved() {\r\n                setUnsaved(false);\r\n                setSuccessBannerFade(true);\r\n                setSuccessBannerMessage('Successfully deleted issue!');\r\n                let newData = issueEntryFieldList.data.filter(\r\n                    (entry) => entry.ISSUE !== id\r\n                );\r\n                setIssueEntryFieldList({\r\n                    ...issueEntryFieldList,\r\n                    data: newData,\r\n                });\r\n            }\r\n            function onFailure() {\r\n                setErrorBannerMessage('Failed to save! Please try again.');\r\n                setErrorBannerFade(true);\r\n            }\r\n\r\n            deleteReq(\r\n                setDeleteReq,\r\n                endpointDELETE + issueID + '/',\r\n                onFailure,\r\n                successfullySaved,\r\n                {\r\n                    SCENARIO: scenarioID,\r\n                    ISSUE: issueID,\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    //Used for Delete Warning\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {unsaved ? (\r\n                <Typography variant=\"h6\" align=\"center\" color=\"error\">\r\n                    Unsaved\r\n                </Typography>\r\n            ) : null}\r\n            <Box display=\"flex\" flexDirection=\"row\" p={1} m={1}>\r\n                <Box p={2}>\r\n                    {errorName ? (\r\n                        <TextField\r\n                            error\r\n                            helperText={errorNameText}\r\n                            style={{ width: '65%' }}\r\n                            id=\"outlined-text\"\r\n                            label=\"Issue\"\r\n                            value={issueName}\r\n                            onChange={handleChangeName}\r\n                            multiline\r\n                            rows={2}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    ) : (\r\n                        <TextField\r\n                            style={{ width: '65%' }}\r\n                            id=\"outlined-text\"\r\n                            label=\"Issue\"\r\n                            value={issueName}\r\n                            onChange={handleChangeName}\r\n                            multiline\r\n                            rows={2}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    )}\r\n                    {errorScore ? (\r\n                        <TextField\r\n                            error\r\n                            helperText={errorScoreText}\r\n                            style={{ width: '35%' }}\r\n                            margin=\"normal\"\r\n                            id=\"outlined-number\"\r\n                            label=\"Importance Factor\"\r\n                            placeholder=\"0-5\"\r\n                            onChange={handleChangeScore}\r\n                            value={issueScore}\r\n                            rows={1}\r\n                            variant=\"filled\"\r\n                        />\r\n                    ) : (\r\n                        <TextField\r\n                            style={{ width: '35%' }}\r\n                            margin=\"normal\"\r\n                            id=\"outlined-number\"\r\n                            label=\"Importance Factor\"\r\n                            placeholder=\"0-5\"\r\n                            onChange={handleChangeScore}\r\n                            value={issueScore}\r\n                            rows={1}\r\n                            variant=\"filled\"\r\n                        />\r\n                    )}\r\n                </Box>\r\n                <Box p={1}>\r\n                    <div>\r\n                        <Button\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => saveIssue()}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </div>\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleClickOpen}\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                    <GenericDeleteWarning\r\n                        remove={() => deleteIssue()}\r\n                        open={open}\r\n                        setOpen={setOpen}\r\n                    />\r\n                </Box>\r\n            </Box>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EntryField from './IssueEntryField';\r\nimport { Container, Button } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport SuccessBanner from '../../Banners/SuccessBanner';\r\nimport ErrorBanner from '../../Banners/ErrorBanner';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexDirection: 'column',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n        marginTop: theme.spacing(1),\r\n        textTransform: 'unset',\r\n    },\r\n}));\r\n\r\nIssueEntryFieldList.propTypes = {\r\n    issueEntryFieldList: PropTypes.any.isRequired,\r\n    setIssueEntryFieldList: PropTypes.any.isRequired,\r\n    scenarioID: PropTypes.number,\r\n};\r\n\r\nexport default function IssueEntryFieldList({\r\n    issueEntryFieldList,\r\n    setIssueEntryFieldList,\r\n    scenarioID,\r\n}) {\r\n    const classes = useStyles();\r\n\r\n    //When we select new issue button, we add new issue object into array.\r\n    //We set a temporary unique ID.\r\n    function setNewIssueID() {\r\n        let newID = Math.floor(Math.random() * 10000000);\r\n        let collision =\r\n            issueEntryFieldList.data.filter((data) => data.ISSUE === newID)\r\n                .length !== 0;\r\n        while (collision) {\r\n            newID = Math.floor(Math.random() * 10000000);\r\n            const checkNewID = newID;\r\n            collision =\r\n                issueEntryFieldList.data.filter(\r\n                    (data) => data.ISSUE === checkNewID\r\n                ).length !== 0;\r\n        }\r\n        return newID;\r\n    }\r\n\r\n    const [entryCur, setEntryCur] = useState({\r\n        ISSUE: setNewIssueID(),\r\n        isNewIssue: true,\r\n    });\r\n\r\n    const addIssue = (e) => {\r\n        e.preventDefault();\r\n        const newEntry = entryCur;\r\n        issueEntryFieldList.data = issueEntryFieldList.data.concat(newEntry);\r\n        setIssueEntryFieldList(issueEntryFieldList);\r\n        setEntryCur({\r\n            ISSUE: setNewIssueID(),\r\n            isNewIssue: true,\r\n        });\r\n    };\r\n\r\n    const [successBannerMessage, setSuccessBannerMessage] = useState('');\r\n    const [successBannerFade, setSuccessBannerFade] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            setSuccessBannerFade(false);\r\n        }, 1000);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [successBannerFade]);\r\n\r\n    const [errorBannerMessage, setErrorBannerMessage] = useState('');\r\n    const [errorBannerFade, setErrorBannerFade] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            setErrorBannerFade(false);\r\n        }, 1000);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [errorBannerFade]);\r\n\r\n    return (\r\n        <Container component=\"main\" className={classes.container}>\r\n            <SuccessBanner\r\n                successMessage={successBannerMessage}\r\n                fade={successBannerFade}\r\n            />\r\n            <ErrorBanner\r\n                errorMessage={errorBannerMessage}\r\n                fade={errorBannerFade}\r\n            />\r\n            <Button\r\n                className={classes.button}\r\n                id=\"button\"\r\n                onClick={addIssue}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n            >\r\n                Create Issue\r\n            </Button>\r\n\r\n            <form id=\"form\">\r\n                {issueEntryFieldList.data.map((entry) => (\r\n                    <EntryField\r\n                        key={entry.ISSUE}\r\n                        id={entry.ISSUE}\r\n                        scenarioID={scenarioID}\r\n                        isNewIssue={entry.isNewIssue}\r\n                        issue={entry.NAME}\r\n                        score={entry.IMPORTANCE_SCORE}\r\n                        setIssueEntryFieldList={setIssueEntryFieldList}\r\n                        issueEntryFieldList={issueEntryFieldList}\r\n                        entry={entry}\r\n                        setSuccessBannerFade={setSuccessBannerFade}\r\n                        setSuccessBannerMessage={setSuccessBannerMessage}\r\n                        setErrorBannerFade={setErrorBannerFade}\r\n                        setErrorBannerMessage={setErrorBannerMessage}\r\n                    />\r\n                ))}\r\n            </form>\r\n        </Container>\r\n    );\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport {\n    Container,\n    Box,\n    Button,\n    Typography,\n    CssBaseline,\n    AppBar,\n    Toolbar,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport MaterialTable from 'material-table';\nimport { forwardRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport get from '../../../universalHTTPRequests/get';\nimport LoadingSpinner from '../../LoadingSpinner';\nimport SuccessBanner from '../../Banners/SuccessBanner';\nimport ErrorBanner from '../../Banners/ErrorBanner';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport { useLocation } from 'react-router-dom';\nimport { baseURL } from '../../../Constants/Config';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport RateReviewIcon from '@material-ui/icons/RateReview';\n\nconst tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => (\n        <ChevronRight {...props} ref={ref} />\n    )),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => (\n        <ChevronLeft {...props} ref={ref} />\n    )),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef((props, ref) => (\n        <ArrowDownward {...props} ref={ref} />\n    )),\n    ThirdStateCheck: forwardRef((props, ref) => (\n        <Remove {...props} ref={ref} />\n    )),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n    RateReview: forwardRef((props, ref) => (\n        <RateReviewIcon {...props} ref={ref} />\n    )),\n};\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        marginTop: theme.spacing(12),\n        textAlign: 'center',\n    },\n    button: {\n        marginBottom: theme.spacing(1),\n        textTransform: 'unset',\n    },\n    exitButton: {\n        margin: theme.spacing(2),\n        borderStyle: 'solid',\n        borderColor: 'white',\n        border: 2,\n    },\n    title: {\n        textAlign: 'center',\n    },\n    issue: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    errorContainer: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    iconError: {\n        paddingRight: theme.spacing(2),\n        fontSize: '75px',\n    },\n    iconRefreshLarge: {\n        fontSize: '75px',\n    },\n    iconRefreshSmall: {\n        fontSize: '30px',\n    },\n}));\n\nIssueMatrix.propTypes = {\n    stakeHolders: PropTypes.any,\n    setStakeHolders: PropTypes.any,\n    scenario: PropTypes.number,\n};\n\n//Needs scenario id\nconst endpointGET = '/student_info?scenario_id=';\n\nexport default function IssueMatrix({ scenario }) {\n    //receives the scenario ID\n    const classes = useStyles();\n\n    const [didGetSHs, setDidGetSHs] = useState(false); //stores status of whether stakeholders have been received\n    const stakeHolders = useRef(null);\n    const [cols, setColumns] = useState([]);\n    const [rows, setRows] = useState([]);\n    const [issueSums, setSums] = useState([]);\n\n    const [didGetIssues, setDidGetIssues] = useState(false);\n    const [didSetData, setDidSetData] = useState(false);\n\n    const [isLoading, setLoading] = useState(false); //stores status of whether something is loading\n    var axios = require('axios'); //backend\n\n    const [successBannerMessage, setSuccessBannerMessage] = useState(''); //success banner\n    const [successBannerFade, setSuccessBannerFade] = useState(false);\n\n    useEffect(() => {\n        stakeHolders.current = [];\n    }, []);\n\n    useEffect(() => {\n        if (didGetSHs && didSetData) {\n            onStakeHolderIssueChange();\n        }\n    }, [rows]);\n\n    useEffect(() => {\n        if (didGetSHs) {\n            setTimeout(() => {\n                if (stakeHolders.current.length > 0) {\n                    setDidSetData(true);\n                    setColData();\n                    setRowData();\n                }\n            }, 2000);\n        }\n    }, [stakeHolders]);\n\n    //let issuePromises = [];\n\n    useEffect(() => {\n        //sets behaviour of success banner\n        const timeout = setTimeout(() => {\n            setSuccessBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [successBannerFade]);\n\n    const [errorBannerMessage, setErrorBannerMessage] = useState(''); //error banner\n    const [errorBannerFade, setErrorBannerFade] = useState(false);\n\n    useEffect(() => {\n        //sets behaviour of error banner\n        const timeout = setTimeout(() => {\n            setErrorBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [errorBannerFade]);\n\n    function getExistingStakeHolders() {\n        //setLoading(true); //starts loading icon\n\n        var data = { SCENARIO: { scenario } };\n        var config = {\n            method: 'get',\n            url: baseURL + '/stakeholder?scenario_id=' + scenario,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            data: data,\n        };\n\n        axios(config) //backend call to get data in response\n            .then(function (response) {\n                stakeHolders.current = stakeHolders.current.concat(\n                    response.data\n                );\n            })\n            .catch(function (error) {\n                setErrorBannerMessage(\n                    'Failed to get Stakeholders! Please try again.'\n                );\n                setErrorBannerFade(true);\n            });\n        setDidGetSHs(true);\n        setLoading(false);\n    }\n\n    function saveStakeHolders() {\n        setLoading(true);\n\n        var issues = [];\n        var changedStakeHolder;\n        for (let i = 0; i < stakeHolders.current.length; i++) {\n            let curStakeHolder = stakeHolders.current[i];\n            let curRow = rows[i];\n\n            curStakeHolder.ISSUES.forEach((issue) => {\n                if (\n                    curRow['Issue' + issue.NAME.toUpperCase()] !==\n                    issue.COVERAGE_SCORE\n                ) {\n                    issue.COVERAGE_SCORE =\n                        curRow['Issue' + issue.NAME.toUpperCase()];\n                    changedStakeHolder = curStakeHolder;\n                }\n                issues.push({\n                    COVERAGE_SCORE: issue.COVERAGE_SCORE,\n                    ISSUE: issue.ISSUE,\n                    STAKEHOLDER: issue.STAKEHOLDER,\n                });\n            });\n        }\n\n        if (changedStakeHolder !== undefined) {\n            var data = [...issues];\n\n            var config = {\n                method: 'put',\n                url:\n                    baseURL +\n                    '/multi_coverage?STAKEHOLDER=' +\n                    changedStakeHolder.STAKEHOLDER,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                data: data,\n            };\n\n            axios(config)\n                .then(function (response) {\n                    setSuccessBannerMessage(\n                        'Successfully saved the issues for this stakeholder!'\n                    );\n                    setSuccessBannerFade(true);\n                })\n                .catch(function (error) {\n                    setErrorBannerMessage(\n                        'Failed to save the issues for this stakeholder! Please try again.'\n                    );\n                    setErrorBannerFade(true);\n                });\n        }\n        setLoading(false);\n    }\n\n    function setColData() {\n        let cols = [\n            { title: 'Name', field: 'NAME' },\n            { title: 'Description', field: 'DESCRIPTION' },\n        ];\n        stakeHolders.current[0].ISSUES.forEach((issue) => {\n            let insertBoolean = true;\n            for (let i = 0; i < cols.length; i++) {\n                if (cols[i].title === 'Issue' + issue.NAME) {\n                    insertBoolean = false;\n                }\n            }\n            if (insertBoolean) {\n                cols.push({\n                    title: 'Issue' + issue.NAME,\n                    field: 'Issue' + issue.NAME.toUpperCase(),\n                    type: 'numeric',\n                });\n            }\n        });\n        setColumns(cols);\n    }\n    function onStakeHolderIssueChange() {\n        let sums = { NAME: '', DESCRIPTION: 'Running Issue Sums' };\n        for (let j = 0; j < stakeHolders.current.length; j++) {\n            let stakeHolder = stakeHolders.current[j];\n            for (let i = 0; i < stakeHolder.ISSUES.length; i++) {\n                let curIssue = stakeHolder.ISSUES[i];\n                if (sums['Issue' + curIssue.NAME.toUpperCase()] === undefined) {\n                    sums['Issue' + curIssue.NAME.toUpperCase()] = 0;\n                }\n                sums['Issue' + curIssue.NAME.toUpperCase()] +=\n                    rows[j]['Issue' + curIssue.NAME.toUpperCase()];\n            }\n        }\n        setSums(sums);\n        saveStakeHolders();\n    }\n\n    function setRowData() {\n        setLoading(true);\n        let sums = { NAME: '', DESCRIPTION: 'Running Issue Sums' };\n        let data = stakeHolders.current.map((stakeHolder) => {\n            let row = {\n                NAME: stakeHolder.NAME,\n                DESCRIPTION: stakeHolder.JOB,\n            };\n            stakeHolder.ISSUES.forEach((curIssue) => {\n                row['Issue' + curIssue.NAME.toUpperCase()] =\n                    curIssue.COVERAGE_SCORE;\n                if (sums['Issue' + curIssue.NAME.toUpperCase()] === undefined) {\n                    sums['Issue' + curIssue.NAME.toUpperCase()] = 0;\n                }\n                sums['Issue' + curIssue.NAME.toUpperCase()] +=\n                    curIssue.COVERAGE_SCORE;\n            });\n            return row;\n        });\n        setSums(sums);\n        setRows(data);\n    }\n\n    if (isLoading) {\n        return <LoadingSpinner />;\n    }\n\n    if (!didGetSHs) {\n        //if stakeholders have alreasdy been loaded, don't do it again\n        getExistingStakeHolders();\n    }\n    /*if (didGetSHs && !didGetIssues) {\n        setDidGetIssues(true);\n        //getIssues();\n    }\n    if (didGetIssues && !didSetData) {\n        setDidSetData(true);\n        setColData();\n        setRowData();\n    }*/\n\n    return (\n        <Container component=\"main\" className={classes.container}>\n            <MaterialTable /*table*/\n                icons={tableIcons} /*all the icons*/\n                title={'Issue Coverage Matrix'}\n                options={{\n                    exportButton: true,\n                }}\n                editable={{\n                    isEditHidden: (rowData) =>\n                        rowData.DESCRIPTION === 'Running Issue Sums',\n                    isDeleteHidden: (rowData) =>\n                        rowData.DESCRIPTION === 'Running Issue Sums',\n                    onRowAdd: (newData) =>\n                        new Promise((resolve, reject) => {\n                            setTimeout(() => {\n                                setRows([...rows, newData]);\n\n                                resolve();\n                            }, 1000);\n                        }),\n                    onRowUpdate: (newData, oldData) =>\n                        new Promise((resolve, reject) => {\n                            setTimeout(() => {\n                                const dataUpdate = [...rows];\n                                const index = oldData.tableData.id;\n                                dataUpdate[index] = newData;\n                                setRows([...dataUpdate]);\n                                resolve();\n                            }, 1000);\n                        }),\n                    onRowDelete: (oldData) =>\n                        new Promise((resolve, reject) => {\n                            setTimeout(() => {\n                                /*const dataDelete = [...data];\n                                const index = oldData.tableData.id;\n                                dataDelete.splice(index, 1);\n                                setData([...dataDelete]);*/\n\n                                resolve();\n                            }, 1000);\n                        }),\n                }}\n                columns={cols}\n                data={rows.concat(issueSums)}\n            />\n        </Container>\n    );\n}\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\n// eslint-disable-next-line\r\nconst useStyles = makeStyles((theme) => ({\r\n    margin: {\r\n        margin: theme.spacing(0.5),\r\n        marginTop: theme.spacing(0),\r\n        width: 50,\r\n    },\r\n}));\r\n\r\nIssueRow.propTypes = {\r\n    name: PropTypes.string,\r\n    score: PropTypes.number,\r\n    issue_number: PropTypes.number,\r\n    scenario: PropTypes.number,\r\n    issues: PropTypes.any,\r\n    setIssues: PropTypes.any,\r\n};\r\n\r\nexport default function IssueRow({\r\n    name,\r\n    score,\r\n    issue_number,\r\n    issues,\r\n    setIssues,\r\n}) {\r\n    const [issueScore, setIssueScore] = useState(score);\r\n\r\n    function updateIssueScore(val) {\r\n        const updatedIssues = [...issues];\r\n        setIssues(\r\n            updatedIssues.map((i) => {\r\n                if (i.ISSUE === issue_number) {\r\n                    i.COVERAGE_SCORE = val;\r\n                }\r\n                return i;\r\n            })\r\n        );\r\n    }\r\n\r\n    const onChangeScore = (e) => {\r\n        setIssueScore(e.target.value);\r\n        updateIssueScore(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TableRow key={issue_number}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                    <TextField\r\n                        id=\"filled\"\r\n                        defaultValue={name}\r\n                        variant=\"filled\"\r\n                    />\r\n                </TableCell>\r\n\r\n                <TableCell>\r\n                    <TextField\r\n                        id=\"filled\"\r\n                        defaultValue={issueScore}\r\n                        variant=\"filled\"\r\n                        onChange={onChangeScore}\r\n                    />\r\n                </TableCell>\r\n            </TableRow>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport './table.css';\r\nimport PropTypes from 'prop-types';\r\nimport SuccessBanner from './../../../Banners/SuccessBanner';\r\nimport ErrorBanner from './../../../Banners/ErrorBanner';\r\nimport IssueRow from './IssueRow';\r\nimport LoadingSpinner from './../../../LoadingSpinner';\r\nimport { baseURL } from './../../../../Constants/Config';\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 300,\r\n    },\r\n});\r\n\r\nBasicTable.propTypes = {\r\n    stakeholder_id: PropTypes.number,\r\n    passed_issues: PropTypes.any,\r\n};\r\n\r\nexport default function BasicTable({ stakeholder_id, passed_issues }) {\r\n    //used to track if we are waiting on a HTTP GET/POST/PUT request\r\n    //not needed for DELETE\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    //for success and error banners\r\n    const [successBannerMessage, setSuccessBannerMessage] = useState('');\r\n    const [successBannerFade, setSuccessBannerFade] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            setSuccessBannerFade(false);\r\n        }, 1000);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [successBannerFade]);\r\n\r\n    const [errorBannerMessage, setErrorBannerMessage] = useState('');\r\n    const [errorBannerFade, setErrorBannerFade] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            setErrorBannerFade(false);\r\n        }, 1000);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [errorBannerFade]);\r\n\r\n    const [issues, setIssues] = useState(passed_issues);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleSave = (e) => {\r\n        if (!checkTime(setCurrentTime, currentTime)) {\r\n            return;\r\n        }\r\n        setLoading(true);\r\n\r\n        var axios = require('axios');\r\n\r\n        var data = [...issues];\r\n        data = data.map((i) => {\r\n            delete i.NAME;\r\n            return i;\r\n        });\r\n\r\n        var config = {\r\n            method: 'put',\r\n            url: baseURL + '/multi_coverage?STAKEHOLDER=' + stakeholder_id,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            data: data,\r\n        };\r\n\r\n        axios(config)\r\n            .then(function (response) {\r\n                setSuccessBannerMessage(\r\n                    'Successfully saved the issues for this stakeholder!'\r\n                );\r\n                setSuccessBannerFade(true);\r\n            })\r\n            .catch(function (error) {\r\n                setErrorBannerMessage(\r\n                    'Failed to save the issues for this stakeholder! Please try again.'\r\n                );\r\n                setErrorBannerFade(true);\r\n            });\r\n\r\n        setLoading(false);\r\n    };\r\n\r\n    /*\r\n     * This section is about managing time to prevent sending a combination of multiple\r\n     *    HTTP GET/POST/PUT/DELETE calls before a response is returned\r\n     */\r\n    const [currentTime, setCurrentTime] = useState(getCurrentTimeInt());\r\n    //gets the current time in hms and converts it to an int\r\n    function getCurrentTimeInt() {\r\n        let d = Date();\r\n        var h = d.substring(16, 18);\r\n        var m = d.substring(19, 21);\r\n        var s = d.substring(22, 24);\r\n        return 60 * (60 * h + m) + s;\r\n    }\r\n\r\n    //checks if at least 1 second has elapsed since last action\r\n    //if someone waits a multiple of exactly 24 hours since their last action they will\r\n    //    not be able to take an action for an additional second\r\n    function checkTime(setTime, t) {\r\n        var ret = false;\r\n        //current time difference is at least 1 second, but that SHOULD be ample time for\r\n        //the database to get back to the frontend\r\n        if (getCurrentTimeInt() - t !== 0) {\r\n            ret = true;\r\n        }\r\n        setTime(getCurrentTimeInt());\r\n        return ret;\r\n    }\r\n\r\n    if (isLoading) {\r\n        return <LoadingSpinner />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                id=\"button-save\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleSave}\r\n            >\r\n                Save Changes\r\n            </Button>\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Issue</TableCell>\r\n                            <TableCell>Score</TableCell>\r\n                            <TableCell align=\"right\"></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {issues.map((i) => (\r\n                            <TableRow key={i.ISSUE}>\r\n                                <IssueRow\r\n                                    name={i.NAME}\r\n                                    score={i.COVERAGE_SCORE}\r\n                                    issue_number={i.ISSUE}\r\n                                    issues={issues}\r\n                                    setIssues={setIssues}\r\n                                />\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <SuccessBanner\r\n                successMessage={successBannerMessage}\r\n                fade={successBannerFade}\r\n            />\r\n            <ErrorBanner\r\n                errorMessage={errorBannerMessage}\r\n                fade={errorBannerFade}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { Button, Container } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport PropTypes from 'prop-types';\nimport GenericDeleteWarning from '../../../../DeleteWarnings/GenericDeleteWarning';\n/*import MaterialTable from 'material-table';\nimport { forwardRef } from 'react';\nimport { Link } from 'react-router-dom';\n//import get from '../../../universalHTTPRequests/get';\n//import LoadingSpinner from '../../LoadingSpinner';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport { useLocation } from 'react-router-dom';\n//import { baseURL } from '../../../Constants/Config';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport RateReviewIcon from '@material-ui/icons/RateReview';*/\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n/*const tableIcons = {\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => (\n        <ChevronLeft {...props} ref={ref} />\n    )),\n};*/\n\nconst useStyles = makeStyles((theme) => ({\n    /*container: {\n        marginTop: theme.spacing(12),\n        textAlign: 'center',\n    },*/\n    margin: {\n        margin: theme.spacing(0.5),\n        marginTop: theme.spacing(0),\n        width: 50,\n    },\n}));\n\nQuestionField.propTypes = {\n    key: PropTypes.number,\n    id: PropTypes.number,\n    removeQuestion: PropTypes.any.isRequired,\n    question: PropTypes.string,\n    response: PropTypes.string,\n    summary: PropTypes.string,\n    QRs: PropTypes.any,\n    setQRs: PropTypes.any,\n};\n\nexport default function QuestionField({\n    key,\n    id,\n    removeQuestion,\n    question,\n    response,\n    summary,\n    QRs,\n    setQRs,\n}) {\n    const [questionValue, setQuestionValue] = useState(question);\n    const [responseValue, setResponseValue] = useState(response);\n    const [summaryValue, setSummaryValue] = useState(summary);\n\n    /*const [didGetIssues, setDidGetIssues] = useState(false);\n    //const [issues, setIssues] = useState([]);\n    const issues = useRef(null);\n    //let issues = [];\n\n    const [didSetData, setDidSetData] = useState(false);\n    const [cols, setColumns] = useState([]); //stores stakeholders\n    const [rows, setRows] = useState([]);\n\n    const [isLoading, setLoading] = useState(false); //stores status of whether something is loading\n    var axios = require('axios'); //backend\n\n    const [successBannerMessage, setSuccessBannerMessage] = useState(''); //success banner\n    const [successBannerFade, setSuccessBannerFade] = useState(false);\n\n    //const [issuePromises, setPromises] = useState([])\n    const issuePromises = useRef(null);*/\n\n    /*useEffect(() => {\n        //stakeHolders.current = [];\n        issuePromises.current = [];\n        issues.current = [];\n    }, []);*/\n\n    //let issuePromises = [];\n\n    /*useEffect(() => {\n        //sets behaviour of success banner\n        const timeout = setTimeout(() => {\n            setSuccessBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [successBannerFade]);*/\n\n    const [errorBannerMessage, setErrorBannerMessage] = useState(''); //error banner\n    const [errorBannerFade, setErrorBannerFade] = useState(false);\n\n    useEffect(() => {\n        //sets behaviour of error banner\n        const timeout = setTimeout(() => {\n            setErrorBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [errorBannerFade]);\n\n    const [currentTime, setCurrentTime] = useState(getCurrentTimeInt());\n    //gets the current time in hms and converts it to an int\n    function getCurrentTimeInt() {\n        let d = Date();\n        var h = d.substring(16, 18);\n        var m = d.substring(19, 21);\n        var s = d.substring(22, 24);\n        return 60 * (60 * h + m) + s;\n    }\n\n    function checkTime(setTime, t) {\n        var ret = false;\n        //current time difference is at least 1 second, but that SHOULD be ample time for\n        //the database to get back to the frontend\n        if (getCurrentTimeInt() - t !== 0) {\n            ret = true;\n        }\n        setTime(getCurrentTimeInt());\n        return ret;\n    }\n\n    function getIssues() {\n        /*setLoading(true);\n        var data = JSON.stringify({});\n\n        var config = {\n            method: 'get',\n            url:\n                baseURL +\n                '/coverages?stakeholder_id=' +\n                stakeHolder.STAKEHOLDER,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            data: data,\n        };\n        issuePromises.current.push(\n            axios(config)\n                .then(function (response) {\n                    issues.current = issues.current.concat(\n                        response.data.ISSUES\n                    );\n                    setLoading(false);\n                })\n                .catch(function (error) {\n                    setErrorBannerMessage(\n                        'Failed to get the issue(s) for this stakeholder! Please try again.'\n                    );\n                    setErrorBannerFade(true);\n                })\n        );\n        */\n    }\n\n    /*function setColData() {\n        setLoading(true);\n\n        let cols = [];\n\n        issues.current.forEach((issue) => {\n            let insertBoolean = true;\n            for (let i = 0; i < cols.length; i++) {\n                if (cols[i].title === 'Issue' + issue.NAME) {\n                    insertBoolean = false;\n                }\n            }\n            if (insertBoolean) {\n                cols.push({\n                    title: 'Issue' + issue.NAME,\n                    field: 'Issue' + issue.NAME.toUpperCase(),\n                });\n            }\n        });\n        setColumns(cols);\n        setLoading(false);\n    }*/\n\n    /*function setRowData() {\n        /*setLoading(true);\n\n        let sums = { NAME: '', DESCRIPTION: 'Running Issue Sums' };\n        let data = stakeHolders.current.map((stakeHolder) => {\n            let row = {\n                NAME: stakeHolder.NAME,\n                DESCRIPTION: stakeHolder.JOB,\n            };\n            issues.current.forEach((curIssue) => {\n                if (curIssue.STAKEHOLDER == stakeHolder.STAKEHOLDER) {\n                    row['Issue' + curIssue.NAME.toUpperCase()] =\n                        curIssue.COVERAGE_SCORE;\n                    if (\n                        sums['Issue' + curIssue.NAME.toUpperCase()] ===\n                        undefined\n                    ) {\n                        sums['Issue' + curIssue.NAME.toUpperCase()] = 0;\n                    }\n                    sums['Issue' + curIssue.NAME.toUpperCase()] +=\n                        curIssue.COVERAGE_SCORE;\n                }\n            });\n            return row;\n        });\n        data.push(sums);\n        setRows(data);\n        setLoading(false);\n    }*/\n\n    /*if (isLoading) {\n        return <LoadingSpinner />;\n    }*/\n\n    /*if (!didGetSHs) {\n        //if stakeholders have alreasdy been loaded, don't do it again\n        getExistingStakeHolders();\n        setDidGetSHs(true);\n    } /*else if(!didGetIssues){\n        fillIssues();\n        setDidGetIssues(true);\n        setColData();\n        setRowData();\n    } else{\n        \n    }\n    if (didGetSHs && !didGetIssues) {\n        getIssues();\n        setDidGetIssues(true);\n    }\n    if (didGetIssues && !didSetData) {\n        setDidSetData(true);\n\n        Promise.all(issuePromises.current).then(() => {\n            setColData();\n            setRowData();\n        });\n    } */\n\n    function updateQRs(shq, shr, shs) {\n        const updatedQRs = [...QRs];\n        setQRs(\n            updatedQRs.map((qr) => {\n                if (qr.CONVERSATION === id) {\n                    qr.QUESTION = shq;\n                    qr.RESPONSE = shr;\n                    qr.SUMMARY = shs;\n                }\n                return qr;\n            })\n        );\n    }\n\n    const onChangeQuestion = (e) => {\n        setQuestionValue(e.target.value);\n        updateQRs(e.target.value, responseValue, summaryValue);\n    };\n    //Used for delete Warning Popup window\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const onChangeResponse = (e) => {\n        setResponseValue(e.target.value);\n        updateQRs(questionValue, e.target.value, summaryValue);\n    };\n\n    const onChangeSummary = (e) => {\n        setSummaryValue(e.target.value);\n        updateQRs(questionValue, responseValue, e.target.value);\n    };\n\n    function createData(issue1, issue2, issue3, issue4, issue5) {\n        return { issue1, issue2, issue3, issue4, issue5 };\n    }\n\n    const rows = [createData(0, 2, 4, 0, 1)];\n\n    const classes = useStyles();\n\n    return (\n        <div>\n            <Box\n                display=\"flex\"\n                flexDirection=\"row\"\n                p={1}\n                m={1}\n                bgcolor=\"background.paper\"\n            >\n                <Box p={1}>\n                    <TextField\n                        style={{ width: 700 }}\n                        id=\"outlined-multiline-static\"\n                        label=\"Question\"\n                        multiline\n                        rows={2}\n                        variant=\"outlined\"\n                        value={questionValue}\n                        onChange={onChangeQuestion}\n                    />\n                    <TextField\n                        style={{ width: 700, marginTop: 20 }}\n                        id=\"outlined-multiline-static\"\n                        label=\"StakeHolder Response\"\n                        multiline\n                        rows={2}\n                        variant=\"outlined\"\n                        value={responseValue}\n                        onChange={onChangeResponse}\n                    />\n                    <TextField\n                        style={{ width: 700, marginTop: 20 }}\n                        id=\"outlined-multiline-static\"\n                        label=\"Q &amp; A Summary\"\n                        multiline\n                        rows={2}\n                        variant=\"outlined\"\n                        value={summaryValue}\n                        onChange={onChangeSummary}\n                    />\n                    <TableContainer\n                        component={Paper}\n                        style={{ width: 700, marginTop: 20 }}\n                    >\n                        <Table\n                            className={classes.table}\n                            size=\"small\"\n                            aria-label=\"a dense table\"\n                        >\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"right\">Issue 1</TableCell>\n                                    <TableCell align=\"right\">Issue 2</TableCell>\n                                    <TableCell align=\"right\">Issue 3</TableCell>\n                                    <TableCell align=\"right\">Issue 4</TableCell>\n                                    <TableCell align=\"right\">Issue 5</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {rows.map((row) => (\n                                    <TableRow key={row.name}>\n                                        <TableCell align=\"right\">\n                                            {row.issue1}\n                                        </TableCell>\n                                        <TableCell align=\"right\">\n                                            {row.issue2}\n                                        </TableCell>\n                                        <TableCell align=\"right\">\n                                            {row.issue3}\n                                        </TableCell>\n                                        <TableCell align=\"right\">\n                                            {row.issue4}\n                                        </TableCell>\n                                        <TableCell align=\"right\">\n                                            {row.issue5}\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Box>\n                <Box p={1}>\n                    <Button\n                        className={classes.margin}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={handleClickOpen}\n                    >\n                        Delete\n                    </Button>\n\n                    <GenericDeleteWarning\n                        remove={() => removeQuestion(id)}\n                        open={open}\n                        setOpen={setOpen}\n                    />\n                </Box>\n            </Box>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport QuestionField from './question';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport './questions.css';\nimport PropTypes from 'prop-types';\nimport SuccessBanner from './../../../../Banners/SuccessBanner';\nimport ErrorBanner from './../../../../Banners/ErrorBanner';\nimport LoadingSpinner from './../../../../LoadingSpinner';\nimport { baseURL } from './../../../../../Constants/Config';\n\nQuestionFields.propTypes = {\n    qrs: PropTypes.any,\n    stakeholder_id: PropTypes.number,\n};\n\nexport default function QuestionFields({ qrs, stakeholder_id }) {\n    //used to track if we are waiting on a HTTP GET/POST/PUT request\n    //not needed for DELETE\n    const [isLoading, setLoading] = useState(false);\n    var axios = require('axios');\n\n    //for success and error banners\n    const [successBannerMessage, setSuccessBannerMessage] = useState('');\n    const [successBannerFade, setSuccessBannerFade] = useState(false);\n    const [isMultiEnabled, setIsMultiEnabled] = useState(false);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setSuccessBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [successBannerFade]);\n\n    const [errorBannerMessage, setErrorBannerMessage] = useState('');\n    const [errorBannerFade, setErrorBannerFade] = useState(false);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setErrorBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [errorBannerFade]);\n\n    const [QRs, setQRs] = useState(qrs);\n\n    const handleSave = (e) => {\n        var axios = require('axios');\n        var data = QRs;\n\n        var config = {\n            method: 'put',\n            url: baseURL + '/multi_conv?STAKEHOLDER=' + stakeholder_id,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            data: data,\n        };\n\n        axios(config)\n            .then(function (response) {\n                setSuccessBannerMessage(\n                    'Successfully saved the conversations for this stakeholder!'\n                );\n                setSuccessBannerFade(true);\n            })\n            .catch(function (error) {\n                setErrorBannerMessage(\n                    'Failed to save the conversations for this stakeholder! Please try again.'\n                );\n                setErrorBannerFade(true);\n            });\n    };\n\n    const addQuestion = (e) => {\n        if (!checkTime(setCurrentTime, currentTime)) {\n            return;\n        }\n        setLoading(true);\n\n        var data = JSON.stringify({ STAKEHOLDER: stakeholder_id });\n\n        var config = {\n            method: 'post',\n            url: baseURL + '/api/conversations/',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            data: data,\n        };\n\n        axios(config)\n            .then(function (response) {\n                const newQRs = [...QRs, response.data];\n                setQRs(newQRs);\n                setSuccessBannerMessage('Successfully created a conversation!');\n                setSuccessBannerFade(true);\n            })\n            .catch(function (error) {\n                setErrorBannerMessage(\n                    'Failed to create a conversation! Please try again.'\n                );\n                setErrorBannerFade(true);\n            });\n\n        setLoading(false);\n    };\n\n    const removeQuestion = (questionID) => {\n        if (!checkTime(setCurrentTime, currentTime)) {\n            return;\n        }\n        setLoading(true);\n\n        const leftQuestions = QRs.filter((q) => q.CONVERSATION !== questionID);\n        setQRs(leftQuestions);\n\n        var data = JSON.stringify({});\n\n        var config = {\n            method: 'delete',\n            url: baseURL + '/api/conversations/' + questionID + '/',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            data: data,\n        };\n\n        axios(config)\n            .then(function (response) {\n                setSuccessBannerMessage(\n                    'Successfully deleted the conversation!'\n                );\n                setSuccessBannerFade(true);\n            })\n            .catch(function (error) {\n                setErrorBannerMessage(\n                    'Failed to delete the conversation! Please try again.'\n                );\n                setErrorBannerFade(true);\n            });\n\n        setLoading(false);\n    };\n\n    const handleOnChangeMultiConvo = (e) => {\n        if (!checkTime(setCurrentTime, currentTime)) {\n            return;\n        }\n        setLoading(true);\n\n        var data = e.target.checked;\n\n        /*var config = {\n            method: 'put',\n            url: baseURL + '/multi_conv?STAKEHOLDER=' + stakeholder_id,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            data: data,\n        };*/\n\n        setIsMultiEnabled(e.target.checked);\n        setLoading(false);\n    };\n\n    /*\n     * This section is about managing time to prevent sending a combination of multiple\n     *    HTTP GET/POST/PUT/DELETE calls before a response is returned\n     */\n    const [currentTime, setCurrentTime] = useState(getCurrentTimeInt());\n    //gets the current time in hms and converts it to an int\n    function getCurrentTimeInt() {\n        let d = Date();\n        var h = d.substring(16, 18);\n        var m = d.substring(19, 21);\n        var s = d.substring(22, 24);\n        return 60 * (60 * h + m) + s;\n    }\n\n    //checks if at least 1 second has elapsed since last action\n    //if someone waits a multiple of exactly 24 hours since their last action they will\n    //    not be able to take an action for an additional second\n    function checkTime(setTime, t) {\n        var ret = false;\n        //current time difference is at least 1 second, but that SHOULD be ample time for\n        //the database to get back to the frontend\n        if (getCurrentTimeInt() - t !== 0) {\n            ret = true;\n        }\n        setTime(getCurrentTimeInt());\n        return ret;\n    }\n\n    if (isLoading) {\n        return <LoadingSpinner />;\n    }\n\n    return (\n        <div className=\"questions\">\n            <Button\n                id=\"button\"\n                onClick={addQuestion}\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                Add Question\n            </Button>\n            <Button\n                id=\"button\"\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleSave}\n            >\n                Save Changes\n            </Button>\n            <FormControlLabel\n                style={{ marginLeft: -300, marginTop: 20 }}\n                control={\n                    <Checkbox\n                        checked={isMultiEnabled}\n                        onChange={handleOnChangeMultiConvo}\n                        color=\"primary\"\n                    />\n                }\n                label=\"Enable multi-part conversations for this stakeholder\"\n                labelPlacement=\"end\"\n            />\n            <form id=\"form\" style={{ marginTop: -30 }}>\n                {QRs.map((data) => (\n                    <QuestionField\n                        key={data.STAKEHOLDER}\n                        id={data.CONVERSATION}\n                        removeQuestion={removeQuestion}\n                        question={data.QUESTION}\n                        response={data.RESPONSE}\n                        summary={data.SUMMARY}\n                        QRs={QRs}\n                        setQRs={setQRs}\n                    />\n                ))}\n            </form>\n            <SuccessBanner\n                successMessage={successBannerMessage}\n                fade={successBannerFade}\n            />\n            <ErrorBanner\n                errorMessage={errorBannerMessage}\n                fade={errorBannerFade}\n            />\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Button } from '@material-ui/core';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport BasicTable from './table';\r\nimport './stakeHolder.css';\r\nimport QuestionFields from './StakeHolderQuestions/questions';\r\nimport SunEditor from 'suneditor-react';\r\nimport 'suneditor/dist/css/suneditor.min.css';\r\nimport shemptylogo from './shemptylogo.png';\r\nimport PropTypes from 'prop-types';\r\nimport SuccessBanner from './../../../Banners/SuccessBanner';\r\nimport ErrorBanner from './../../../Banners/ErrorBanner';\r\nimport LoadingSpinner from './../../../LoadingSpinner';\r\nimport GenericDeleteWarning from '../../../DeleteWarnings/GenericDeleteWarning';\r\nimport { baseURL } from './../../../../Constants/Config';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    input: {\r\n        display: 'none',\r\n    },\r\n}));\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 1,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    className={classes.closeButton}\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent);\r\n\r\nStakeHolder.propTypes = {\r\n    name: PropTypes.string,\r\n    bio: PropTypes.string,\r\n    mainConvo: PropTypes.string,\r\n    id: PropTypes.number,\r\n    removeStakeHolder: PropTypes.any,\r\n    job: PropTypes.string,\r\n    stakeHolders: PropTypes.any,\r\n    setStakeHolders: PropTypes.func,\r\n};\r\n\r\nexport default function StakeHolder({\r\n    name,\r\n    bio,\r\n    mainConvo,\r\n    id,\r\n    removeStakeHolder,\r\n    job,\r\n    stakeHolders,\r\n    setStakeHolders,\r\n}) {\r\n    const classes = useStyles();\r\n\r\n    const [openBio, setOpenBio] = useState(false);\r\n    const [openMainConvo, setOpenMainConvo] = useState(false);\r\n    const [openPointSelection, setOpenPointSelection] = useState(false);\r\n    const [openQuestions, setOpenQuestions] = useState(false);\r\n    const [stakeHolderName, setStakeHolderName] = useState(name);\r\n    const [stakeHolderJob, setStakeHolderJob] = useState(job);\r\n    const [stakeHolderBiography, setStakeHolderBiography] = useState(bio);\r\n    const [stakeHolderConversation, setStakeHolderConversation] = useState(\r\n        mainConvo\r\n    );\r\n    const [issues, setIssues] = useState([]);\r\n    const [qRData, setQRData] = useState([]);\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    var axios = require('axios');\r\n\r\n    //Warning for Deleteing a Conversation\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    //for success and error banners\r\n    // eslint-disable-next-line\r\n    const [successBannerMessage, setSuccessBannerMessage] = useState('');\r\n    const [successBannerFade, setSuccessBannerFade] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            setSuccessBannerFade(false);\r\n        }, 1000);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [successBannerFade]);\r\n\r\n    const [errorBannerMessage, setErrorBannerMessage] = useState('');\r\n    const [errorBannerFade, setErrorBannerFade] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            setErrorBannerFade(false);\r\n        }, 1000);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [errorBannerFade]);\r\n\r\n    //TABLE\r\n    const handleClickOpenBio = () => {\r\n        setOpenBio(true);\r\n    };\r\n    const handleCloseBio = () => {\r\n        updateBasicText(\r\n            stakeHolderName,\r\n            stakeHolderJob,\r\n            stakeHolderBiography,\r\n            stakeHolderConversation\r\n        );\r\n        setOpenBio(false);\r\n    };\r\n    const handleClickOpenMainConvo = () => {\r\n        setOpenMainConvo(true);\r\n    };\r\n    const handleCloseMainConvo = () => {\r\n        updateBasicText(\r\n            stakeHolderName,\r\n            stakeHolderJob,\r\n            stakeHolderBiography,\r\n            stakeHolderConversation\r\n        );\r\n        setOpenMainConvo(false);\r\n    };\r\n\r\n    const handleClickOpenPointSelection = () => {\r\n        getIssues();\r\n    };\r\n    const handleClosePointSelection = () => {\r\n        setOpenPointSelection(false);\r\n    };\r\n\r\n    const handleClickOpenQuestions = () => {\r\n        getQRs();\r\n    };\r\n    const handleCloseQuestions = () => {\r\n        setOpenQuestions(false);\r\n    };\r\n\r\n    let handleChangeBiography = (content, editor) => {\r\n        setStakeHolderBiography(content);\r\n    };\r\n\r\n    let handleChangeConversation = (content, editor) => {\r\n        setStakeHolderConversation(content);\r\n    };\r\n\r\n    const onChangeName = (e) => {\r\n        setStakeHolderName(e.target.value);\r\n        updateBasicText(\r\n            e.target.value,\r\n            stakeHolderJob,\r\n            stakeHolderBiography,\r\n            stakeHolderConversation\r\n        );\r\n    };\r\n\r\n    const onChangeJob = (e) => {\r\n        setStakeHolderJob(e.target.value);\r\n        updateBasicText(\r\n            stakeHolderName,\r\n            e.target.value,\r\n            stakeHolderBiography,\r\n            stakeHolderConversation\r\n        );\r\n    };\r\n\r\n    function updateBasicText(shname, shjob, shbio, shconvo) {\r\n        const updatedStakeHolders = [...stakeHolders];\r\n        setStakeHolders(\r\n            updatedStakeHolders.map((sh) => {\r\n                if (sh.STAKEHOLDER === id) {\r\n                    sh.NAME = shname;\r\n                    sh.JOB = shjob;\r\n                    sh.DESCRIPTION = shbio;\r\n                    sh.INTRODUCTION = shconvo;\r\n                }\r\n                return sh;\r\n            })\r\n        );\r\n    }\r\n\r\n    function getQRs() {\r\n        var data = {};\r\n        var config = {\r\n            method: 'get',\r\n            url: baseURL + '/api/conversations/?STAKEHOLDER=' + id,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            data: data,\r\n        };\r\n\r\n        axios(config)\r\n            .then(function (response) {\r\n                setQRData(response.data);\r\n                setOpenQuestions(true);\r\n            })\r\n            .catch(function (error) {\r\n                setErrorBannerMessage(\r\n                    'Failed to get the conversation(s) for this stakeholder! Please try again.'\r\n                );\r\n                setErrorBannerFade(true);\r\n            });\r\n    }\r\n\r\n    function getIssues() {\r\n        setLoading(true);\r\n        var data = JSON.stringify({});\r\n\r\n        var config = {\r\n            method: 'get',\r\n            url: baseURL + '/coverages?stakeholder_id=' + id,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            data: data,\r\n        };\r\n\r\n        axios(config)\r\n            .then(function (response) {\r\n                setIssues(response.data.ISSUES);\r\n                setLoading(false);\r\n                setOpenPointSelection(true);\r\n            })\r\n            .catch(function (error) {\r\n                setErrorBannerMessage(\r\n                    'Failed to get the issue(s) for this stakeholder! Please try again.'\r\n                );\r\n                setErrorBannerFade(true);\r\n            });\r\n    }\r\n\r\n    if (isLoading) {\r\n        return <LoadingSpinner />;\r\n    }\r\n\r\n    return (\r\n        <div id=\"parent\">\r\n            <div id=\"SHname\">\r\n                <TextField\r\n                    label=\"StakeHolder Name\"\r\n                    value={stakeHolderName}\r\n                    onChange={onChangeName}\r\n                />\r\n            </div>\r\n            <div id=\"SHjob\">\r\n                <TextField\r\n                    label=\"StakeHolder Job\"\r\n                    value={stakeHolderJob}\r\n                    onChange={onChangeJob}\r\n                />\r\n            </div>\r\n            <img id=\"stakeimg\" src={shemptylogo} alt=\" \"></img>\r\n            <label id=\"upl\" htmlFor=\"contained-button-file\">\r\n                <input\r\n                    accept=\"image/*\"\r\n                    className={classes.input}\r\n                    id=\"contained-button-file\"\r\n                    multiple\r\n                    type=\"file\"\r\n                />\r\n                <label htmlFor=\"contained-button-file\">\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        component=\"span\"\r\n                        style={{ textTransform: 'unset' }}\r\n                    >\r\n                        Upload\r\n                    </Button>\r\n                </label>\r\n                <input\r\n                    accept=\"image/*\"\r\n                    className={classes.input}\r\n                    id=\"icon-button-file\"\r\n                    type=\"file\"\r\n                />\r\n            </label>\r\n\r\n            <div id=\"Bio\">\r\n                <TextField\r\n                    label=\"Biography\"\r\n                    style={{ width: 500 }}\r\n                    multiline\r\n                    rows={2}\r\n                    variant=\"outlined\"\r\n                    onClick={handleClickOpenBio}\r\n                />\r\n            </div>\r\n\r\n            <div id=\"MainConversationField\">\r\n                <TextField\r\n                    label=\"Main Conversation\"\r\n                    style={{ width: 500 }}\r\n                    multiline\r\n                    rows={2}\r\n                    variant=\"outlined\"\r\n                    onClick={handleClickOpenMainConvo}\r\n                />\r\n            </div>\r\n            <div id=\"DeleteButton\">\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleClickOpen}\r\n                >\r\n                    Delete\r\n                </Button>\r\n\r\n                <GenericDeleteWarning\r\n                    remove={() => removeStakeHolder(id)}\r\n                    setOpen={setOpen}\r\n                    open={open}\r\n                />\r\n            </div>\r\n            <div id=\"PointButton\">\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleClickOpenPointSelection}\r\n                >\r\n                    Point Selection\r\n                </Button>\r\n            </div>\r\n\r\n            <div id=\"stakequestion\">\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleClickOpenQuestions}\r\n                >\r\n                    View Questions\r\n                </Button>\r\n            </div>\r\n\r\n            <Dialog\r\n                onClose={handleCloseBio}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={openBio}\r\n                maxWidth={false}\r\n            >\r\n                <div style={{ width: 900 }}>\r\n                    <DialogTitle\r\n                        id=\"customized-dialog-title\"\r\n                        onClose={handleCloseBio}\r\n                    >\r\n                        Biography\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <SunEditor\r\n                            setContents={bio}\r\n                            setOptions={{\r\n                                width: '100%',\r\n                                height: 400,\r\n                                placeholder:\r\n                                    'Enter in introduction of component...',\r\n                                buttonList: [\r\n                                    ['font', 'fontSize', 'formatBlock'],\r\n                                    ['paragraphStyle', 'blockquote'],\r\n                                    [\r\n                                        'bold',\r\n                                        'underline',\r\n                                        'italic',\r\n                                        'strike',\r\n                                        'subscript',\r\n                                        'superscript',\r\n                                    ],\r\n                                    ['fontColor', 'hiliteColor', 'textStyle'],\r\n                                    '/',\r\n                                    ['undo', 'redo'],\r\n                                    ['removeFormat'],\r\n                                    ['outdent', 'indent'],\r\n                                    [\r\n                                        'align',\r\n                                        'horizontalRule',\r\n                                        'list',\r\n                                        'lineHeight',\r\n                                    ],\r\n                                    [\r\n                                        'table',\r\n                                        'link',\r\n                                        'image',\r\n                                        'video',\r\n                                        'audio',\r\n                                    ],\r\n                                    ['fullScreen', 'showBlocks', 'codeView'],\r\n                                    ['preview'],\r\n                                    [\r\n                                        '%1000',\r\n                                        [\r\n                                            ['undo', 'redo'],\r\n                                            [\r\n                                                ':p-More Paragraph-default.more_paragraph',\r\n                                                'font',\r\n                                                'fontSize',\r\n                                                'formatBlock',\r\n                                                'paragraphStyle',\r\n                                                'blockquote',\r\n                                            ],\r\n                                            [\r\n                                                'bold',\r\n                                                'underline',\r\n                                                'italic',\r\n                                                'strike',\r\n                                            ],\r\n                                            [\r\n                                                ':t-More Text-default.more_text',\r\n                                                'subscript',\r\n                                                'superscript',\r\n                                                'fontColor',\r\n                                                'hiliteColor',\r\n                                                'textStyle',\r\n                                            ],\r\n                                            ['removeFormat'],\r\n                                            ['outdent', 'indent'],\r\n                                            [\r\n                                                ':e-More Line-default.more_horizontal',\r\n                                                'align',\r\n                                                'horizontalRule',\r\n                                                'list',\r\n                                                'lineHeight',\r\n                                            ],\r\n                                            [\r\n                                                '-right',\r\n                                                ':i-More Misc-default.more_vertical',\r\n                                                'fullScreen',\r\n                                                'showBlocks',\r\n                                                'codeView',\r\n                                                'preview',\r\n                                            ],\r\n                                            [\r\n                                                '-right',\r\n                                                ':r-More Rich-default.more_plus',\r\n                                                'table',\r\n                                                'link',\r\n                                                'image',\r\n                                                'video',\r\n                                                'audio',\r\n                                            ],\r\n                                        ],\r\n                                    ],\r\n                                    [\r\n                                        '%875',\r\n                                        [\r\n                                            ['undo', 'redo'],\r\n                                            [\r\n                                                ':p-More Paragraph-default.more_paragraph',\r\n                                                'font',\r\n                                                'fontSize',\r\n                                                'formatBlock',\r\n                                                'paragraphStyle',\r\n                                                'blockquote',\r\n                                            ],\r\n                                            [\r\n                                                ':t-More Text-default.more_text',\r\n                                                'bold',\r\n                                                'underline',\r\n                                                'italic',\r\n                                                'strike',\r\n                                                'subscript',\r\n                                                'superscript',\r\n                                                'fontColor',\r\n                                                'hiliteColor',\r\n                                                'textStyle',\r\n                                                'removeFormat',\r\n                                            ],\r\n                                            [\r\n                                                ':e-More Line-default.more_horizontal',\r\n                                                'outdent',\r\n                                                'indent',\r\n                                                'align',\r\n                                                'horizontalRule',\r\n                                                'list',\r\n                                                'lineHeight',\r\n                                            ],\r\n                                            [\r\n                                                ':r-More Rich-default.more_plus',\r\n                                                'table',\r\n                                                'link',\r\n                                                'image',\r\n                                                'video',\r\n                                                'audio',\r\n                                            ],\r\n                                            [\r\n                                                '-right',\r\n                                                ':i-More Misc-default.more_vertical',\r\n                                                'fullScreen',\r\n                                                'showBlocks',\r\n                                                'codeView',\r\n                                                'preview',\r\n                                            ],\r\n                                        ],\r\n                                    ],\r\n                                ],\r\n                            }}\r\n                            onChange={handleChangeBiography}\r\n                        />\r\n                    </DialogContent>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                onClose={handleCloseMainConvo}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                maxWidth={false}\r\n                open={openMainConvo}\r\n            >\r\n                <div style={{ width: 900 }}>\r\n                    <DialogTitle\r\n                        id=\"customized-dialog-title\"\r\n                        onClose={handleCloseMainConvo}\r\n                    >\r\n                        Main Coversation\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <SunEditor\r\n                            setContents={mainConvo}\r\n                            setOptions={{\r\n                                height: 400,\r\n                                placeholder:\r\n                                    'Enter in introduction of component...',\r\n                                buttonList: [\r\n                                    ['font', 'fontSize', 'formatBlock'],\r\n                                    ['paragraphStyle', 'blockquote'],\r\n                                    [\r\n                                        'bold',\r\n                                        'underline',\r\n                                        'italic',\r\n                                        'strike',\r\n                                        'subscript',\r\n                                        'superscript',\r\n                                    ],\r\n                                    ['fontColor', 'hiliteColor', 'textStyle'],\r\n                                    '/',\r\n                                    ['undo', 'redo'],\r\n                                    ['removeFormat'],\r\n                                    ['outdent', 'indent'],\r\n                                    [\r\n                                        'align',\r\n                                        'horizontalRule',\r\n                                        'list',\r\n                                        'lineHeight',\r\n                                    ],\r\n                                    [\r\n                                        'table',\r\n                                        'link',\r\n                                        'image',\r\n                                        'video',\r\n                                        'audio',\r\n                                    ],\r\n                                    ['fullScreen', 'showBlocks', 'codeView'],\r\n                                    ['preview'],\r\n                                    [\r\n                                        '%1000',\r\n                                        [\r\n                                            ['undo', 'redo'],\r\n                                            [\r\n                                                ':p-More Paragraph-default.more_paragraph',\r\n                                                'font',\r\n                                                'fontSize',\r\n                                                'formatBlock',\r\n                                                'paragraphStyle',\r\n                                                'blockquote',\r\n                                            ],\r\n                                            [\r\n                                                'bold',\r\n                                                'underline',\r\n                                                'italic',\r\n                                                'strike',\r\n                                            ],\r\n                                            [\r\n                                                ':t-More Text-default.more_text',\r\n                                                'subscript',\r\n                                                'superscript',\r\n                                                'fontColor',\r\n                                                'hiliteColor',\r\n                                                'textStyle',\r\n                                            ],\r\n                                            ['removeFormat'],\r\n                                            ['outdent', 'indent'],\r\n                                            [\r\n                                                ':e-More Line-default.more_horizontal',\r\n                                                'align',\r\n                                                'horizontalRule',\r\n                                                'list',\r\n                                                'lineHeight',\r\n                                            ],\r\n                                            [\r\n                                                '-right',\r\n                                                ':i-More Misc-default.more_vertical',\r\n                                                'fullScreen',\r\n                                                'showBlocks',\r\n                                                'codeView',\r\n                                                'preview',\r\n                                            ],\r\n                                            [\r\n                                                '-right',\r\n                                                ':r-More Rich-default.more_plus',\r\n                                                'table',\r\n                                                'link',\r\n                                                'image',\r\n                                                'video',\r\n                                                'audio',\r\n                                            ],\r\n                                        ],\r\n                                    ],\r\n                                    [\r\n                                        '%875',\r\n                                        [\r\n                                            ['undo', 'redo'],\r\n                                            [\r\n                                                ':p-More Paragraph-default.more_paragraph',\r\n                                                'font',\r\n                                                'fontSize',\r\n                                                'formatBlock',\r\n                                                'paragraphStyle',\r\n                                                'blockquote',\r\n                                            ],\r\n                                            [\r\n                                                ':t-More Text-default.more_text',\r\n                                                'bold',\r\n                                                'underline',\r\n                                                'italic',\r\n                                                'strike',\r\n                                                'subscript',\r\n                                                'superscript',\r\n                                                'fontColor',\r\n                                                'hiliteColor',\r\n                                                'textStyle',\r\n                                                'removeFormat',\r\n                                            ],\r\n                                            [\r\n                                                ':e-More Line-default.more_horizontal',\r\n                                                'outdent',\r\n                                                'indent',\r\n                                                'align',\r\n                                                'horizontalRule',\r\n                                                'list',\r\n                                                'lineHeight',\r\n                                            ],\r\n                                            [\r\n                                                ':r-More Rich-default.more_plus',\r\n                                                'table',\r\n                                                'link',\r\n                                                'image',\r\n                                                'video',\r\n                                                'audio',\r\n                                            ],\r\n                                            [\r\n                                                '-right',\r\n                                                ':i-More Misc-default.more_vertical',\r\n                                                'fullScreen',\r\n                                                'showBlocks',\r\n                                                'codeView',\r\n                                                'preview',\r\n                                            ],\r\n                                        ],\r\n                                    ],\r\n                                ],\r\n                            }}\r\n                            onChange={handleChangeConversation}\r\n                        />\r\n                    </DialogContent>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                onClose={handleCloseQuestions}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                maxWidth={false}\r\n                open={openQuestions}\r\n            >\r\n                <div style={{ width: 900 }}>\r\n                    <DialogTitle\r\n                        id=\"customized-dialog-title\"\r\n                        onClose={handleCloseQuestions}\r\n                    >\r\n                        <h2 className=\"questions-header\">Questions</h2>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <QuestionFields qrs={qRData} stakeholder_id={id} />\r\n                    </DialogContent>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                onClose={handleClosePointSelection}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={openPointSelection}\r\n            >\r\n                <div className=\"point-selection-body\" style={{ width: 500 }}>\r\n                    <DialogTitle\r\n                        id=\"customized-dialog-title\"\r\n                        onClose={handleClosePointSelection}\r\n                    >\r\n                        <div className=\"point-selection-header\">\r\n                            Point Selection\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <BasicTable\r\n                            stakeholder_id={id}\r\n                            passed_issues={issues}\r\n                        />\r\n                    </DialogContent>\r\n                </div>\r\n            </Dialog>\r\n            <SuccessBanner\r\n                successMessage={successBannerMessage}\r\n                fade={successBannerFade}\r\n            />\r\n            <ErrorBanner\r\n                errorMessage={errorBannerMessage}\r\n                fade={errorBannerFade}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport StakeHolder from './stakeHolder';\r\nimport Button from '@material-ui/core/Button';\r\nimport './stakeHolders.css';\r\nimport PropTypes from 'prop-types';\r\nimport SuccessBanner from './../../../Banners/SuccessBanner';\r\nimport ErrorBanner from './../../../Banners/ErrorBanner';\r\nimport LoadingSpinner from './../../../LoadingSpinner';\r\nimport { baseURL } from './../../../../Constants/Config';\r\n\r\nStakeHolderFields.propTypes = {\r\n    stakeHolders: PropTypes.any,\r\n    setStakeHolders: PropTypes.any,\r\n    scenario: PropTypes.number,\r\n};\r\n\r\nexport default function StakeHolderFields({ scenario }) {\r\n    const [didGetSHs, setDidGetSHs] = useState(false);\r\n\r\n    /*\r\n     * This section is code that is essentially the middleware between the frontend and backend\r\n     * Handles API calls between frontend and backend\r\n     */\r\n\r\n    //tracks current state of stakeholders to be represented on the frontend\r\n    const [stakeHolders, setStakeHolders] = useState([]);\r\n    //used to track if we are waiting on a HTTP GET/POST/PUT request\r\n    //not needed for DELETE\r\n    const [isLoading, setLoading] = useState(false);\r\n    var axios = require('axios');\r\n\r\n    //for success and error banners\r\n    const [successBannerMessage, setSuccessBannerMessage] = useState('');\r\n    const [successBannerFade, setSuccessBannerFade] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            setSuccessBannerFade(false);\r\n        }, 1000);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [successBannerFade]);\r\n\r\n    const [errorBannerMessage, setErrorBannerMessage] = useState('');\r\n    const [errorBannerFade, setErrorBannerFade] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            setErrorBannerFade(false);\r\n        }, 1000);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [errorBannerFade]);\r\n\r\n    //handles GETting existing stakeholders from the backend and representing\r\n    //    that information in the frontend\r\n    // will eventually know which scenario to get stakeholders from once scenario_id is passed\r\n    // from baseURL + 'stakeholder?scenario_id=' + scenario_id\r\n    function getExistingStakeHolders() {\r\n        setLoading(true);\r\n\r\n        var data = { SCENARIO: { scenario } };\r\n        var config = {\r\n            method: 'get',\r\n            url: baseURL + '/api/stakeholders/?SCENARIO=' + scenario,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            data: data,\r\n        };\r\n\r\n        axios(config)\r\n            .then(function (response) {\r\n                setStakeHolders(response.data);\r\n            })\r\n            .catch(function (error) {\r\n                setErrorBannerMessage(\r\n                    'Failed to get Stakeholders! Please try again.'\r\n                );\r\n                setErrorBannerFade(true);\r\n            });\r\n\r\n        setLoading(false);\r\n    }\r\n\r\n    //handles DELETEing a stakeholder from the backend and removing the corresponding\r\n    //    stakeholder from the frontend\r\n    const removeStakeHolder = (stakeHolderID) => {\r\n        if (!checkTime(setCurrentTime, currentTime)) {\r\n            return;\r\n        }\r\n        setLoading(true);\r\n\r\n        //handling it on the frontend\r\n        const leftStakeHolders = stakeHolders.filter(\r\n            (s) => s.STAKEHOLDER !== stakeHolderID\r\n        );\r\n        setStakeHolders(leftStakeHolders);\r\n\r\n        //calling the DELETE request on the backend\r\n        var data = JSON.stringify({});\r\n\r\n        var config = {\r\n            method: 'delete',\r\n            url: baseURL + '/api/stakeholders/' + stakeHolderID + '/',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            data: data,\r\n        };\r\n\r\n        axios(config)\r\n            .then(function (response) {\r\n                setSuccessBannerMessage(\r\n                    'Successfully deleted the stakeholder!'\r\n                );\r\n                setSuccessBannerFade(true);\r\n            })\r\n            .catch(function (error) {\r\n                setErrorBannerMessage(\r\n                    'Failed to delete the stakeholder! Please try again.'\r\n                );\r\n                setErrorBannerFade(true);\r\n            });\r\n\r\n        setLoading(false);\r\n    };\r\n\r\n    //handles POSTing a new stakeholder to the backend and adding that stakeholder to the frontend\r\n    const addStakeHolder = (e) => {\r\n        if (!checkTime(setCurrentTime, currentTime)) {\r\n            return;\r\n        }\r\n        setLoading(true);\r\n\r\n        var data = JSON.stringify({\r\n            SCENARIO: scenario,\r\n        });\r\n\r\n        var config = {\r\n            method: 'post',\r\n            url: baseURL + '/stakeholder',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            data: data,\r\n        };\r\n\r\n        axios(config)\r\n            .then(function (response) {\r\n                setStakeHolders([...stakeHolders, response.data]);\r\n                setSuccessBannerMessage(\r\n                    'Successfully created a new stakeholder!'\r\n                );\r\n                setSuccessBannerFade(true);\r\n            })\r\n            .catch(function (error) {\r\n                setErrorBannerMessage(\r\n                    'Failed to create a stakeholder! Please try again.'\r\n                );\r\n                setErrorBannerFade(true);\r\n            });\r\n\r\n        setLoading(false);\r\n    };\r\n\r\n    const saveStakeHolders = (e) => {\r\n        var data = [...stakeHolders];\r\n\r\n        var config = {\r\n            method: 'put',\r\n            url: baseURL + '/multi_stake?SCENARIO=' + scenario,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            data: data,\r\n        };\r\n\r\n        axios(config)\r\n            .then(function (response) {\r\n                setSuccessBannerMessage('Successfully saved the stakeholders!');\r\n                setSuccessBannerFade(true);\r\n            })\r\n            .catch(function (error) {\r\n                setErrorBannerMessage(\r\n                    'Failed to save the stakeholders! Please try again.'\r\n                );\r\n                setErrorBannerFade(true);\r\n            });\r\n    };\r\n\r\n    /*\r\n     * This section is about managing time to prevent sending a combination of multiple\r\n     *    HTTP GET/POST/PUT/DELETE calls before a response is returned\r\n     */\r\n    const [currentTime, setCurrentTime] = useState(getCurrentTimeInt());\r\n    //gets the current time in hms and converts it to an int\r\n    function getCurrentTimeInt() {\r\n        let d = Date();\r\n        var h = d.substring(16, 18);\r\n        var m = d.substring(19, 21);\r\n        var s = d.substring(22, 24);\r\n        return 60 * (60 * h + m) + s;\r\n    }\r\n\r\n    //checks if at least 1 second has elapsed since last action\r\n    //if someone waits a multiple of exactly 24 hours since their last action they will\r\n    //    not be able to take an action for an additional second\r\n    function checkTime(setTime, t) {\r\n        var ret = false;\r\n        //current time difference is at least 1 second, but that SHOULD be ample time for\r\n        //the database to get back to the frontend\r\n        if (getCurrentTimeInt() - t !== 0) {\r\n            ret = true;\r\n        }\r\n        setTime(getCurrentTimeInt());\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * This code is the frontend rendering; what the users see\r\n     */\r\n\r\n    if (isLoading) {\r\n        return <LoadingSpinner />;\r\n    }\r\n\r\n    if (!didGetSHs) {\r\n        setDidGetSHs(true);\r\n        getExistingStakeHolders();\r\n    }\r\n\r\n    return (\r\n        <div className=\"stakeHolders\">\r\n            <Button\r\n                id=\"button\"\r\n                onClick={addStakeHolder}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n            >\r\n                Add Stake Holder\r\n            </Button>\r\n\r\n            <form id=\"form\">\r\n                {stakeHolders.map((stakeHolder) => (\r\n                    <StakeHolder\r\n                        key={stakeHolder.STAKEHOLDER}\r\n                        removeStakeHolder={removeStakeHolder}\r\n                        id={stakeHolder.STAKEHOLDER}\r\n                        name={stakeHolder.NAME}\r\n                        job={stakeHolder.JOB}\r\n                        bio={stakeHolder.DESCRIPTION}\r\n                        mainConvo={stakeHolder.INTRODUCTION}\r\n                        stakeHolders={stakeHolders}\r\n                        setStakeHolders={setStakeHolders}\r\n                    />\r\n                ))}\r\n            </form>\r\n\r\n            <div id=\"SaveButton\">\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={saveStakeHolders}\r\n                >\r\n                    Save Stakeholder Changes\r\n                </Button>\r\n            </div>\r\n            <SuccessBanner\r\n                successMessage={successBannerMessage}\r\n                fade={successBannerFade}\r\n            />\r\n            <ErrorBanner\r\n                errorMessage={errorBannerMessage}\r\n                fade={errorBannerFade}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport {\n    Typography,\n    Button,\n    Grid,\n    TextField,\n    MenuItem,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EntryFields from './IssueEntryFieldList';\nimport get from '../../../universalHTTPRequests/get';\nimport LoadingSpinner from '../../LoadingSpinner';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport PropTypes from 'prop-types';\nimport IssueMatrix from './IssueCoverageMatrix';\nimport MaterialTable from 'material-table';\nimport addStakeHolder from '../ConversationEditorComponents/StakeHoldersComponent/stakeHolders';\n//import saveStakeHolder from '../ConversationEditorComponents/StakeHoldersComponent/stakeHolders';\n//import saveStakeHolders from 'ethisim/src/components/EditorComponents/ConversationEditorComponents/StakeHoldersComponent/stakeHolders.js'\nimport HelpIcon from '@material-ui/icons/Help';\nimport GenericInfoButton from '../../InfoButtons/GenericInfoButton';\n\n//Need scenarioID\nconst endpointGET = '/api/issues/?SCENARIO=';\n\nconst useStyles = makeStyles((theme) => ({\n    issue: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    spacing: {\n        padding: theme.spacing(1),\n    },\n    saveButton: {\n        margin: theme.spacing(2),\n        float: 'right',\n        textTransform: 'unset',\n    },\n    container: {\n        padding: theme.spacing(1),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    iconError: {\n        paddingRight: theme.spacing(2),\n        fontSize: '75px',\n    },\n    iconRefreshLarge: {\n        fontSize: '75px',\n    },\n    iconRefreshSmall: {\n        fontSize: '30px',\n    },\n}));\n\nConfigureIssues.propTypes = {\n    scenario_ID: PropTypes.number,\n};\n\nexport default function ConfigureIssues({ scenario_ID }) {\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n    const classes = useStyles();\n    const [issueEntryFieldList, setIssueEntryFieldList] = useState({\n        data: null,\n        loading: true,\n        error: null,\n    });\n    const [issueCoverageMatrix, setIssueCoverageMatrix] = useState({\n        data: null,\n        loading: true,\n        error: null,\n    });\n\n    //for info button\n    const [openHelp, setOpenHelp] = React.useState(false);\n    const handleClickOpenHelp = () => {\n        setOpenHelp(true);\n    };\n\n    let getData = () => {\n        get(setIssueEntryFieldList, endpointGET + scenario_ID);\n        get(setIssueCoverageMatrix, endpointGET + scenario_ID);\n    };\n\n    useEffect(getData, []);\n\n    if (issueEntryFieldList.loading) {\n        return <LoadingSpinner />;\n    }\n\n    if (issueEntryFieldList.error) {\n        return (\n            <div className={classes.issue}>\n                <div className={classes.container}>\n                    <ErrorIcon className={classes.iconError} />\n                    <Typography align=\"center\" variant=\"h3\">\n                        Error in fetching issues.\n                    </Typography>\n                </div>\n                <Button variant=\"contained\" color=\"primary\" onClick={getData}>\n                    <RefreshIcon className={classes.iconRefreshLarge} />\n                </Button>\n            </div>\n        );\n    }\n\n    /* <EntryFields\n            issueEntryFieldList={\n                issueEntryFieldList !== null ? issueEntryFieldList : []\n            }\n            setIssueEntryFieldList={setIssueEntryFieldList}\n            scenarioID={scenario_ID}\n    />*/\n\n    /*return (\n        <div className={classes.issue}>\n            <Typography align=\"center\" variant=\"h2\">\n                Configure Ethical Issues\n            </Typography>\n            <div className={classes.spacing}>\n                <Button variant=\"contained\" color=\"primary\" onClick={getData}>\n                    <RefreshIcon className={classes.iconRefreshSmall} />\n                </Button>\n            </div>\n            <MaterialTable>\n                issueCoverageMatrix = {issueCoverageMatrix}\n                setIssueCoverageMatrix = {setissueCoverageMatrix}\n            </MaterialTable>\n        </div>\n    );*/\n    //for info button\n\n    return (\n        <div className={classes.issue}>\n            <Typography align=\"center\" variant=\"h2\">\n                Configure Ethical Issues\n            </Typography>\n            <Grid container justify=\"flex-end\">\n                <Button color=\"primary\" onClick={handleClickOpenHelp}>\n                    <HelpIcon />\n                </Button>\n                <GenericInfoButton\n                    description={`This page is currently under maintenance.`}\n                    open={openHelp}\n                    setOpen={setOpenHelp}\n                />\n            </Grid>\n            <div className={classes.spacing}>\n                <Button variant=\"contained\" color=\"primary\" onClick={getData}>\n                    <RefreshIcon className={classes.iconRefreshSmall} />\n                </Button>\n            </div>\n\n            <EntryFields\n                issueEntryFieldList={\n                    issueEntryFieldList !== null ? issueEntryFieldList : []\n                }\n                setIssueEntryFieldList={setIssueEntryFieldList}\n                scenarioID={scenario_ID}\n            />\n\n            <Button\n                className={classes.button}\n                id=\"button\"\n                onClick={handleClickOpen}\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                {' '}\n                Add Stakeholders\n            </Button>\n\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"\"\n                aria-describedby=\"\"\n            >\n                <DialogTitle id=\"Add stakeholder\">\n                    {'Add Stakeholder'}\n                </DialogTitle>\n                <Grid container direction=\"row\" justify=\"centre\">\n                    <Grid item xs={8}>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"StakeHolder name\"\n                            label=\"Stakeholder name\"\n                            id=\"scenariopageAdder\"\n                            // onChange={(e)=>addStakeholder(e)}\n                        ></TextField>\n\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"Job\"\n                            label=\"Job\"\n                            id=\"scenariopageAdder\"\n                            onChange={(e) => null}\n                        ></TextField>\n\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"Description\"\n                            label=\"Description\"\n                            id=\"scenariopageAdder\"\n                        ></TextField>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"Bio\"\n                            label=\"Bio\"\n                            id=\"scenariopageAdder\"\n                        ></TextField>\n                    </Grid>\n                </Grid>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Done\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <IssueMatrix /*this might need to be edited, sends scenario id to IssueCoverageMatrix*/\n                scenario={scenario_ID}\n            />\n        </div>\n    );\n}\n","import React, { useState } from 'react';\r\nimport StakeHolderFields from './StakeHoldersComponent/stakeHolders';\r\nimport PropTypes from 'prop-types';\r\n\r\nConversationEditor.propTypes = {\r\n    scenario_ID: PropTypes.number,\r\n};\r\n\r\nexport default function ConversationEditor({ scenario_ID }) {\r\n    const [stakeHolders, setStakeHolders] = useState([]);\r\n\r\n    return (\r\n        <div>\r\n            <StakeHolderFields\r\n                stakeHolders={stakeHolders}\r\n                setStakeHolders={setStakeHolders}\r\n                scenario={scenario_ID}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Button } from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box';\r\nimport PropTypes from 'prop-types';\r\nimport GenericDeleteWarning from '../../../DeleteWarnings/GenericDeleteWarning';\r\n\r\nQuestionField.propTypes = {\r\n    removeQuestion: PropTypes.any,\r\n    question: PropTypes.any,\r\n    id: PropTypes.number,\r\n    listOfQuestions: PropTypes.any,\r\n    setListOfQuestions: PropTypes.any,\r\n    setReqBodyNew: PropTypes.any,\r\n};\r\n\r\nexport default function QuestionField({\r\n    question,\r\n    removeQuestion,\r\n    id,\r\n    listOfQuestions,\r\n    setListOfQuestions,\r\n    setReqBodyNew,\r\n}) {\r\n    const [questionValue, setQuestionValue] = useState(question);\r\n\r\n    const onChangeQuestion = (event) => {\r\n        setQuestionValue(event.target.value);\r\n        let listOfQuestions2 = [...listOfQuestions];\r\n        for (let i = 0; i < listOfQuestions2.length; i++) {\r\n            if (listOfQuestions2[i].id === id) {\r\n                listOfQuestions2[i].REFLECTION_QUESTION = event.target.value;\r\n            }\r\n        }\r\n        setListOfQuestions(listOfQuestions2);\r\n        let reqBody = listOfQuestions2.map((obj) => obj.REFLECTION_QUESTION);\r\n        setReqBodyNew(reqBody);\r\n    };\r\n\r\n    //Warning to Delete a question componet\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Box display=\"flex\" flexDirection=\"row\" p={1} m={1}>\r\n                <Box p={1} style={{ width: '80%' }}>\r\n                    <TextField\r\n                        style={{ width: '100%' }}\r\n                        label=\"Question\"\r\n                        multiline\r\n                        rows={2}\r\n                        variant=\"outlined\"\r\n                        value={questionValue}\r\n                        onChange={onChangeQuestion}\r\n                    />\r\n                </Box>\r\n                <Box p={1} style={{ width: '20%' }}>\r\n                    <div>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={handleClickOpen}\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                        <GenericDeleteWarning\r\n                            remove={() => removeQuestion(id)}\r\n                            setOpen={setOpen}\r\n                            open={open}\r\n                        />\r\n                    </div>\r\n                </Box>\r\n            </Box>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport QuestionField from './question';\r\nimport Button from '@material-ui/core/Button';\r\nimport './questions.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nQuestionFields.propTypes = {\r\n    questions: PropTypes.any,\r\n    setQuestions: PropTypes.any,\r\n    setReqBodyNew: PropTypes.any,\r\n};\r\n\r\nexport default function QuestionFields({\r\n    questions,\r\n    setQuestions,\r\n    setReqBodyNew,\r\n}) {\r\n    //When we select new issue button, we add new issue object into array.\r\n    //We set a temporary unique ID.\r\n    function setNewIssueID() {\r\n        let newID = Math.floor(Math.random() * 10000000);\r\n        let collision =\r\n            questions.filter((data) => data.id === newID).length !== 0;\r\n        while (collision) {\r\n            newID = Math.floor(Math.random() * 10000000);\r\n            const checkNewID = newID;\r\n            collision =\r\n                questions.data.filter((data) => data.id === checkNewID)\r\n                    .length !== 0;\r\n        }\r\n        return newID;\r\n    }\r\n\r\n    const removeQuestion = (questionID) => {\r\n        const leftQuestions = questions.filter((q) => q.id !== questionID);\r\n        setQuestions(leftQuestions);\r\n        let reqBody = leftQuestions.map((obj) => obj.REFLECTION_QUESTION);\r\n        setReqBodyNew(reqBody);\r\n    };\r\n\r\n    const addQuestion = (e) => {\r\n        e.preventDefault();\r\n        let newQuestions = questions.map((data) => data.REFLECTION_QUESTION);\r\n        newQuestions = [...newQuestions, ''];\r\n        setReqBodyNew(newQuestions);\r\n        let newQuestionsList = questions.concat({\r\n            id: setNewIssueID(),\r\n            REFLECTION_QUESTION: '',\r\n        });\r\n        setQuestions(newQuestionsList);\r\n    };\r\n\r\n    return (\r\n        <div className=\"questions\">\r\n            <Button\r\n                id=\"button\"\r\n                onClick={addQuestion}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n            >\r\n                Add Question\r\n            </Button>\r\n\r\n            <form id=\"form\">\r\n                {questions.map((data) => (\r\n                    <QuestionField\r\n                        key={data.id}\r\n                        id={data.id}\r\n                        removeQuestion={removeQuestion}\r\n                        question={data.REFLECTION_QUESTION}\r\n                        listOfQuestions={questions}\r\n                        setListOfQuestions={setQuestions}\r\n                        setReqBodyNew={setReqBodyNew}\r\n                    />\r\n                ))}\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport Body from '../GeneralPageComponents/Body';\nimport Title from '../GeneralPageComponents/Title';\nimport { Typography, Container, Button, Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport QuestionFields from './QuestionComponent/questions';\nimport PropTypes from 'prop-types';\nimport universalPost from '../../../universalHTTPRequests/post.js';\nimport universalDelete from '../../../universalHTTPRequests/delete.js';\nimport SuccessBanner from '../../Banners/SuccessBanner';\nimport ErrorBanner from '../../Banners/ErrorBanner';\nimport LoadingSpinner from '../../LoadingSpinner';\nimport HelpIcon from '@material-ui/icons/Help';\nimport GenericInfoButton from '../../InfoButtons/GenericInfoButton';\n\nReflection.propTypes = {\n    scenarioComponents: PropTypes.any,\n    setScenarioComponents: PropTypes.any,\n    setCurrentPageID: PropTypes.any,\n    page_id: PropTypes.any,\n    page_type: PropTypes.any,\n    page_title: PropTypes.any,\n    scenario_ID: PropTypes.any,\n    version_ID: PropTypes.any,\n    next_page_id: PropTypes.any,\n    body: PropTypes.any,\n    bodies: PropTypes.any,\n    xCoord: PropTypes.any,\n    yCoord: PropTypes.any,\n    reflection_questions: PropTypes.any,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    saveButton: {\n        margin: theme.spacing(2),\n        float: 'right',\n        textTransform: 'unset',\n    },\n    bannerContainer: {\n        marginTop: theme.spacing(1),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n}));\n\nexport default function Reflection(props) {\n    const {\n        scenarioComponents,\n        setScenarioComponents,\n        setCurrentPageID,\n        page_id,\n        page_type,\n        page_title,\n        scenario_ID,\n        version_ID,\n        next_page_id,\n        body,\n        reflection_questions,\n        xCoord,\n        yCoord,\n    } = props;\n\n    const classes = useStyles();\n\n    const [postValues, setPostValues] = useState({\n        data: null,\n        loading: false,\n        error: null,\n    });\n\n    //for info button\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    // eslint-disable-next-line\n    const [deleteValues, setDeleteValues] = useState({\n        data: null,\n        loading: false,\n        error: null,\n    });\n    const [pageID, setPageID] = useState(page_id);\n    const [title, setTitle] = useState(page_title);\n    const [bodyText, setBodyText] = useState(body);\n    const [questions, setQuestions] = useState(reflection_questions);\n    const [questionsForReqBody, setQuestionsForReqBody] = useState(\n        questions.map(function (a) {\n            return { REFLECTION_QUESTION: a.REFLECTION_QUESTION };\n        })\n    );\n\n    const [errorTitle, setErrorTitle] = useState(false);\n    const [errorTitleText, setErrorTitleText] = useState('');\n    const [errorBody, setErrorBody] = useState(false);\n    const [errorQuestions, setErrorQuestions] = useState(false);\n    const [errorQuestionsMessage, setErrorQuestionsMessage] = useState('');\n\n    let postReqBody = {\n        PAGE: pageID,\n        PAGE_TYPE: page_type,\n        PAGE_TITLE: title,\n        PAGE_BODY: bodyText,\n        SCENARIO: scenario_ID,\n        VERSION: version_ID,\n        NEXT_PAGE: next_page_id,\n        REFLECTION_QUESTIONS: questionsForReqBody,\n        X_COORDINATE: xCoord,\n        Y_COORDINATE: yCoord,\n    };\n\n    function handlePost(setPostValues, postReqBody, s_id, first_time) {\n        const endpoint = '/page?page_id=' + pageID;\n\n        function onSuccess(resp) {\n            const deleteEndPoint = '/page?page_id=' + pageID;\n            postReqBody.PAGE = resp.data.PAGE;\n            let newScenarioComponents = [...scenarioComponents];\n            let component = newScenarioComponents.find((x) => x.id === pageID);\n            component.id = resp.data.PAGE;\n            component.title = title;\n\n            setPageID(resp.data.PAGE);\n            setCurrentPageID(resp.data.PAGE);\n            setScenarioComponents(newScenarioComponents);\n            setSuccessBannerFade(true);\n            setSuccessBannerMessage('Successfully saved page!');\n            universalDelete(setDeleteValues, deleteEndPoint, null, null, {\n                PAGE: pageID,\n            });\n        }\n\n        function onFailure() {\n            setErrorBannerFade(true);\n            setErrorBannerMessage('Failed to save page! Please try again.');\n        }\n\n        let validInput = true;\n\n        if (!title || !title.trim()) {\n            setErrorTitle(true);\n            setErrorTitleText('Page title cannot be empty');\n            validInput = false;\n        } else if (title.length >= 1000) {\n            setErrorTitle(true);\n            setErrorTitleText('Page title must have less than 1000 characters');\n            validInput = false;\n        } else {\n            setErrorTitle(false);\n        }\n\n        if (!bodyText || !bodyText.trim()) {\n            setErrorBody(true);\n            validInput = false;\n        } else {\n            setErrorBody(false);\n        }\n\n        let error = false;\n        for (let i = 0; i < questions.length; i++) {\n            if (\n                !questions[i].REFLECTION_QUESTION ||\n                !questions[i].REFLECTION_QUESTION.trim()\n            ) {\n                setErrorQuestions(true);\n                setErrorQuestionsMessage(\n                    'At least one reflection question is blank'\n                );\n                validInput = false;\n                error = true;\n            }\n        }\n        if (!error) {\n            setErrorQuestions(false);\n        }\n\n        if (validInput) {\n            let trimmedQuestions = questions.map((obj) =>\n                obj.REFLECTION_QUESTION.trim()\n            );\n            let questionSet = new Set(trimmedQuestions);\n            if (trimmedQuestions.length > questionSet.size) {\n                setErrorQuestions(true);\n                setErrorQuestionsMessage(\n                    'You cannot have duplicate reflection questions'\n                );\n                validInput = false;\n            }\n        }\n\n        if (validInput) {\n            universalPost(\n                setPostValues,\n                endpoint,\n                onFailure,\n                onSuccess,\n                postReqBody\n            );\n        } else {\n            setErrorBannerFade(true);\n            setErrorBannerMessage(\n                'There are currently errors within your page. Please fix all errors in order to save.'\n            );\n        }\n    }\n\n    const setReqBodyNew = (qs) => {\n        let qsrb = [];\n        for (let i = 0; i < qs.length; i++) {\n            qsrb.push({ REFLECTION_QUESTION: qs[i] });\n        }\n\n        setQuestionsForReqBody(qsrb);\n    };\n\n    const savePage = () => {\n        handlePost(setPostValues, postReqBody, scenario_ID, false);\n    };\n\n    const [successBannerMessage, setSuccessBannerMessage] = useState('');\n    const [successBannerFade, setSuccessBannerFade] = useState(false);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setSuccessBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [successBannerFade]);\n\n    const [errorBannerMessage, setErrorBannerMessage] = useState('');\n    const [errorBannerFade, setErrorBannerFade] = useState(false);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setErrorBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [errorBannerFade]);\n\n    if (postValues.loading) {\n        return <LoadingSpinner />;\n    }\n\n    return (\n        <Container component=\"main\">\n            <div className={classes.bannerContainer}>\n                <SuccessBanner\n                    successMessage={successBannerMessage}\n                    fade={successBannerFade}\n                />\n                <ErrorBanner\n                    errorMessage={errorBannerMessage}\n                    fade={errorBannerFade}\n                />\n            </div>\n            <Typography align=\"center\" variant=\"h2\">\n                Reflection Component\n            </Typography>\n            <Grid container justify=\"flex-end\">\n                <Button color=\"primary\" onClick={handleClickOpen}>\n                    <HelpIcon />\n                </Button>\n                <GenericInfoButton\n                    description={`on this page`}\n                    open={open}\n                    setOpen={setOpen}\n                />\n            </Grid>\n            <Title\n                title={title}\n                setTitle={setTitle}\n                error={errorTitle}\n                errorMessage={errorTitleText}\n            />\n            <Body\n                body={bodyText}\n                setBody={setBodyText}\n                error={errorBody}\n                errorMessage={'Page body cannot be empty'}\n            />\n            <QuestionFields\n                questions={questions}\n                setQuestions={setQuestions}\n                setReqBodyNew={setReqBodyNew}\n            />\n            {errorQuestions ? (\n                <Typography\n                    style={{ marginLeft: 50 }}\n                    variant=\"body1\"\n                    display=\"block\"\n                    color=\"error\"\n                >\n                    {errorQuestionsMessage}\n                </Typography>\n            ) : null}\n            <Button\n                className={classes.saveButton}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={savePage}\n            >\n                Save\n            </Button>\n        </Container>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport {\n    Button,\n    TextField,\n    Typography,\n    Container,\n    Grid,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Body from '../GeneralPageComponents/Body';\nimport Title from '../GeneralPageComponents/Title';\nimport PropTypes from 'prop-types';\nimport universalPost from '../../../universalHTTPRequests/post.js';\nimport universalDelete from '../../../universalHTTPRequests/delete.js';\nimport SuccessBanner from '../../Banners/SuccessBanner';\nimport ErrorBanner from '../../Banners/ErrorBanner';\nimport LoadingSpinner from '../../LoadingSpinner';\nimport HelpIcon from '@material-ui/icons/Help';\nimport GenericInfoButton from '../../InfoButtons/GenericInfoButton';\n\nAction.propTypes = {\n    scenarioComponents: PropTypes.any,\n    setScenarioComponents: PropTypes.any,\n    setCurrentPageID: PropTypes.any,\n    page_id: PropTypes.any,\n    page_type: PropTypes.any,\n    page_title: PropTypes.any,\n    scenario_ID: PropTypes.any,\n    version_ID: PropTypes.any,\n    next_page_id: PropTypes.any,\n    body: PropTypes.any,\n    bodies: PropTypes.any,\n    xCoord: PropTypes.any,\n    yCoord: PropTypes.any,\n    choice1: PropTypes.any,\n    choice2: PropTypes.any,\n    r1: PropTypes.any,\n    r2: PropTypes.any,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    form: {\n        marginTop: theme.spacing(1),\n        width: '100%',\n    },\n    submit: {\n        marginTop: theme.spacing(2),\n        backgroundColor: theme.palette.primary.main,\n        color: 'white',\n        textTransform: 'unset',\n    },\n    saveButton: {\n        margin: theme.spacing(2),\n        float: 'right',\n        textTransform: 'unset',\n    },\n    bannerContainer: {\n        marginTop: theme.spacing(1),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n}));\n\nexport default function Action(props) {\n    const classes = useStyles();\n    const {\n        scenarioComponents,\n        setScenarioComponents,\n        setCurrentPageID,\n        page_id,\n        page_type,\n        page_title,\n        scenario_ID,\n        next_page_id,\n        body,\n        choice1,\n        choice2,\n        xCoord,\n        yCoord,\n    } = props;\n\n    //for info button\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const [postValues, setPostValues] = useState({\n        data: null,\n        loading: false,\n        error: null,\n    });\n    // eslint-disable-next-line\n    const [deleteValues, setDeleteValues] = useState({\n        data: null,\n        loading: false,\n        error: null,\n    });\n\n    const [pageID, setPageID] = useState(page_id);\n    const [title, setTitle] = useState(page_title);\n    const [bodyText, setBodyText] = useState(body);\n    const [option1, setOption1] = useState(choice1);\n    const [option2, setOption2] = useState(choice2);\n\n    const [errorTitle, setErrorTitle] = useState(false);\n    const [errorTitleText, setErrorTitleText] = useState(false);\n    const [errorBody, setErrorBody] = useState(false);\n    const [errorOption1, setErrorOption1] = useState(false);\n    const [errorOption1Text, setErrorOption1Text] = useState(false);\n    const [errorOption2, setErrorOption2] = useState(false);\n    const [errorOption2Text, setErrorOption2Text] = useState(false);\n\n    var postReqBody = {\n        PAGE: pageID,\n        PAGE_TYPE: page_type,\n        PAGE_TITLE: title,\n        PAGE_BODY: bodyText,\n        SCENARIO: scenario_ID,\n        NEXT_PAGE: next_page_id,\n        CHOICES: [\n            { CHOICE: option1, RESULT_PAGE: null },\n            { CHOICE: option2, RESULT_PAGE: null },\n        ],\n        X_COORDINATE: xCoord,\n        Y_COORDINATE: yCoord,\n    };\n\n    function handlePost(setPostValues, postReqBody, s_id, first_time) {\n        const endpoint = '/page?page_id=' + pageID;\n\n        function onSuccess(resp) {\n            const deleteEndPoint = '/page?page_id=' + pageID;\n            let newScenarioComponents = [...scenarioComponents];\n            let component = newScenarioComponents.find((x) => x.id === pageID);\n            component.id = resp.data.PAGE;\n            component.title = title;\n            setPageID(resp.data.PAGE);\n            setCurrentPageID(resp.data.PAGE);\n            setScenarioComponents(newScenarioComponents);\n            setSuccessBannerFade(true);\n            setSuccessBannerMessage('Successfully saved page!');\n            universalDelete(setDeleteValues, deleteEndPoint, null, null, {\n                PAGE: pageID,\n            });\n        }\n\n        function onFailure() {\n            setErrorBannerFade(true);\n            setErrorBannerMessage('Failed to save page! Please try again.');\n        }\n\n        let validInput = true;\n\n        if (!title || !title.trim()) {\n            setErrorTitle(true);\n            setErrorTitleText('Page title cannot be empty');\n            validInput = false;\n        } else if (title.length >= 1000) {\n            setErrorTitle(true);\n            setErrorTitleText('Page title must have less than 1000 characters');\n            validInput = false;\n        } else {\n            setErrorTitle(false);\n        }\n\n        if (!bodyText || !bodyText.trim()) {\n            setErrorBody(true);\n            validInput = false;\n        } else {\n            setErrorBody(false);\n        }\n\n        if (!option1 || !option1.trim()) {\n            setErrorOption1(true);\n            setErrorOption1Text('Option cannot be empty');\n            validInput = false;\n        } else if (option1.length >= 1000) {\n            setErrorOption1(true);\n            setErrorOption1Text('Option must have less than 1000 characters');\n            validInput = false;\n        } else {\n            setErrorOption1(false);\n        }\n\n        if (!option2 || !option2.trim()) {\n            setErrorOption2(true);\n            setErrorOption2Text('Option cannot be empty');\n            validInput = false;\n        } else if (option2.length >= 1000) {\n            setErrorOption2(true);\n            setErrorOption2Text('Option must have less than 1000 characters');\n            validInput = false;\n        } else {\n            setErrorOption2(false);\n        }\n\n        if (option1 && option2 && option1.trim() === option2.trim()) {\n            setErrorOption1(true);\n            setErrorOption1Text('Option1 cannot be the same as Option2');\n            setErrorOption2(true);\n            setErrorOption2Text('Option1 cannot be the same as Option2');\n            validInput = false;\n        }\n\n        if (validInput) {\n            universalPost(\n                setPostValues,\n                endpoint,\n                onFailure,\n                onSuccess,\n                postReqBody\n            );\n        } else {\n            setErrorBannerFade(true);\n            setErrorBannerMessage(\n                'There are currently errors within your page. Please fix all errors in order to save.'\n            );\n        }\n    }\n\n    const onChangeOption1 = (event) => {\n        setOption1(event.target.value);\n    };\n\n    const onChangeOption2 = (event) => {\n        setOption2(event.target.value);\n    };\n\n    const savePage = () => {\n        handlePost(setPostValues, postReqBody, scenario_ID, false);\n    };\n\n    const [successBannerMessage, setSuccessBannerMessage] = useState('');\n    const [successBannerFade, setSuccessBannerFade] = useState(false);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setSuccessBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [successBannerFade]);\n\n    const [errorBannerMessage, setErrorBannerMessage] = useState('');\n    const [errorBannerFade, setErrorBannerFade] = useState(false);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setErrorBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [errorBannerFade]);\n\n    if (postValues.loading) {\n        return <LoadingSpinner />;\n    }\n\n    return (\n        <Container component=\"main\">\n            <div className={classes.bannerContainer}>\n                <SuccessBanner\n                    successMessage={successBannerMessage}\n                    fade={successBannerFade}\n                />\n                <ErrorBanner\n                    errorMessage={errorBannerMessage}\n                    fade={errorBannerFade}\n                />\n            </div>\n            <Typography align=\"center\" variant=\"h2\">\n                Action Component\n            </Typography>\n            <Grid container justify=\"flex-end\">\n                <Button color=\"primary\" onClick={handleClickOpen}>\n                    <HelpIcon />\n                </Button>\n                <GenericInfoButton\n                    description={`on this page`}\n                    open={open}\n                    setOpen={setOpen}\n                />\n            </Grid>\n            <Title\n                title={title}\n                setTitle={setTitle}\n                error={errorTitle}\n                errorMessage={errorTitleText}\n            />\n            <Body\n                body={bodyText}\n                setBody={setBodyText}\n                error={errorBody}\n                errorMessage={'Page body cannot be empty.'}\n            />\n            <div className={classes.container}>\n                <form className={classes.form}>\n                    <Typography align=\"center\" variant=\"h6\">\n                        Option 1\n                    </Typography>\n                    {errorOption1 ? (\n                        <TextField\n                            error\n                            helperText={errorOption1Text}\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"option 1\"\n                            label=\"Input Option 1 Text\"\n                            name=\"option 1\"\n                            value={option1}\n                            onChange={onChangeOption1}\n                        />\n                    ) : (\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"option 1\"\n                            label=\"Input Option 1 Text\"\n                            name=\"option 1\"\n                            value={option1}\n                            onChange={onChangeOption1}\n                        />\n                    )}\n                    <Typography align=\"center\" variant=\"h6\">\n                        Option 2\n                    </Typography>\n                    {errorOption2 ? (\n                        <TextField\n                            error\n                            helperText={errorOption2Text}\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"option 2\"\n                            label=\"Input Option 2 Text\"\n                            name=\"option 2\"\n                            value={option2}\n                            onChange={onChangeOption2}\n                        />\n                    ) : (\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"option 2\"\n                            label=\"Input Option 2 Text\"\n                            name=\"option 2\"\n                            value={option2}\n                            onChange={onChangeOption2}\n                        />\n                    )}\n                    <Button\n                        className={classes.saveButton}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={savePage}\n                    >\n                        Save\n                    </Button>\n                </form>\n            </div>\n        </Container>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport Body from '../GeneralPageComponents/Body';\nimport Title from '../GeneralPageComponents/Title';\nimport { Typography, Container, Button, Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport universalPost from '../../../universalHTTPRequests/post.js';\nimport universalDelete from '../../../universalHTTPRequests/delete.js';\nimport SuccessBanner from '../../Banners/SuccessBanner';\nimport ErrorBanner from '../../Banners/ErrorBanner';\nimport LoadingSpinner from '../../LoadingSpinner';\nimport HelpIcon from '@material-ui/icons/Help';\nimport GenericInfoButton from '../../InfoButtons/GenericInfoButton';\n\nconst useStyles = makeStyles((theme) => ({\n    saveButton: {\n        margin: theme.spacing(2),\n        float: 'right',\n        textTransform: 'unset',\n    },\n    bannerContainer: {\n        marginTop: theme.spacing(1),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n}));\n\nIntroduction.propTypes = {\n    scenarioComponents: PropTypes.any,\n    setScenarioComponents: PropTypes.any,\n    setCurrentPageID: PropTypes.any,\n    page_id: PropTypes.any,\n    page_type: PropTypes.any,\n    page_title: PropTypes.any,\n    scenario_ID: PropTypes.any,\n    version_ID: PropTypes.any,\n    next_page_id: PropTypes.any,\n    body: PropTypes.any,\n    bodies: PropTypes.any,\n    xCoord: PropTypes.any,\n    yCoord: PropTypes.any,\n};\n\nexport default function Introduction(props) {\n    const {\n        scenarioComponents,\n        setScenarioComponents,\n        setCurrentPageID,\n        page_id,\n        page_type,\n        page_title,\n        scenario_ID,\n        next_page_id,\n        body,\n        bodies,\n        xCoord,\n        yCoord,\n    } = props;\n\n    //for info button\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    // eslint-disable-next-line\n    const [postValues, setPostValues] = useState({\n        data: null,\n        loading: false,\n        error: null,\n    });\n    // eslint-disable-next-line\n    const [deleteValues, setDeleteValues] = useState({\n        data: null,\n        loading: false,\n        error: null,\n    });\n\n    const classes = useStyles();\n    const [pageID, setPageID] = useState(page_id);\n    const [title, setTitle] = useState(page_title);\n    const [bodyText, setBodyText] = useState(body);\n    // eslint-disable-next-line\n    const [bodiesText, setBodiesText] = useState(bodies);\n    const [errorTitle, setErrorTitle] = useState(false);\n    const [errorTitleText, setErrorTitleText] = useState(false);\n    const [errorBody, setErrorBody] = useState(false);\n\n    var postReqBody = {\n        PAGE_TYPE: page_type,\n        PAGE_TITLE: title,\n        PAGE_BODY: bodyText,\n        SCENARIO: scenario_ID,\n        NEXT_PAGE: next_page_id,\n        BODIES: bodiesText,\n        X_COORDINATE: xCoord,\n        Y_COORDINATE: yCoord,\n    };\n\n    function handlePost(setPostValues, postReqBody, s_id, first_time) {\n        const endpoint = '/page?page_id=' + pageID;\n\n        function onSuccess(resp) {\n            const deleteEndPoint = '/page?page_id=' + pageID;\n            let newScenarioComponents = [...scenarioComponents];\n            let component = newScenarioComponents.find((x) => x.id === pageID);\n            component.id = resp.data.PAGE;\n            component.title = title;\n            setPageID(resp.data.PAGE);\n            setCurrentPageID(resp.data.PAGE);\n            setScenarioComponents(newScenarioComponents);\n            setSuccessBannerFade(true);\n            setSuccessBannerMessage('Successfully saved page!');\n            universalDelete(setDeleteValues, deleteEndPoint, null, null, {\n                PAGE: pageID,\n            });\n        }\n\n        function onFailure() {\n            setErrorBannerFade(true);\n            setErrorBannerMessage('Failed to save page! Please try again.');\n        }\n\n        let validInput = true;\n\n        if (!title || !title.trim()) {\n            setErrorTitle(true);\n            setErrorTitleText('Page title cannot be empty');\n            validInput = false;\n        } else if (title.trim().length >= 1000) {\n            setErrorTitle(true);\n            setErrorTitleText('Page title must have less than 1000 characters');\n            validInput = false;\n        } else {\n            setErrorTitle(false);\n        }\n\n        if (!bodyText || !bodyText.trim()) {\n            setErrorBody(true);\n            validInput = false;\n        } else {\n            setErrorBody(false);\n        }\n\n        if (validInput) {\n            universalPost(\n                setPostValues,\n                endpoint,\n                onFailure,\n                onSuccess,\n                postReqBody\n            );\n        } else {\n            setErrorBannerFade(true);\n            setErrorBannerMessage(\n                'There are currently errors within your page. Please fix all errors in order to save.'\n            );\n        }\n    }\n\n    const savePage = () => {\n        handlePost(setPostValues, postReqBody, scenario_ID, false);\n    };\n\n    const [successBannerMessage, setSuccessBannerMessage] = useState('');\n    const [successBannerFade, setSuccessBannerFade] = useState(false);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setSuccessBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [successBannerFade]);\n\n    const [errorBannerMessage, setErrorBannerMessage] = useState('');\n    const [errorBannerFade, setErrorBannerFade] = useState(false);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setErrorBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [errorBannerFade]);\n\n    if (postValues.loading) {\n        return <LoadingSpinner />;\n    }\n\n    //TODO information list\n    return (\n        <Container component=\"main\">\n            <div className={classes.bannerContainer}>\n                <SuccessBanner\n                    successMessage={successBannerMessage}\n                    fade={successBannerFade}\n                />\n                <ErrorBanner\n                    errorMessage={errorBannerMessage}\n                    fade={errorBannerFade}\n                />\n            </div>\n            <Typography align=\"center\" variant=\"h2\">\n                Introduction Page\n            </Typography>\n            <Grid container justify=\"flex-end\">\n                <Button color=\"primary\" onClick={handleClickOpen}>\n                    <HelpIcon />\n                </Button>\n                <GenericInfoButton\n                    description={`Give the student an introduction to the ethical scenario. What is the problem? Think about both the positive and negative potential consequences of the technology, \n                    as well as the stakeholders who are promoting the technology and the stakeholders who will be most directly impacted.\n                    `}\n                    open={open}\n                    setOpen={setOpen}\n                />\n            </Grid>\n            <Title\n                title={title}\n                setTitle={setTitle}\n                error={errorTitle}\n                errorMessage={errorTitleText}\n            />\n            <Body\n                body={bodyText}\n                setBody={setBodyText}\n                error={errorBody}\n                errorMessage={'Page body cannot be empty.'}\n            />\n            <Button\n                className={classes.saveButton}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={savePage}\n            >\n                Save\n            </Button>\n        </Container>\n    );\n}\n","import React from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nexport function actionNode({ data }) {\r\n    return (\r\n        <>\r\n            <Handle\r\n                type=\"target\"\r\n                position=\"top\"\r\n                onConnect={(params) => console.log('handle onConnect', params)}\r\n            />\r\n            {data.label}\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"bottom\"\r\n                id=\"a\"\r\n                style={{ left: '20%' }}\r\n            />\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"bottom\"\r\n                id=\"b\"\r\n                style={{ left: '80%' }}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport function introNode({ data }) {\r\n    return (\r\n        <>\r\n            {data.label}\r\n            <Handle type=\"source\" position=\"bottom\" />\r\n        </>\r\n    );\r\n}\r\n\r\nexport function reflectionNode({ data }) {\r\n    return (\r\n        <>\r\n            <Handle type=\"target\" position=\"top\" />\r\n            {data.label}\r\n            <Handle type=\"source\" position=\"bottom\" />\r\n        </>\r\n    );\r\n}\r\n\r\nexport function genericNode({ data }) {\r\n    return (\r\n        <>\r\n            <Handle type=\"target\" position=\"top\" />\r\n            {data.label}\r\n            <Handle type=\"source\" position=\"bottom\" />\r\n        </>\r\n    );\r\n}\r\n\r\nexport function conversationNode({ data }) {\r\n    return (\r\n        <>\r\n            <Handle type=\"target\" position=\"top\" />\r\n            {'Stakeholder Conversations'}\r\n            <Handle type=\"source\" position=\"bottom\" />\r\n        </>\r\n    );\r\n}\r\n","export default function addEdge(params, elements) {\r\n    const { source, target } = params;\r\n    const id = 'edge-' + source + '-' + target;\r\n    //Node path to itself\r\n    if (source === target) {\r\n        return elements;\r\n    }\r\n    //Edge already exists\r\n    if (elements.find((elements) => elements.id === id)) {\r\n        return elements;\r\n    }\r\n    //Source already has an edge (A source node can't link to 2 different pages)\r\n    if (elements.find((elements) => elements.source === source)) {\r\n        return elements;\r\n    }\r\n    const newEdge = {\r\n        id,\r\n        source,\r\n        target,\r\n        arrowHeadType: 'arrowclosed',\r\n        style: { strokeWidth: '5px', arrowWidth: '2px' },\r\n    };\r\n    return elements.concat(newEdge);\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    Typography,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogTitle,\n    DialogContent,\n    Grid,\n} from '@material-ui/core';\nimport ReactFlow, {\n    removeElements,\n    isEdge,\n    isNode,\n    MiniMap,\n    Controls,\n    Background,\n} from 'react-flow-renderer';\nimport initializeElements from './HelperFunctions/initializeElements';\nimport {\n    actionNode,\n    reflectionNode,\n    genericNode,\n    conversationNode,\n    introNode,\n} from './HelperFunctions/node';\nimport addEdge from './HelperFunctions/addEdge';\nimport get from './../../../universalHTTPRequests/get';\nimport put from './../../../universalHTTPRequests/put';\nimport LoadingSpinner from '../../LoadingSpinner';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport SuccessBanner from '../../Banners/SuccessBanner';\nimport ErrorBanner from '../../Banners/ErrorBanner';\nimport PropTypes from 'prop-types';\nimport HelpIcon from '@material-ui/icons/Help';\nimport GenericInfoButton from '../../InfoButtons/GenericInfoButton';\n\nconst useStyles = makeStyles((theme) => ({\n    errorContainer: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    container: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        height: '90vh',\n    },\n    margin: {\n        marginBottom: '15px',\n    },\n    title: {\n        textAlign: 'center',\n    },\n    copyright: {\n        margin: theme.spacing(2),\n    },\n    buttonContainer: {\n        display: 'flex',\n        float: 'right',\n        flexDirection: 'column',\n    },\n    button: {\n        zIndex: 5,\n        float: 'right',\n    },\n    iconError: {\n        fontSize: '75px',\n    },\n    iconRefreshLarge: {\n        fontSize: '75px',\n    },\n    iconRefreshSmall: {\n        fontSize: '30px',\n    },\n}));\n\n//Needs scenario id\nconst endpointGET = '/flowchart?scenario_id=';\n//Needs scenario id\nconst endpointPUT = '/flowchart?scenario_id=';\n\nFlowDiagram.propTypes = {\n    scenario_ID: PropTypes.number,\n};\n\nexport default function FlowDiagram({ scenario_ID }) {\n    const scenarioID = scenario_ID;\n    const classes = useStyles();\n    const [fetchedElements, setFetchedElements] = useState({\n        data: null,\n        loading: true,\n        error: null,\n    });\n\n    const [elementsPUT, setElementsPUT] = useState({\n        data: null,\n        loading: false,\n        error: null,\n    });\n\n    const [elements, setElements] = useState([]);\n    const [unsaved, setUnsaved] = useState(false);\n    const [errorText, setErrorText] = useState('');\n\n    //for info button\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    function positionElements(elements) {\n        let introductionElement = elements.filter((componentData) => {\n            return componentData.PAGE_TYPE === 'I';\n        });\n        let genericElements = elements.filter((componentData) => {\n            return componentData.PAGE_TYPE === 'G';\n        });\n        let reflectionElements = elements.filter((componentData) => {\n            return componentData.PAGE_TYPE === 'R';\n        });\n        let actionElements = elements.filter((componentData) => {\n            return componentData.PAGE_TYPE === 'A';\n        });\n        let stakeholderConversationElement = elements.filter(\n            (componentData) => {\n                return componentData.PAGE_TYPE === 'S';\n            }\n        );\n\n        let edges = elements.filter((componentData) => {\n            return isEdge(componentData);\n        });\n\n        let initialElements = introductionElement.concat(\n            genericElements,\n            reflectionElements,\n            actionElements,\n            stakeholderConversationElement,\n            edges\n        );\n\n        initialElements = initialElements.map((componentData) => {\n            return initializeElements(componentData);\n        });\n\n        //Set position of elements if elements are new ({x: 0,y: 0})\n        //Height of nodes are 51.2 pixels\n        initialElements.reduce((acc, currentValue) => {\n            if (\n                currentValue.position.x === 0 &&\n                currentValue.position.y === 0\n            ) {\n                currentValue.position.y += acc;\n                return acc + 51.2;\n            }\n            return acc;\n        }, 0);\n\n        return initialElements;\n    }\n\n    function addEdges(elements) {\n        //Add edges\n        elements.forEach((currentElement) => {\n            //TODO\n            if (currentElement.type === 'actionNode') {\n                if (!currentElement.ACTION[0]) {\n                    // eslint-disable-next-line\n                    throw 'Action incomplete';\n                }\n                //Only 2 action options\n                if (currentElement.ACTION[0].RESULT_PAGE) {\n                    elements = addEdge(\n                        {\n                            source: currentElement.id.toString() + '__a',\n                            target: currentElement.ACTION[0].RESULT_PAGE.toString(),\n                        },\n                        elements\n                    );\n                }\n                if (currentElement.ACTION[1].RESULT_PAGE) {\n                    elements = addEdge(\n                        {\n                            source: currentElement.id.toString() + '__b',\n                            target: currentElement.ACTION[1].RESULT_PAGE.toString(),\n                        },\n                        elements\n                    );\n                }\n            } else if (currentElement.NEXT_PAGE) {\n                elements = addEdge(\n                    {\n                        source: currentElement.id.toString(),\n                        target: currentElement.NEXT_PAGE.toString(),\n                    },\n                    elements\n                );\n            }\n        });\n\n        return elements;\n    }\n\n    let getData = () => {\n        setUnsaved(false);\n        function onSuccess(resp) {\n            setElements(addEdges(positionElements(resp.data)));\n        }\n        function onError(resp) {\n            if (resp === 'Action incomplete') {\n                setErrorText(\n                    'You have at least one Action page that is incomplete (i.e. without options). You must complete all action pages before you can access the Flow Diagram.'\n                );\n            } else {\n                setErrorText('Unable to fetch Flow Diagram! Please try again.');\n            }\n        }\n        get(setFetchedElements, endpointGET + scenarioID, onError, onSuccess);\n    };\n\n    useEffect(getData, []);\n\n    const [isRemoveButtonDisabled, setIsRemoveButtonDisabled] = useState(true);\n    const [currentEdgeSelected, setCurrentEdgeSelected] = useState();\n\n    const nodeTypes = {\n        actionNode: actionNode,\n        reflectionNode: reflectionNode,\n        genericNode: genericNode,\n        introNode: introNode,\n        conversationNode: conversationNode,\n    };\n\n    //Height and Width of flow diagram\n    const graphStyles = { width: '100%', height: '100%', border: 'solid' };\n\n    const onConnect = (params) => {\n        setUnsaved(true);\n        setElements((elements) => addEdge(params, elements));\n    };\n\n    const onRemoveEdge = (params, element) => {\n        if (isEdge(element)) {\n            setIsRemoveButtonDisabled(false);\n            setCurrentEdgeSelected([element]);\n        }\n    };\n\n    const deleteEdge = () => {\n        setUnsaved(true);\n        if (currentEdgeSelected != null) {\n            setElements((elements) =>\n                removeElements(currentEdgeSelected, elements)\n            );\n            setCurrentEdgeSelected(null);\n            setIsRemoveButtonDisabled(true);\n        }\n    };\n\n    //Update of nodes position\n    const onNodeDrag = (event, element) => {\n        setUnsaved(true);\n        //ID's in flow diagram library are stored as strings\n        const index = elements.findIndex(\n            (ele) => ele.id === Number(element.id)\n        );\n        // important to create a copy, otherwise you'll modify state outside of setState call\n        let elementsCopy = [...elements];\n        elementsCopy[index] = {\n            ...elementsCopy[index],\n            position: element.position,\n        };\n        setElements(elementsCopy);\n    };\n\n    const save = () => {\n        function onSuccess() {\n            let resetElements = elements.reduce((array, currentElement) => {\n                if (isNode(currentElement) && currentElement.position.x === 0) {\n                    return array.concat({\n                        ...currentElement,\n                        X_COORDINATE: 0,\n                        Y_COORDINATE: 0,\n                        position: { x: 0, y: 0 },\n                    });\n                }\n                return array.concat(currentElement);\n            }, []);\n            setElements(positionElements(resetElements));\n            setUnsaved(false);\n            setSuccessBannerFade(true);\n            setSuccessBannerMessage('Successfully Saved!');\n        }\n\n        function onError() {\n            setErrorBannerFade(true);\n            setErrorBannerMessage('Failed to Save!');\n        }\n\n        const updatedElements = elements.reduce((array, currentElement) => {\n            if (isNode(currentElement)) {\n                let nodeElement = {\n                    PAGE: currentElement.PAGE,\n                    PAGE_TYPE: currentElement.PAGE_TYPE,\n                    PAGE_TITLE: currentElement.PAGE_TITLE,\n                    PAGE_BODY: currentElement.PAGE_BODY,\n                    SCENARIO: currentElement.SCENARIO_id,\n                    VERSION: currentElement.VERSION,\n                    NEXT_PAGE: null,\n                    X_COORDINATE: Math.floor(currentElement.position.x),\n                    Y_COORDINATE:\n                        Math.floor(currentElement.position.x) !== 0\n                            ? Math.floor(currentElement.position.y)\n                            : 0,\n                };\n\n                if (currentElement.type === 'actionNode') {\n                    nodeElement.ACTION = currentElement.ACTION.map(\n                        (actionData) => {\n                            return {\n                                id: actionData.id,\n                                PAGE: actionData.PAGE_id,\n                                CHOICE: actionData.CHOICE,\n                                RESULT_PAGE: null,\n                            };\n                        }\n                    );\n\n                    elements.forEach((currElement) => {\n                        //First option\n                        if (\n                            isEdge(currElement) &&\n                            currElement.source === currentElement.id + '__a'\n                        ) {\n                            nodeElement.ACTION[0] = {\n                                id: currentElement.ACTION[0].id,\n                                CHOICE: currentElement.ACTION[0].CHOICE,\n                                PAGE: currentElement.id,\n                                RESULT_PAGE: Number(currElement.target),\n                            };\n                            //Second option\n                        } else if (\n                            isEdge(currElement) &&\n                            currElement.source === currentElement.id + '__b'\n                        ) {\n                            nodeElement.ACTION[1] = {\n                                id: currentElement.ACTION[1].id,\n                                CHOICE: currentElement.ACTION[1].CHOICE,\n                                PAGE: currentElement.id,\n                                RESULT_PAGE: Number(currElement.target),\n                            };\n                        }\n                    });\n                } else {\n                    //Set next page ID for all other node types\n                    elements.some((currElement) => {\n                        //currElement.source is type string, convert to number\n                        if (\n                            isEdge(currElement) &&\n                            Number(currElement.source) === currentElement.id\n                        ) {\n                            //Set NEXT_PAGE id to type number\n                            nodeElement.NEXT_PAGE = Number(currElement.target);\n                            return true;\n                        }\n                        return false;\n                    });\n                }\n                return array.concat(nodeElement);\n            }\n            return array;\n        }, []);\n\n        put(\n            setElementsPUT,\n            endpointPUT + scenarioID,\n            onError,\n            onSuccess,\n            updatedElements\n        );\n    };\n\n    const [successBannerFade, setSuccessBannerFade] = useState(false);\n    const [successBannerMessage, setSuccessBannerMessage] = useState('');\n    const [errorBannerFade, setErrorBannerFade] = useState(false);\n    const [errorBannerMessage, setErrorBannerMessage] = useState('');\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setSuccessBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [successBannerFade]);\n\n    //RESET Pop-up Dialog\n    const [openReset, setOpenReset] = useState(false);\n    const [openRefresh, setOpenRefresh] = useState(false);\n\n    const refresh = () => {\n        if (unsaved) {\n            setOpenRefresh(true);\n        } else {\n            getData();\n        }\n    };\n\n    const handleCloseRefresh = (refresh) => {\n        setOpenRefresh(false);\n        //remove all edges and reset x and y coordinates to 0\n        if (refresh) {\n            getData();\n        }\n    };\n\n    const handleClickOpenReset = () => {\n        setOpenReset(true);\n    };\n\n    const handleCloseReset = (reset) => {\n        setOpenReset(false);\n        //remove all edges and reset x and y coordinates to 0\n        if (reset) {\n            setUnsaved(true);\n            let resetElements = elements.reduce((array, currentElement) => {\n                if (isNode(currentElement)) {\n                    return array.concat({\n                        ...currentElement,\n                        NEXT_PAGE: null,\n                        X_COORDINATE: 0,\n                        Y_COORDINATE: 0,\n                        position: { x: 0, y: 0 },\n                    });\n                }\n                return array;\n            }, []);\n            setElements(positionElements(resetElements));\n        }\n    };\n\n    ConfirmationDialog.propTypes = {\n        onClose: PropTypes.any,\n        open: PropTypes.bool,\n        title: PropTypes.string,\n        content: PropTypes.string,\n    };\n\n    function ConfirmationDialog({ onClose, open, title, content }) {\n        const handleCancel = () => {\n            onClose();\n        };\n\n        const handleOk = () => {\n            onClose(true);\n        };\n\n        return (\n            <Dialog\n                disableBackdropClick\n                disableEscapeKeyDown\n                maxWidth=\"xs\"\n                aria-labelledby=\"confirmation-dialog-title\"\n                open={open}\n            >\n                <DialogTitle id=\"confirmation-dialog-title\">\n                    {title}\n                </DialogTitle>\n                <DialogContent dividers>\n                    <Typography>{content}</Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button autoFocus onClick={handleCancel} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleOk} color=\"primary\">\n                        Ok\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n\n    if (fetchedElements.loading || elementsPUT.loading) {\n        return <LoadingSpinner />;\n    }\n\n    if (fetchedElements.error) {\n        return (\n            <div className={classes.errorContainer}>\n                <div className={classes.container}>\n                    <ErrorIcon className={classes.iconError} />\n                    <Typography align=\"center\" variant=\"h5\">\n                        {errorText}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={getData}\n                    >\n                        <RefreshIcon className={classes.iconRefreshLarge} />\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className={classes.container}>\n            <Typography variant=\"h3\">Order Scenario Pages</Typography>\n            <Grid container justify=\"flex-end\">\n                <Button color=\"primary\" onClick={handleClickOpen}>\n                    <HelpIcon />\n                </Button>\n                <GenericInfoButton\n                    description={`Here you can order the pages the student will go through in the simulation. Click and drag your cursor to move around the diagram box.\n                    Click and drag from one box to another and an arrow will appear, effectively connecting each page. It's advised to start with the introduction page.`}\n                    open={open}\n                    setOpen={setOpen}\n                />\n            </Grid>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={refresh}\n                className={classes.margin}\n            >\n                <RefreshIcon className={classes.iconRefreshSmall} />\n            </Button>\n            {unsaved ? (\n                <Typography variant=\"h6\" align=\"center\" color=\"error\">\n                    Unsaved\n                </Typography>\n            ) : null}\n            <SuccessBanner\n                successMessage={successBannerMessage}\n                fade={successBannerFade}\n            />\n            <ErrorBanner\n                errorMessage={errorBannerMessage}\n                fade={errorBannerFade}\n            />\n            <ConfirmationDialog\n                id=\"confirmRefresh\"\n                keepMounted\n                open={openRefresh}\n                onClose={handleCloseRefresh}\n                title={'Unsaved Changes'}\n                content={\n                    'You have unsaved changes. Would you still like to refresh?'\n                }\n            />\n            <ConfirmationDialog\n                id=\"confirmReset\"\n                keepMounted\n                open={openReset}\n                onClose={handleCloseReset}\n                title={'Reset Flow Diagram'}\n                content={'Would you like to reset the flow diagram?'}\n            />\n            <ReactFlow\n                elements={elements}\n                style={graphStyles}\n                onConnect={onConnect}\n                onElementClick={onRemoveEdge}\n                onNodeDragStop={onNodeDrag}\n                nodeTypes={nodeTypes}\n            >\n                <div className={classes.buttonContainer}>\n                    <Button\n                        className={classes.button}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={save}\n                    >\n                        <Typography variant=\"h6\" display=\"block\" noWrap>\n                            Save Changes\n                        </Typography>\n                    </Button>\n                    <Button\n                        className={classes.button}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={handleClickOpenReset}\n                    >\n                        <Typography variant=\"h6\" display=\"block\" noWrap>\n                            Reset\n                        </Typography>\n                    </Button>\n                    <Button\n                        className={classes.button}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={isRemoveButtonDisabled}\n                        onClick={deleteEdge}\n                    >\n                        <Typography variant=\"h6\" display=\"block\" noWrap>\n                            Remove Edge\n                        </Typography>\n                    </Button>\n                </div>\n                <MiniMap />\n                <Controls />\n                <Background />\n            </ReactFlow>\n        </div>\n    );\n}\n","export default function initializeElements(componentData) {\r\n    switch (componentData.PAGE_TYPE) {\r\n        case 'I':\r\n            return {\r\n                id: componentData.PAGE,\r\n                type: 'introNode',\r\n                data: { label: componentData.PAGE_TITLE },\r\n                style: {\r\n                    border: '3px solid orange',\r\n                    borderRadius: '5%',\r\n                    padding: 10,\r\n                },\r\n                position: {\r\n                    x: componentData.X_COORDINATE,\r\n                    y: componentData.Y_COORDINATE,\r\n                },\r\n                ...componentData,\r\n            };\r\n        case 'A':\r\n            return {\r\n                id: componentData.PAGE,\r\n                type: 'actionNode',\r\n                data: { label: componentData.PAGE_TITLE },\r\n                style: {\r\n                    border: '3px solid green',\r\n                    borderRadius: '5%',\r\n                    padding: 10,\r\n                },\r\n                position: {\r\n                    x: componentData.X_COORDINATE,\r\n                    y: componentData.Y_COORDINATE,\r\n                },\r\n                ...componentData,\r\n            };\r\n        case 'G':\r\n            return {\r\n                id: componentData.PAGE,\r\n                type: 'genericNode',\r\n                data: { label: componentData.PAGE_TITLE },\r\n                style: {\r\n                    border: '3px solid red',\r\n                    borderRadius: '5%',\r\n                    padding: 10,\r\n                },\r\n                position: {\r\n                    x: componentData.X_COORDINATE,\r\n                    y: componentData.Y_COORDINATE,\r\n                },\r\n                ...componentData,\r\n            };\r\n        case 'R':\r\n            return {\r\n                id: componentData.PAGE,\r\n                type: 'reflectionNode',\r\n                data: { label: componentData.PAGE_TITLE },\r\n                style: {\r\n                    border: '3px solid purple',\r\n                    borderRadius: '5%',\r\n                    padding: 10,\r\n                },\r\n                position: {\r\n                    x: componentData.X_COORDINATE,\r\n                    y: componentData.Y_COORDINATE,\r\n                },\r\n                ...componentData,\r\n            };\r\n        case 'S':\r\n            return {\r\n                id: componentData.PAGE,\r\n                type: 'conversationNode',\r\n                data: { label: componentData.PAGE_TITLE },\r\n                style: {\r\n                    border: '3px solid blue',\r\n                    borderRadius: '5%',\r\n                    padding: 10,\r\n                },\r\n                position: {\r\n                    x: componentData.X_COORDINATE,\r\n                    y: componentData.Y_COORDINATE,\r\n                },\r\n                ...componentData,\r\n            };\r\n        default:\r\n            return {\r\n                id: componentData.PAGE,\r\n                type: 'conversationNode',\r\n                data: { label: componentData.PAGE_TITLE },\r\n                style: {\r\n                    border: '3px solid blue',\r\n                    borderRadius: '5%',\r\n                    padding: 10,\r\n                },\r\n                position: {\r\n                    x: componentData.X_COORDINATE,\r\n                    y: componentData.Y_COORDINATE,\r\n                },\r\n                ...componentData,\r\n            };\r\n    }\r\n}\r\n","import React from 'react';\r\nimport SunEditor from 'suneditor-react';\r\nimport 'suneditor/dist/css/suneditor.min.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nEditedSunEditor.propTypes = {\r\n    setText: PropTypes.any,\r\n    text: PropTypes.string,\r\n};\r\n\r\nexport default function EditedSunEditor({ setText, text }) {\r\n    let handleChange = (content) => {\r\n        setText(content);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <SunEditor\r\n                setContents={text}\r\n                setOptions={{\r\n                    width: '100%',\r\n                    height: 150,\r\n                    placeholder: 'Enter in Introduction for Scenario Page...',\r\n                    buttonList: [\r\n                        ['font', 'fontSize', 'formatBlock'],\r\n                        ['paragraphStyle', 'blockquote'],\r\n                        [\r\n                            'bold',\r\n                            'underline',\r\n                            'italic',\r\n                            'strike',\r\n                            'subscript',\r\n                            'superscript',\r\n                        ],\r\n                        '/', // Line break\r\n                        ['undo', 'redo'],\r\n                        ['removeFormat'],\r\n                        ['outdent', 'indent'],\r\n                        ['align', 'horizontalRule', 'list', 'lineHeight'],\r\n                        ['preview'],\r\n                        // (min-width: 1200px)\r\n                        [\r\n                            '%1200',\r\n                            [\r\n                                ['undo', 'redo'],\r\n                                [\r\n                                    ':p-More Paragraph-default.more_paragraph',\r\n                                    'font',\r\n                                    'fontSize',\r\n                                    'formatBlock',\r\n                                    'paragraphStyle',\r\n                                    'blockquote',\r\n                                ],\r\n                                ['bold', 'underline', 'italic', 'strike'],\r\n                                [\r\n                                    ':t-More Text-default.more_text',\r\n                                    'subscript',\r\n                                    'superscript',\r\n                                    'fontColor',\r\n                                    'hiliteColor',\r\n                                    'textStyle',\r\n                                ],\r\n                                ['removeFormat'],\r\n                                ['outdent', 'indent'],\r\n                                [\r\n                                    ':e-More Line-default.more_horizontal',\r\n                                    'align',\r\n                                    'horizontalRule',\r\n                                    'list',\r\n                                    'lineHeight',\r\n                                ],\r\n                                [\r\n                                    '-right',\r\n                                    ':i-More Misc-default.more_vertical',\r\n                                    'fullScreen',\r\n                                    'showBlocks',\r\n                                    'codeView',\r\n                                    'preview',\r\n                                ],\r\n                                [\r\n                                    '-right',\r\n                                    ':r-More Rich-default.more_plus',\r\n                                    'table',\r\n                                    'link',\r\n                                    'image',\r\n                                    'video',\r\n                                    'audio',\r\n                                ],\r\n                            ],\r\n                        ],\r\n                        // (min-width: 875px)\r\n                        [\r\n                            '%875',\r\n                            [\r\n                                ['undo', 'redo'],\r\n                                [\r\n                                    ':p-More Paragraph-default.more_paragraph',\r\n                                    'font',\r\n                                    'fontSize',\r\n                                    'formatBlock',\r\n                                    'paragraphStyle',\r\n                                    'blockquote',\r\n                                ],\r\n                                [\r\n                                    ':t-More Text-default.more_text',\r\n                                    'bold',\r\n                                    'underline',\r\n                                    'italic',\r\n                                    'strike',\r\n                                    'subscript',\r\n                                    'superscript',\r\n                                    'fontColor',\r\n                                    'hiliteColor',\r\n                                    'textStyle',\r\n                                    'removeFormat',\r\n                                ],\r\n                                [\r\n                                    ':e-More Line-default.more_horizontal',\r\n                                    'outdent',\r\n                                    'indent',\r\n                                    'align',\r\n                                    'horizontalRule',\r\n                                    'list',\r\n                                    'lineHeight',\r\n                                ],\r\n                                [\r\n                                    ':r-More Rich-default.more_plus',\r\n                                    'table',\r\n                                    'link',\r\n                                    'image',\r\n                                    'video',\r\n                                    'audio',\r\n                                ],\r\n                                [\r\n                                    '-right',\r\n                                    ':i-More Misc-default.more_vertical',\r\n                                    'fullScreen',\r\n                                    'showBlocks',\r\n                                    'codeView',\r\n                                    'preview',\r\n                                ],\r\n                            ],\r\n                        ],\r\n                    ],\r\n                }}\r\n                onChange={handleChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport {\r\n    Select,\r\n    MenuItem,\r\n    Grid,\r\n    Button,\r\n    TextField,\r\n    Typography,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport EditedSunEditor from '../../components/EditedSunEditor';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    menuButton: {\r\n        margin: theme.spacing(2),\r\n    },\r\n    addButton: {\r\n        margin: theme.spacing(2),\r\n        float: 'right',\r\n        textTransform: 'unset',\r\n    },\r\n    selectMenu: {\r\n        minWidth: 200,\r\n        magin: theme.spacing(5),\r\n    },\r\n}));\r\n\r\nAddNewScenarioPageDialogBody.propTypes = {\r\n    setOpenPopup: PropTypes.any.isRequired,\r\n    addPage: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default function AddNewScenarioPageDialogBody(props) {\r\n    const classes = useStyles();\r\n    AddNewScenarioPageDialogBody.propTypes = props.data;\r\n    const data = props;\r\n    const { addPage, setOpenPopup } = data;\r\n\r\n    // eslint-disable-next-line\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [pageType, setPageType] = useState('Generic');\r\n    const [pageName, setPageName] = useState('');\r\n    const [pageBody, setPageBody] = useState('');\r\n\r\n    const [errorName, setErrorName] = useState(false);\r\n    const [errorNameText, setErrorNameText] = useState('');\r\n    const [errorBody, setErrorBody] = useState(false);\r\n\r\n    // eslint-disable-next-line\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setPageType(event.target.value);\r\n    };\r\n\r\n    const createNewPage = () => {\r\n        let validInput = true;\r\n\r\n        if (!pageName || !pageName.trim()) {\r\n            setErrorName(true);\r\n            setErrorNameText('Scenario name cannot be empty');\r\n            validInput = false;\r\n        } else if (pageName.length >= 1000) {\r\n            setErrorName(true);\r\n            setErrorNameText(\r\n                'Scenario name must have less than 1000 characters'\r\n            );\r\n            validInput = false;\r\n        } else {\r\n            setErrorName(false);\r\n        }\r\n\r\n        if (!pageBody || !pageBody.trim()) {\r\n            setErrorBody(true);\r\n            validInput = false;\r\n        } else {\r\n            setErrorBody(false);\r\n        }\r\n\r\n        if (validInput) {\r\n            addPage(pageType, pageName, pageBody);\r\n            setOpenPopup(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Grid container direction=\"row\" justify=\"flex-start\">\r\n                <Grid item xs={4}>\r\n                    <Typography variant=\"h6\">Page Type</Typography>\r\n                    <Select\r\n                        className={classes.selectMenu}\r\n                        id=\"Scenario-Page-Type-Menu\"\r\n                        labelId=\"Scenario-Page-Type-Menu\"\r\n                        value={pageType}\r\n                        onChange={handleChange}\r\n                    >\r\n                        <MenuItem value={'Generic'} onClick={handleClose}>\r\n                            Generic Component\r\n                        </MenuItem>\r\n                        <MenuItem value={'Action'} onClick={handleClose}>\r\n                            Action Component\r\n                        </MenuItem>\r\n                        <MenuItem value={'Reflection'} onClick={handleClose}>\r\n                            Reflection Component\r\n                        </MenuItem>\r\n                    </Select>\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                    {errorName ? (\r\n                        <TextField\r\n                            error\r\n                            helperText={errorNameText}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"New Scenario Page Name\"\r\n                            label=\"Scenario Page Name\"\r\n                            id=\"scenariopageAdder\"\r\n                            onChange={(e) => setPageName(e.target.value)}\r\n                        ></TextField>\r\n                    ) : (\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"New Scenario Page Name\"\r\n                            label=\"Scenario Page Name\"\r\n                            id=\"scenariopageAdder\"\r\n                            onChange={(e) => setPageName(e.target.value)}\r\n                        ></TextField>\r\n                    )}\r\n                    <EditedSunEditor\r\n                        text={pageBody}\r\n                        setText={setPageBody}\r\n                    ></EditedSunEditor>\r\n                    {errorBody ? (\r\n                        <Typography\r\n                            style={{ marginLeft: 15 }}\r\n                            variant=\"caption\"\r\n                            display=\"block\"\r\n                            color=\"error\"\r\n                        >\r\n                            Page body cannot be empty.\r\n                        </Typography>\r\n                    ) : null}\r\n                    <Button\r\n                        className={classes.addButton}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={createNewPage}\r\n                    >\r\n                        <AddIcon />\r\n                        Add Scenario Page\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    Button,\r\n    Typography,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport AddNewScenarioPageDialogBody from './AddNewScenarioPageDialogBody';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    dialogWrapper: {\r\n        padding: theme.spacing(2),\r\n        position: 'absolute',\r\n        top: theme.spacing(5),\r\n    },\r\n    exitOutButton: {\r\n        margin: theme.spacing(2),\r\n        marginLeft: 'auto',\r\n        float: 'right',\r\n        border: '3px solid',\r\n        borderColor: theme.palette.primary.light,\r\n    },\r\n}));\r\n\r\nAddNewSimulationScenarioPageDialog.propTypes = {\r\n    title: PropTypes.any.isRequired,\r\n    setOpenPopup: PropTypes.any.isRequired,\r\n    addPage: PropTypes.any.isRequired,\r\n    openPopup: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default function AddNewSimulationScenarioPageDialog(props) {\r\n    const classes = useStyles();\r\n    AddNewSimulationScenarioPageDialog.propTypes = props.data;\r\n    const data = props;\r\n    const { title, setOpenPopup, addPage, openPopup } = data;\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openPopup}\r\n                maxWidth=\"md\"\r\n                classes={{ paper: classes.dialogWrapper }}\r\n            >\r\n                <DialogTitle\r\n                    disableTypography={true}\r\n                    style={{ display: 'flex' }}\r\n                >\r\n                    <Typography\r\n                        variant=\"h3\"\r\n                        align=\"center\"\r\n                        component=\"div\"\r\n                        style={{ display: 'flex' }}\r\n                    >\r\n                        {title}\r\n                    </Typography>\r\n                    <Button\r\n                        className={classes.exitOutButton}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => {\r\n                            setOpenPopup(false);\r\n                        }}\r\n                    >\r\n                        <HighlightOffIcon />\r\n                    </Button>\r\n                </DialogTitle>\r\n\r\n                <DialogContent dividers>\r\n                    <AddNewScenarioPageDialogBody\r\n                        addPage={addPage}\r\n                        setOpenPopup={setOpenPopup}\r\n                    ></AddNewScenarioPageDialogBody>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Grid } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport GenericDeleteWarning from '../DeleteWarnings/GenericDeleteWarning';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst useStyles = makeStyles((theme) => ({\n    pageButton: {\n        width: '100%',\n        minHeight: '50px',\n        border: '3px solid',\n        borderColor: theme.palette.primary.light,\n        textTransform: 'unset',\n        overflowWrap: 'anywhere',\n    },\n    deleteButton: {\n        minWidth: '40px',\n        border: '3px solid',\n        borderColor: theme.palette.primary.main,\n        backgroundColor: theme.palette.primary.light,\n    },\n    deleteButtonContainer: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\nNavSideBarNode.propTypes = {\n    onClick: PropTypes.any.isRequired,\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    deleteByID: PropTypes.any.isRequired,\n    component: PropTypes.any,\n    scenarioPages: PropTypes.any,\n    isIntroPage: PropTypes.bool,\n};\n\nexport default function NavSideBarNode(props) {\n    const classes = useStyles();\n    const {\n        onClick,\n        deleteByID,\n        id,\n        title,\n        scenarioPages,\n        isIntroPage,\n    } = props;\n\n    //Used for the popup delete warning\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    function pageType(title) {\n        if (id === -1 || id === -2 || id === -3 || id === -4 || isIntroPage) {\n            //logistics to introduction pages\n            return (\n                <Grid container direction=\"row\" justify=\"flex-start\">\n                    <Grid item xs={10}>\n                        <Button\n                            className={classes.pageButton}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={handleDisplayComponent}\n                        >\n                            {title}\n                        </Button>\n                    </Grid>\n                </Grid>\n            );\n        } else {\n            //additional created pages\n            return (\n                <Grid container direction=\"row\" justify=\"flex-start\">\n                    <Grid item xs={10}>\n                        <Button\n                            className={classes.pageButton}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={handleDisplayComponent}\n                        >\n                            {title}\n                        </Button>\n                    </Grid>\n                    <Grid item xs={2} className={classes.deleteButtonContainer}>\n                        <Button\n                            className={classes.deleteButton}\n                            color=\"primary\"\n                            onClick={handleClickOpen}\n                        >\n                            <DeleteForeverIcon />\n                        </Button>\n                        <GenericDeleteWarning\n                            remove={() => deleteByID(id)}\n                            open={open}\n                            setOpen={setOpen}\n                        />\n                    </Grid>\n                </Grid>\n            );\n        }\n    }\n\n    function handleDisplayComponent() {\n        onClick(id, title, scenarioPages);\n    }\n\n    return <div>{pageType(title)}</div>;\n}\n","import React from 'react';\r\nimport NavSideBarNode from '../ConfigurationSideBarComponents/NavSideBarNode';\r\nimport PropTypes from 'prop-types';\r\n\r\nNavSideBarList.propTypes = {\r\n    onClick: PropTypes.any.isRequired,\r\n    deleteByID: PropTypes.any.isRequired,\r\n    scenarioPages: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default function NavSideBarList(props) {\r\n    const { onClick, deleteByID, scenarioPages } = props;\r\n\r\n    return (\r\n        <div>\r\n            {scenarioPages.map((scenarioPage) => (\r\n                <NavSideBarNode\r\n                    key={scenarioPage.id}\r\n                    onClick={onClick}\r\n                    deleteByID={deleteByID}\r\n                    scenarioPages={scenarioPages}\r\n                    {...scenarioPage}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    Button,\n    Typography,\n    makeStyles,\n    Grid,\n    Divider,\n} from '@material-ui/core';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles((theme) => ({\n    dialogWrapper: {\n        padding: theme.spacing(2),\n        position: 'absolute',\n        top: theme.spacing(5),\n    },\n    exitOutButton: {\n        margin: theme.spacing(2),\n        marginLeft: 'auto',\n        float: 'right',\n        border: '3px solid',\n        borderColor: theme.palette.primary.light,\n    },\n    root: {\n        width: 'fit-content',\n\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.text.secondary,\n        '& svg': {\n            margin: theme.spacing(7),\n        },\n        '& hr': {\n            margin: theme.spacing(0, 5),\n        },\n    },\n}));\n\nToDoListDialog.propTypes = {\n    setOpenToDo: PropTypes.any.isRequired,\n    openToDo: PropTypes.any.isRequired,\n};\n\nexport default function ToDoListDialog(props) {\n    const classes = useStyles();\n    ToDoListDialog.propTypes = props.data;\n    const data = props;\n    const { setOpenToDo, openToDo } = data;\n\n    return (\n        <div>\n            <Dialog\n                open={openToDo}\n                maxWidth=\"md\"\n                classes={{ paper: classes.dialogWrapper }}\n            >\n                <DialogTitle\n                    disableTypography={true}\n                    style={{ display: 'flex' }}\n                >\n                    <Typography\n                        variant=\"h3\"\n                        align=\"center\"\n                        component=\"div\"\n                        style={{ display: 'flex' }}\n                    >\n                        To Do List\n                    </Typography>\n                </DialogTitle>\n                <DialogContent dividers>\n                    <Grid\n                        container\n                        alignItems=\"center\"\n                        className={classes.root}\n                    >\n                        <Typography>Unfinished</Typography>\n                        <Divider orientation=\"vertical\" flexItem />\n                        <Typography>In Progress</Typography>\n                        <Divider orientation=\"vertical\" flexItem />\n                        <Typography>Finished</Typography>\n                    </Grid>\n                </DialogContent>\n                <Button\n                    className={classes.exitOutButton}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {\n                        setOpenToDo(false);\n                    }}\n                >\n                    <HighlightOffIcon />\n                </Button>\n            </Dialog>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles, useTheme, withStyles } from '@material-ui/core/styles';\nimport { Drawer, Box, Button, Typography } from '@material-ui/core';\nimport clsx from 'clsx';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Logistics from '../components/EditorComponents/LogisticsPageComponents/Logistics';\nimport Generic from '../components/EditorComponents/GenericPageComponents/Generic';\nimport ConfigureIssues from '../components/EditorComponents/ConfigureIssuesComponents/ConfigureIssues';\nimport ConversationEditor from '../components/EditorComponents/ConversationEditorComponents/ConversationEditor';\nimport Reflection from '../components/EditorComponents/ReflectionPageComponents/Reflection';\nimport Action from '../components/EditorComponents/ActionPageComponents/Action';\nimport Introduction from '../components/EditorComponents/GenericPageComponents/Introduction';\nimport FlowDiagram from '../components/EditorComponents/FlowDiagramComponents/FlowDiagram';\nimport AddNewSimulationScenarioPageDialog from '../components//EditorComponents/AddNewSimulationScenarioPageDialog';\nimport NavSideBarList from '../components/ConfigurationSideBarComponents/NavSideBarList';\nimport ToDoListDialog from '../components/EditorComponents/ToDoListDialog';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Link } from 'react-router-dom';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport SuccessBanner from '../components/Banners/SuccessBanner';\nimport ErrorBanner from '../components/Banners/ErrorBanner';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport ViewListIcon from '@material-ui/icons/ViewList';\n\nimport universalPost from '../universalHTTPRequests/post.js';\nimport universalFetch from '../universalHTTPRequests/get.js';\nimport universalDelete from '../universalHTTPRequests/delete.js';\n//  setResponse, endpoint, onError, onSuccess, requestBody\n\nconst drawerWidth = 250;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    exitButton: {\n        margin: theme.spacing(2),\n        borderStyle: 'solid',\n        borderColor: 'white',\n        border: 2,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    hide: {\n        display: 'none',\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n    container: {\n        marginTop: theme.spacing(1),\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    bannerContainer: {\n        marginTop: theme.spacing(1),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    title: {\n        textAlign: 'center',\n    },\n    copyright: {\n        margin: theme.spacing(2),\n        opacity: 0.5,\n    },\n    addPageButton: {\n        margin: theme.spacing(2),\n        textTransform: 'unset',\n        border: 'solid 3px',\n        borderColor: theme.palette.primary.light,\n    },\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-end',\n    },\n    content1: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginLeft: -drawerWidth,\n    },\n    contentShift: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginLeft: 0,\n    },\n    issue: {\n        marginTop: theme.spacing(10),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    errorContainer: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    iconError: {\n        paddingRight: theme.spacing(2),\n        fontSize: '75px',\n    },\n    iconRefreshLarge: {\n        fontSize: '75px',\n    },\n    iconRefreshSmall: {\n        fontSize: '30px',\n    },\n}));\n\nEditor.propTypes = {\n    location: PropTypes.any,\n};\n\nexport default function Editor(props) {\n    const [showComponent, setShowComponent] = useState(true);\n    const [openPopup, setOpenPopup] = useState(false);\n    const [openToDo, setOpenToDo] = useState(false);\n\n    const location = useLocation();\n    const scenarioIDFromURL = location.pathname.split('/').pop();\n    const scenario_ID = props.location.data\n        ? props.location.data.SCENARIO\n        : scenarioIDFromURL;\n\n    //TODO when version control is implemented\n    const tempVersionID = 1;\n\n    const [getValues, setGetValues] = useState({\n        data: null,\n        loading: true,\n        error: null,\n    });\n\n    // eslint-disable-next-line\n    const [deleteValues, setDeleteValues] = useState({\n        data: null,\n        loading: true,\n        error: null,\n    });\n\n    // eslint-disable-next-line\n    const [postValues, setPostValues] = useState({\n        data: null,\n        loading: true,\n        error: null,\n    });\n\n    const [scenarioComponents, setScenarioComponents] = useState([]);\n    const [scenarioComponent, setScenarioComponent] = useState(null);\n    const [showEditor, setShowEditor] = useState(false);\n    const [addNewPageIndex, setAddNewPageIndex] = useState(null);\n    const [currentPageID, setCurrentPageID] = useState(-1);\n\n    let handleLogisticsGet = function handleLogisticsGet() {\n        let initialComponents = [\n            {\n                id: -1,\n                title: 'Logistics',\n                component: <Logistics />,\n            },\n            {\n                id: -2,\n                title: 'Configure Issues',\n                component: <ConfigureIssues />,\n            },\n            {\n                id: -3,\n                title: 'Conversation Editor',\n                component: <ConversationEditor />,\n            },\n            { id: -4, title: 'Flow Diagram', component: <FlowDiagram /> },\n        ];\n\n        const endpoint = '/logistics?scenario_id=' + scenario_ID;\n\n        function onSuccess(resp) {\n            let p = null;\n            let logistics_and_pages = resp.data;\n            p = {\n                scenario_ID: logistics_and_pages.SCENARIO,\n                version_ID: logistics_and_pages.VERSION,\n                title: logistics_and_pages.NAME,\n                is_finished: logistics_and_pages.IS_FINISHED,\n                public_scenario: logistics_and_pages.PUBLIC,\n                num_convos: logistics_and_pages.NUM_CONVERSATION,\n                professors: [logistics_and_pages.PROFESSOR],\n                courses: logistics_and_pages.COURSES,\n            };\n\n            initialComponents[0].component = <Logistics {...p}></Logistics>;\n            initialComponents[1].component = (\n                <ConfigureIssues scenario_ID={p.scenario_ID}></ConfigureIssues>\n            );\n            initialComponents[2].component = (\n                <ConversationEditor\n                    scenario_ID={p.scenario_ID}\n                ></ConversationEditor>\n            );\n            initialComponents[3].component = (\n                <FlowDiagram scenario_ID={p.scenario_ID}></FlowDiagram>\n            );\n\n            let pages = logistics_and_pages.PAGES;\n\n            for (let i = 0; i < pages.length; i++) {\n                //Already have component in initial components\n                if (pages[i].PAGE_TYPE === 'S') {\n                    continue;\n                }\n                //Intro page is first page on sidebar\n                if (pages[i].PAGE_TYPE === 'I') {\n                    initialComponents.splice(4, 0, {\n                        id: pages[i].PAGE,\n                        title: pages[i].PAGE_TITLE,\n                        isIntroPage: true,\n                        component: null,\n                    });\n                } else {\n                    initialComponents.push({\n                        id: pages[i].PAGE,\n                        title: pages[i].PAGE_TITLE,\n                        component: null,\n                    });\n                }\n            }\n            setScenarioComponents(initialComponents);\n            if (addNewPageIndex) {\n                handlePageGet(\n                    setGetValues,\n                    initialComponents[addNewPageIndex].id,\n                    initialComponents\n                );\n                setAddNewPageIndex(null);\n            } else {\n                setScenarioComponent(initialComponents[0].component);\n            }\n            setShowEditor(true);\n        }\n\n        function onFailure() {\n            //console.log('Failed to get logistics info');\n        }\n\n        universalFetch(setGetValues, endpoint, onFailure, onSuccess, {\n            SCENARIO: scenario_ID,\n        });\n    };\n\n    //TODO implement banner\n    function handleDelete(setDeleteValues, d_id) {\n        const endpoint = '/page?page_id=' + d_id;\n        function onSuccess(resp) {\n            setSuccessBannerFade(true);\n            setSuccessBannerMessage('Successfully deleted page!');\n            setShowEditor(true);\n        }\n        function onFailure() {\n            setErrorBannerFade(true);\n            setErrorBannerMessage('Failed to save page! Please try again.');\n        }\n\n        universalDelete(setDeleteValues, endpoint, onFailure, onSuccess, {\n            PAGE: d_id,\n        });\n    }\n\n    function handlePageGet(setGetValues, g_id, scenarioComponentsArray) {\n        const endpoint = '/page?page_id=' + g_id;\n\n        function onSuccess(resp) {\n            let p = null;\n            let c = null;\n\n            let currPageInfo = resp.data;\n            if (currPageInfo.PAGE_TYPE === 'I') {\n                p = {\n                    scenarioComponents: scenarioComponentsArray,\n                    setScenarioComponents: setScenarioComponents,\n                    setCurrentPageID: setCurrentPageID,\n                    page_id: currPageInfo.PAGE,\n                    page_type: currPageInfo.PAGE_TYPE,\n                    page_title: currPageInfo.PAGE_TITLE,\n                    scenario_ID: currPageInfo.SCENARIO,\n                    version_ID: tempVersionID,\n                    next_page_id: currPageInfo.NEXT_PAGE,\n                    body: currPageInfo.PAGE_BODY,\n                    bodies: currPageInfo.BODIES,\n                    xCoord: currPageInfo.X_COORDINATE,\n                    yCoord: currPageInfo.Y_COORDINATE,\n                    created: false,\n                };\n                c = <Introduction {...p}></Introduction>;\n            } else if (currPageInfo.PAGE_TYPE === 'G') {\n                p = {\n                    scenarioComponents: scenarioComponentsArray,\n                    setScenarioComponents: setScenarioComponents,\n                    setCurrentPageID: setCurrentPageID,\n                    page_id: currPageInfo.PAGE,\n                    page_type: currPageInfo.PAGE_TYPE,\n                    page_title: currPageInfo.PAGE_TITLE,\n                    scenario_ID: currPageInfo.SCENARIO,\n                    version_ID: tempVersionID,\n                    next_page_id: currPageInfo.NEXT_PAGE,\n                    body: currPageInfo.PAGE_BODY,\n                    bodies: currPageInfo.BODIES,\n                    xCoord: currPageInfo.X_COORDINATE,\n                    yCoord: currPageInfo.Y_COORDINATE,\n                    created: false,\n                };\n                c = <Generic {...p}></Generic>;\n            } else if (currPageInfo.PAGE_TYPE === 'A') {\n                p = {\n                    scenarioComponents: scenarioComponentsArray,\n                    setScenarioComponents: setScenarioComponents,\n                    setCurrentPageID: setCurrentPageID,\n                    page_id: currPageInfo.PAGE,\n                    page_type: currPageInfo.PAGE_TYPE,\n                    page_title: currPageInfo.PAGE_TITLE,\n                    scenario_ID: currPageInfo.SCENARIO,\n                    next_page_id: currPageInfo.NEXT_PAGE,\n                    version_ID: tempVersionID,\n                    body: currPageInfo.PAGE_BODY,\n                    choice1: currPageInfo.CHOICES[0]\n                        ? currPageInfo.CHOICES[0].CHOICE\n                        : '',\n                    r1: currPageInfo.CHOICES[0]\n                        ? currPageInfo.CHOICES[0].RESULT_PAGE\n                        : null,\n                    choice2: currPageInfo.CHOICES[1]\n                        ? currPageInfo.CHOICES[1].CHOICE\n                        : '',\n                    r2: currPageInfo.CHOICES[1]\n                        ? currPageInfo.CHOICES[1].RESULT_PAGE\n                        : null,\n                    xCoord: currPageInfo.X_COORDINATE,\n                    yCoord: currPageInfo.Y_COORDINATE,\n                    created: false,\n                };\n                c = <Action {...p}></Action>;\n            } else if (currPageInfo.PAGE_TYPE === 'R') {\n                p = {\n                    scenarioComponents: scenarioComponentsArray,\n                    setScenarioComponents: setScenarioComponents,\n                    setCurrentPageID: setCurrentPageID,\n                    page_id: currPageInfo.PAGE,\n                    page_type: currPageInfo.PAGE_TYPE,\n                    page_title: currPageInfo.PAGE_TITLE,\n                    scenario_ID: currPageInfo.SCENARIO,\n                    version_ID: tempVersionID,\n                    next_page_id: currPageInfo.NEXT_PAGE,\n                    body: currPageInfo.PAGE_BODY,\n                    reflection_questions: currPageInfo.REFLECTION_QUESTIONS,\n                    xCoord: currPageInfo.X_COORDINATE,\n                    yCoord: currPageInfo.Y_COORDINATE,\n                    created: false,\n                };\n                c = <Reflection {...p}></Reflection>;\n            }\n\n            let newScenarioComponents = [...scenarioComponentsArray];\n            newScenarioComponents = newScenarioComponents.map((x) =>\n                x.id === resp.data.PAGE ? { ...x, component: c } : x\n            );\n            setCurrentPageID(currPageInfo.PAGE);\n            setScenarioComponents(newScenarioComponents);\n            setScenarioComponent(c);\n            setShowComponent(true);\n        }\n\n        function onFailure() {\n            //console.log('Get failed');\n        }\n\n        universalFetch(setGetValues, endpoint, onFailure, onSuccess, {\n            PAGE: g_id,\n        });\n    }\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const [open, setOpen] = React.useState(false);\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n\n    const WhiteTextTypography = withStyles({\n        root: {\n            color: '#FFFFFF',\n        },\n    })(Typography);\n\n    const BlackTextTypography = withStyles({\n        root: {\n            color: '#000000',\n        },\n    })(Typography);\n\n    const [shouldFetch, setShouldFetch] = useState(0);\n    useEffect(handleLogisticsGet, [shouldFetch]);\n\n    let onClick = (id, title, scenarioPages) => {\n        setCurrentPageID(id);\n        if (id !== -1 && id !== -2 && id !== -3 && id !== -4) {\n            handlePageGet(setGetValues, id, scenarioPages);\n        }\n        setScenarioComponent(\n            scenarioComponents.find((x) => x.id === id).component\n        );\n    };\n\n    const deleteByID = (d_id) => {\n        //If on page that is going to be deleted, redirect back to logistics page\n        if (\n            scenarioComponents.filter((i) => i.id === d_id)[0].id ===\n            currentPageID\n        ) {\n            setCurrentPageID(-1);\n            setScenarioComponent(scenarioComponents[0].component);\n        }\n        setScenarioComponents(scenarioComponents.filter((i) => i.id !== d_id));\n        setShowEditor(false);\n        handleDelete(setDeleteValues, d_id);\n    };\n\n    const [successBannerMessage, setSuccessBannerMessage] = useState('');\n    const [successBannerFade, setSuccessBannerFade] = useState(false);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setSuccessBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [successBannerFade]);\n\n    const [errorBannerMessage, setErrorBannerMessage] = useState('');\n    const [errorBannerFade, setErrorBannerFade] = useState(false);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setErrorBannerFade(false);\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [errorBannerFade]);\n\n    function Sidebar() {\n        const classes = useStyles();\n\n        const addNewPage = (pageType, pageName, pageBody) => {\n            setShowComponent(false);\n            const endpoint = '/api/pages/';\n            // eslint-disable-next-line\n            let c = null;\n            // eslint-disable-next-line\n            let p = null;\n            let postReqBody;\n\n            function onSuccess(resp) {\n                setAddNewPageIndex(scenarioComponents.length);\n                setShouldFetch(shouldFetch + 1);\n            }\n\n            function onFailure() {\n                setShowEditor(true);\n            }\n\n            switch (pageType) {\n                case 'Generic':\n                    postReqBody = {\n                        PAGE_TYPE: 'G',\n                        PAGE_TITLE: pageName,\n                        PAGE_BODY: pageBody,\n                        SCENARIO: scenario_ID,\n                        VERSION: tempVersionID,\n                        NEXT_PAGE: null,\n                        X_COORDINATE: 0,\n                        Y_COORDINATE: 0,\n                    };\n\n                    p = {\n                        setScenarioComponents: setScenarioComponents,\n                        page_type: 'G',\n                        page_title: pageName,\n                        scenario_ID: scenario_ID,\n                        body: pageBody,\n                        bodies: [],\n                        version_ID: tempVersionID,\n                        next_page_id: null,\n                        created: true,\n                        xCoord: 0,\n                        yCoord: 0,\n                    };\n                    break;\n                case 'Reflection':\n                    postReqBody = {\n                        PAGE_TYPE: 'R',\n                        PAGE_TITLE: pageName,\n                        PAGE_BODY: pageBody,\n                        SCENARIO: scenario_ID,\n                        VERSION: tempVersionID,\n                        NEXT_PAGE: null,\n                        X_COORDINATE: 0,\n                        Y_COORDINATE: 0,\n                    };\n                    p = {\n                        setScenarioComponents: setScenarioComponents,\n                        page_type: 'R',\n                        page_title: pageName,\n                        scenario_ID: scenario_ID,\n                        version_ID: tempVersionID,\n                        next_page_id: null,\n                        body: pageBody,\n                        reflection_questions: [],\n                        created: true,\n                        xCoord: 0,\n                        yCoord: 0,\n                    };\n                    break;\n                case 'Action':\n                    postReqBody = {\n                        PAGE_TYPE: 'A',\n                        PAGE_TITLE: pageName,\n                        PAGE_BODY: pageBody,\n                        SCENARIO: scenario_ID,\n                        VERSION: tempVersionID,\n                        NEXT_PAGE: null,\n                        X_COORDINATE: 0,\n                        Y_COORDINATE: 0,\n                    };\n                    p = {\n                        setScenarioComponents: setScenarioComponents,\n                        page_type: 'A',\n                        page_title: pageName,\n                        scenario_ID: scenario_ID,\n                        version_ID: tempVersionID,\n                        next_page_id: null,\n                        body: pageBody,\n                        choice1: '',\n                        r1: null,\n                        choice2: '',\n                        r2: null,\n                        created: true,\n                        xCoord: 0,\n                        yCoord: 0,\n                    };\n                    break;\n                default:\n                    c = <Typography>Error</Typography>;\n            }\n\n            setShowEditor(false);\n\n            universalPost(\n                setPostValues,\n                endpoint,\n                onFailure,\n                onSuccess,\n                postReqBody\n            );\n        };\n\n        function handleAddNewComponent() {\n            setOpenPopup(true);\n        }\n\n        function openToDoListDialog() {\n            setOpenToDo(true);\n        }\n\n        return (\n            <div>\n                <Drawer\n                    className={classes.drawer}\n                    variant=\"persistent\"\n                    anchor=\"left\"\n                    open={open}\n                    classes={{\n                        paper: classes.drawerPaper,\n                    }}\n                >\n                    <IconButton onClick={handleDrawerClose}>\n                        {theme.direction === 'ltr' ? (\n                            <ChevronLeftIcon />\n                        ) : (\n                            <ChevronRightIcon />\n                        )}\n                        <BlackTextTypography variant=\"h6\">\n                            Hide Menu\n                        </BlackTextTypography>\n                    </IconButton>\n\n                    <NavSideBarList\n                        onClick={onClick}\n                        deleteByID={deleteByID}\n                        scenarioPages={scenarioComponents}\n                    />\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={handleAddNewComponent}\n                        className={classes.addPageButton}\n                    >\n                        <AddIcon />\n                        Add Page\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={openToDoListDialog}\n                        className={classes.addPageButton}\n                    >\n                        <ViewListIcon />\n                        To Do List\n                    </Button>\n                </Drawer>\n                <AddNewSimulationScenarioPageDialog\n                    openPopup={openPopup}\n                    title=\"Add New Page\"\n                    setOpenPopup={setOpenPopup}\n                    addPage={addNewPage}\n                ></AddNewSimulationScenarioPageDialog>\n                <ToDoListDialog\n                    openToDo={openToDo}\n                    setOpenToDo={setOpenToDo}\n                ></ToDoListDialog>\n            </div>\n        );\n    }\n\n    const NavBar = (\n        <div>\n            <CssBaseline />\n            <AppBar\n                position=\"fixed\"\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: open,\n                })}\n            >\n                <Toolbar>\n                    <Box display=\"flex\" flexGrow={1}>\n                        <IconButton\n                            color=\"inherit\"\n                            aria-label=\"open drawer\"\n                            onClick={handleDrawerOpen}\n                            edge=\"start\"\n                            className={clsx(\n                                classes.menuButton,\n                                open && classes.hide\n                            )}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n\n                        <Typography variant=\"h4\" noWrap>\n                            Ethisim Scenario Editor\n                        </Typography>\n                    </Box>\n\n                    <Button\n                        component={Link}\n                        to={{\n                            pathname: '/dashboard',\n                        }}\n                        className={classes.exitButton}\n                    >\n                        <WhiteTextTypography noWrap>\n                            Return to Dashboard\n                        </WhiteTextTypography>\n                    </Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n\n    if (getValues.error) {\n        return (\n            <div>\n                {NavBar}\n                <div className={classes.issue}>\n                    <div className={classes.container}>\n                        <ErrorIcon className={classes.iconError} />\n                        <Typography align=\"center\" variant=\"h3\">\n                            Error in fetching Scenario Data.\n                        </Typography>\n                    </div>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={handleLogisticsGet}\n                    >\n                        <RefreshIcon className={classes.iconRefreshLarge} />\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    if (showEditor === false) {\n        return <LoadingSpinner />;\n    }\n\n    return (\n        <div className={classes.container}>\n            {NavBar}\n            <Sidebar />\n            <main\n                className={clsx(classes.content1, {\n                    [classes.contentShift]: open,\n                })}\n            >\n                <div className={classes.drawerHeader} />\n                <div className={classes.bannerContainer}>\n                    <SuccessBanner\n                        successMessage={successBannerMessage}\n                        fade={successBannerFade}\n                    />\n                    <ErrorBanner\n                        errorMessage={errorBannerMessage}\n                        fade={errorBannerFade}\n                    />\n                </div>\n                {!getValues.data ||\n                scenarioComponent === null ||\n                getValues.loading ||\n                !showComponent ? (\n                    <LoadingSpinner />\n                ) : (\n                    <div>{scenarioComponent}</div>\n                )}\n            </main>\n        </div>\n    );\n}\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Typography } from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box';\r\nimport PropTypes from 'prop-types';\r\n\r\nQuestionField.propTypes = {\r\n    question: PropTypes.string,\r\n    response: PropTypes.string,\r\n    id: PropTypes.number,\r\n    removeQuestion: PropTypes.any,\r\n    listOfQuestions: PropTypes.any,\r\n    setListOfQuestions: PropTypes.any,\r\n};\r\n\r\nexport default function QuestionField({ question, response }) {\r\n    return (\r\n        <div>\r\n            <Box\r\n                display=\"flex\"\r\n                flexDirection=\"row\"\r\n                p={1}\r\n                m={1}\r\n                bgcolor=\"background.paper\"\r\n                style={{ width: '100%' }}\r\n            >\r\n                <Box p={1} style={{ width: '100%' }}>\r\n                    <Typography align=\"center\" variant=\"h6\">\r\n                        {question}\r\n                    </Typography>\r\n                    <TextField\r\n                        style={{ width: '100%' }}\r\n                        id=\"outlined-multiline-static\"\r\n                        multiline\r\n                        rows={2}\r\n                        variant=\"outlined\"\r\n                        value={response}\r\n                    />\r\n                </Box>\r\n            </Box>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport QuestionResponseField from './QuestionResponseField';\r\nimport PropTypes from 'prop-types';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nReflectionResponse.propTypes = {\r\n    studentReflections: PropTypes.any,\r\n};\r\n\r\nexport default function ReflectionResponse({ studentReflections }) {\r\n    //questionsResponses is an array of object in format {question: string, response: string}\r\n    const questionResponsesWithID = studentReflections.questionResponses.map(\r\n        function (data, index) {\r\n            //setID(id + 1);\r\n            return {\r\n                question: data.question,\r\n                response: data.response,\r\n                id: index,\r\n            };\r\n        }\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <Typography align=\"center\" variant=\"h3\">\r\n                {studentReflections.title}\r\n            </Typography>\r\n            {questionResponsesWithID.map((data) => (\r\n                <QuestionResponseField\r\n                    key={data.id}\r\n                    id={data.id}\r\n                    question={data.question}\r\n                    response={data.response}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Typography,\r\n    Container,\r\n    FormControlLabel,\r\n    Checkbox,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    form: {\r\n        marginTop: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    submit: {\r\n        marginTop: theme.spacing(2),\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: 'white',\r\n        textTransform: 'unset',\r\n    },\r\n    saveButton: {\r\n        margin: theme.spacing(2),\r\n        float: 'right',\r\n        textTransform: 'unset',\r\n    },\r\n}));\r\n\r\nActionStudentResponse.propTypes = {\r\n    option1: PropTypes.string,\r\n    option2: PropTypes.string,\r\n    choice: PropTypes.number,\r\n    title: PropTypes.string,\r\n};\r\n\r\nexport default function ActionStudentResponse({\r\n    option1,\r\n    option2,\r\n    choice,\r\n    title,\r\n}) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\">\r\n            <Typography align=\"center\" variant=\"h3\">\r\n                {title}\r\n            </Typography>\r\n            <div className={classes.container}>\r\n                <FormControlLabel\r\n                    value=\"start\"\r\n                    control={\r\n                        <Checkbox color=\"primary\" checked={choice === 1} />\r\n                    }\r\n                    label={option1}\r\n                    labelPlacement=\"start\"\r\n                />\r\n                <FormControlLabel\r\n                    value=\"start\"\r\n                    control={\r\n                        <Checkbox color=\"primary\" checked={choice === 2} />\r\n                    }\r\n                    label={option2}\r\n                    labelPlacement=\"start\"\r\n                />\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button, Grid } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    pageButton: {\r\n        width: '100%',\r\n        minHeight: '50px',\r\n        border: '3px solid',\r\n        borderColor: theme.palette.primary.light,\r\n        textTransform: 'unset',\r\n    },\r\n    deleteButtonContainer: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    deleteButton: {\r\n        minWidth: '40px',\r\n        border: '3px solid',\r\n        borderColor: theme.palette.primary.main,\r\n        backgroundColor: theme.palette.primary.light,\r\n    },\r\n}));\r\n\r\nNavSideBarNode.propTypes = {\r\n    onClick: PropTypes.any.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    page: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default function NavSideBarNode(props) {\r\n    const classes = useStyles();\r\n    NavSideBarNode.propTypes = props.data;\r\n    const data = props;\r\n    const { onClick, title, page } = data;\r\n\r\n    function handleDisplayComponent() {\r\n        onClick(page);\r\n    }\r\n\r\n    function pageType(title) {\r\n        return (\r\n            <Grid container direction=\"row\" justify=\"flex-start\">\r\n                <Grid item xs={12}>\r\n                    <Button\r\n                        className={classes.pageButton}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleDisplayComponent}\r\n                    >\r\n                        {title}\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    return <div>{pageType(title)}</div>;\r\n}\r\n","import React from 'react';\r\nimport NavSideBarNode from './NavSideBarListNode';\r\nimport PropTypes from 'prop-types';\r\n\r\nNavSideBarList.propTypes = {\r\n    onClick: PropTypes.any.isRequired,\r\n    deleteByID: PropTypes.any.isRequired,\r\n    scenarioPages: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default function NavSideBarList(props) {\r\n    NavSideBarList.propTypes = props.data;\r\n    const data = props;\r\n    const { studentResponsePages, onClick } = data;\r\n\r\n    return (\r\n        <div>\r\n            {studentResponsePages.map((studentResponsePage) => (\r\n                <NavSideBarNode\r\n                    key={studentResponsePage.id}\r\n                    onClick={onClick}\r\n                    {...studentResponsePage}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","const mockComponentsFlowChart = {\r\n    scenarioId: 2,\r\n    components: [\r\n        {\r\n            id: '1',\r\n            type: 'Generic',\r\n            title: 'Simulation Introduction',\r\n            position: { x: 0, y: 0 },\r\n        },\r\n        {\r\n            id: '2',\r\n            type: 'Generic',\r\n            title: 'Project Task Assignment',\r\n            position: { x: 0, y: 0 },\r\n        },\r\n        {\r\n            id: '3',\r\n            type: 'Reflection',\r\n            title: 'Initial Reflection',\r\n            position: { x: 0, y: 0 },\r\n        },\r\n        {\r\n            id: '4',\r\n            type: 'Reflection',\r\n            title: 'Middle Reflection',\r\n            position: { x: 0, y: 0 },\r\n        },\r\n        {\r\n            id: '5',\r\n            type: 'Reflection',\r\n            title: 'Final Reflection',\r\n            position: { x: 0, y: 0 },\r\n        },\r\n        {\r\n            id: '6',\r\n            type: 'Action',\r\n            title: 'Initial action',\r\n            position: { x: 0, y: 0 },\r\n        },\r\n        {\r\n            id: '7',\r\n            type: 'Action',\r\n            title: 'Final Action',\r\n            position: { x: 0, y: 0 },\r\n        },\r\n        {\r\n            id: '8',\r\n            type: 'Conversation',\r\n            title: 'Stakeholder Conversations',\r\n            position: { x: 0, y: 0 },\r\n        },\r\n        {\r\n            id: '9',\r\n            type: 'Generic',\r\n            title: 'Conclusion',\r\n            position: { x: 0, y: 0 },\r\n        },\r\n        {\r\n            id: '10',\r\n            type: 'Generic',\r\n            title: 'Consequences',\r\n            position: { x: 0, y: 0 },\r\n        },\r\n    ],\r\n};\r\n\r\nconst mockGenericHistory = {\r\n    type: 'Generic',\r\n    history: [\r\n        {\r\n            type: 'Generic',\r\n            title: 'Marius Minea Version Control Introduction',\r\n            body:\r\n                '<p><span style=\"font-size: 28px;\"><em><u><strong>VERSION CONTROL WORKS #1</strong></u></em></span><em></em><br></p>',\r\n            date: new Date().getTime(),\r\n            author: 'Marius Minea',\r\n            id: 1,\r\n        },\r\n        {\r\n            type: 'Generic',\r\n            title: 'David Fisher Version Control Introduction',\r\n            body:\r\n                '<p><span style=\"font-size: 28px;\"><em><u><strong>VERSION CONTROL WORKS #2</strong></u></em></span><em></em><br></p>',\r\n            date: new Date().getTime() - 300000,\r\n            author: 'David Fisher',\r\n            id: 2,\r\n        },\r\n        {\r\n            type: 'Generic',\r\n            title: 'Marius Minea Version Control Introduction',\r\n            body:\r\n                '<p><span style=\"font-size: 28px;\"><em><u><strong>VERSION CONTROL WORKS #1</strong></u></em></span><em></em><br></p>',\r\n            date: new Date().getTime() - 400000,\r\n            author: 'Marius Minea',\r\n            id: 3,\r\n        },\r\n        {\r\n            type: 'Generic',\r\n            title: 'David Fisher Version Control Introduction',\r\n            body:\r\n                '<p><span style=\"font-size: 28px;\"><em><u><strong>VERSION CONTROL WORKS #2</strong></u></em></span><em></em><br></p>',\r\n            date: new Date().getTime() - 500000,\r\n            author: 'David Fisher',\r\n            id: 4,\r\n        },\r\n        {\r\n            type: 'Generic',\r\n            title: 'Marius Minea Version Control Introduction',\r\n            body:\r\n                '<p><span style=\"font-size: 28px;\"><em><u><strong>VERSION CONTROL WORKS #1</strong></u></em></span><em></em><br></p>',\r\n            date: new Date().getTime() - 600000,\r\n            author: 'Marius Minea',\r\n            id: 5,\r\n        },\r\n        {\r\n            type: 'Generic',\r\n            title: 'David Fisher Version Control Introduction',\r\n            body:\r\n                '<p><span style=\"font-size: 28px;\"><em><u><strong>VERSION CONTROL WORKS #2</strong></u></em></span><em></em><br></p>',\r\n            date: new Date().getTime() - 700000,\r\n            author: 'David Fisher',\r\n            id: 6,\r\n        },\r\n        {\r\n            type: 'Generic',\r\n            title: 'Marius Minea Version Control Introduction',\r\n            body:\r\n                '<p><span style=\"font-size: 28px;\"><em><u><strong>VERSION CONTROL WORKS #1</strong></u></em></span><em></em><br></p>',\r\n            date: new Date().getTime() - 800000,\r\n            author: 'Marius Minea',\r\n            id: 7,\r\n        },\r\n        {\r\n            type: 'Generic',\r\n            title: 'David Fisher Version Control Introduction',\r\n            body:\r\n                '<p><span style=\"font-size: 28px;\"><em><u><strong>VERSION CONTROL WORKS #2</strong></u></em></span><em></em><br></p>',\r\n            date: new Date().getTime() - 900000,\r\n            author: 'David Fisher',\r\n            id: 8,\r\n        },\r\n    ],\r\n};\r\n\r\nconst mockReflectionHistory = {\r\n    type: 'Reflection',\r\n    history: [\r\n        {\r\n            type: 'Reflection',\r\n            title: 'David Barrington Version Control Introduction',\r\n            body:\r\n                '<p><span style=\"font-size: 28px;\"><em><u><strong>VERSION CONTROL WORKS #1</strong></u></em></span><em></em><br></p>',\r\n            date: new Date().getTime(),\r\n            questions: ['How do you feel?', 'Do you like this?'],\r\n            author: 'David Barrington',\r\n            id: 1,\r\n        },\r\n        {\r\n            type: 'Reflection',\r\n            title: 'David Fisher Version Control Introduction',\r\n            body:\r\n                '<p><span style=\"font-size: 28px;\"><em><u><strong>VERSION CONTROL WORKS #2</strong></u></em></span><em></em><br></p>',\r\n            date: new Date().getTime() - 2000000,\r\n            questions: ['How do you feel?', 'Do you like this?'],\r\n            author: 'David Fisher',\r\n            id: 2,\r\n        },\r\n    ],\r\n};\r\n\r\nconst mockActionHistory = {\r\n    type: 'Action',\r\n    history: [\r\n        {\r\n            type: 'Action',\r\n            title: 'David Fisher Version Control Introduction',\r\n            body:\r\n                '<p><span style=\"font-size: 28px;\"><em><u><strong>VERSION CONTROL WORKS #1</strong></u></em></span><em></em><br></p>',\r\n            option1: 'Go Ahead',\r\n            option2: 'Wait',\r\n            date: new Date().getTime(),\r\n            author: 'David Fisher',\r\n            id: 1,\r\n        },\r\n        {\r\n            type: 'Action',\r\n            title: 'Gordan Anderson Version Control Introduction',\r\n            body:\r\n                '<p><span style=\"font-size: 28px;\"><em><u><strong>VERSION CONTROL WORKS #2</strong></u></em></span><em></em><br></p>',\r\n            option1: 'Die',\r\n            option2: 'Live',\r\n            date: new Date().getTime() - 1000000,\r\n            author: 'Gordan Anderson',\r\n            id: 2,\r\n        },\r\n    ],\r\n};\r\n\r\nconst mockIssuesHistory = {\r\n    type: 'Issues',\r\n    history: [\r\n        {\r\n            date: new Date().getTime(),\r\n            author: 'Marius Minea',\r\n            id: 1,\r\n            issues: [\r\n                {\r\n                    ISSUE_ID: 1,\r\n                    NAME: 'Personal Wealth',\r\n                    IMPORTANCE_SCORE: 1,\r\n                    SCENARIO_ID: 1,\r\n                    VERSION_ID: 2,\r\n                },\r\n                {\r\n                    ISSUE_ID: 2,\r\n                    NAME: 'User Privacy',\r\n                    IMPORTANCE_SCORE: 5,\r\n                    SCENARIO_ID: 1,\r\n                    VERSION_ID: 2,\r\n                },\r\n                {\r\n                    ISSUE_ID: 3,\r\n                    NAME: 'Career Building Opportunity',\r\n                    IMPORTANCE_SCORE: 2,\r\n                    SCENARIO_ID: 1,\r\n                    VERSION_ID: 2,\r\n                },\r\n                {\r\n                    ISSUE_ID: 4,\r\n                    NAME: 'Project Harms Career',\r\n                    IMPORTANCE_SCORE: 2,\r\n                    SCENARIO_ID: 1,\r\n                    VERSION_ID: 2,\r\n                },\r\n                {\r\n                    ISSUE_ID: 5,\r\n                    NAME: 'Short Term Company Profits',\r\n                    IMPORTANCE_SCORE: 2,\r\n                    SCENARIO_ID: 1,\r\n                    VERSION_ID: 2,\r\n                },\r\n                {\r\n                    ISSUE_ID: 6,\r\n                    NAME: 'Long Term Company Profits',\r\n                    IMPORTANCE_SCORE: 2,\r\n                    SCENARIO_ID: 1,\r\n                    VERSION_ID: 2,\r\n                },\r\n                {\r\n                    ISSUE_ID: 7,\r\n                    NAME: 'User Health Improvement',\r\n                    IMPORTANCE_SCORE: 2,\r\n                    SCENARIO_ID: 1,\r\n                    VERSION_ID: 2,\r\n                },\r\n            ],\r\n        },\r\n    ],\r\n};\r\n\r\nconst mockConversationEditorHistory = {\r\n    history: [\r\n        {\r\n            date: new Date().getTime(),\r\n            author: 'Marius Minea',\r\n            id: 1,\r\n            stakeholders: [\r\n                {\r\n                    id: 1,\r\n                    name: 'Da Big Cheeze',\r\n                    bio: 'Spiffy',\r\n                    mainConvo: 'Big Spiffy',\r\n                    questionsResponses: [\r\n                        {\r\n                            question: 'Do you like this idea?',\r\n                            response: \"Yes, I love stealing everyone's data\",\r\n                        },\r\n                        {\r\n                            question: 'Do you like this idea?',\r\n                            response: \"Yes, I love stealing everyone's data\",\r\n                        },\r\n                    ],\r\n                    stakeHolderIssues: [\r\n                        {\r\n                            id: 1,\r\n                            issue: 'Personal Wealth',\r\n                            stakeHolderScore: 3,\r\n                        },\r\n                        {\r\n                            id: 2,\r\n                            issue: 'Privacy',\r\n                            stakeHolderScore: 4,\r\n                        },\r\n                    ],\r\n                },\r\n            ],\r\n        },\r\n    ],\r\n};\r\n\r\nconst mockGenericComponent = {\r\n    type: 'Generic',\r\n    id: 5,\r\n    title: 'Introduction',\r\n    body: 'Sample Introduction for Generic Component',\r\n};\r\n\r\nconst mockReflectionComponent = {\r\n    type: 'Reflection',\r\n    id: 6,\r\n    title: 'Initial Reflection',\r\n    body: 'Sample Introduction for Reflection Component',\r\n};\r\n\r\nconst mockActionComponent = {\r\n    type: 'Action',\r\n    id: 7,\r\n    title: 'Initial Action',\r\n    body: 'Sample Introduction for Action Component',\r\n};\r\n\r\nconst mockUnfinishedScenario = {\r\n    id: 1,\r\n    scenarioName: 'Unfinished Scenario',\r\n    className: 'CS320',\r\n    authors: ['David Fisher', 'Peter Haas', 'Lee Osterweil'],\r\n    finished: false,\r\n};\r\n\r\nconst mockUnfinishedScenarioData = {\r\n    id: 1,\r\n    authors: ['David Fisher', 'Peter Haas', 'Lee Osterweil'],\r\n    components: [\r\n        mockGenericComponent,\r\n        mockReflectionComponent,\r\n        mockActionComponent,\r\n    ],\r\n    finished: false,\r\n};\r\n\r\nconst mockFinishedScenario = {\r\n    id: 2,\r\n    scenarioName: 'Finished Scenario',\r\n    className: 'CS320',\r\n    authors: ['David Fisher', 'Peter Haas', 'Lee Osterweil'],\r\n    finished: true,\r\n};\r\n\r\nconst mockFinishedScenarioData = {\r\n    id: 2,\r\n    authors: ['David Fisher', 'Peter Haas', 'Lee Osterweil'],\r\n    components: [\r\n        mockGenericComponent,\r\n        mockReflectionComponent,\r\n        mockActionComponent,\r\n    ],\r\n    finished: true,\r\n};\r\n\r\nconst mockFinishedScenarioStudentResponse = {\r\n    id: 0,\r\n    actions: [\r\n        {\r\n            id: 0,\r\n            title: 'Initial Action',\r\n            option1: 'Go ahead with the project.',\r\n            option2: 'Wait and talk with stakeholders.',\r\n            choice: 2,\r\n        },\r\n        {\r\n            id: 1,\r\n            title: 'Final  Action',\r\n            option1: 'Go ahead with the project.',\r\n            option2: 'Wait and talk with team members.',\r\n            choice: 2,\r\n        },\r\n    ],\r\n    reflections: [\r\n        {\r\n            id: 2,\r\n            title: 'Initial Reflection',\r\n            questionResponses: [\r\n                {\r\n                    question:\r\n                        'What are some ethical issues that may arise from this project task assignment?',\r\n                    response: 'I believe user privacy will be a major issue.',\r\n                },\r\n                {\r\n                    question:\r\n                        'Have you ever thought of the ethical issues you answered above in your day-to-day life?',\r\n                    response: 'No.',\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            id: 3,\r\n            title: 'Final Reflection',\r\n            questionResponses: [\r\n                {\r\n                    question:\r\n                        'What is some information you believe that you still need to know in order to proceed?',\r\n                    response:\r\n                        'I still need information about how this technology could impact vulnerable people.',\r\n                },\r\n                {\r\n                    question: 'What ethical issues did you explore?',\r\n                    response:\r\n                        'I explored how my project task assignment could affect user privacy, short-term and long-term company profits, personal wealth, and environmental issues.',\r\n                },\r\n            ],\r\n        },\r\n    ],\r\n};\r\n\r\nconst mockStudents = [\r\n    {\r\n        name: 'Enoch Hsiao',\r\n        age: 19,\r\n        grade: 'Sophomore',\r\n        gender: 'Male',\r\n        race: 'N/A',\r\n        major: 'Computer Science',\r\n        id: 0,\r\n    },\r\n    {\r\n        name: 'John Smith',\r\n        age: 20,\r\n        grade: 'Sophomore',\r\n        gender: 'Male',\r\n        race: 'N/A',\r\n        major: 'Computer Science',\r\n        id: 1,\r\n    },\r\n    {\r\n        name: 'Susie Lee',\r\n        age: 21,\r\n        grade: 'Junior',\r\n        gender: 'Female',\r\n        race: 'N/A',\r\n        major: 'Computer Science',\r\n        id: 2,\r\n    },\r\n    {\r\n        name: 'Rebecca Curr',\r\n        age: 19,\r\n        grade: 'Freshman',\r\n        gender: 'Female',\r\n        race: 'N/A',\r\n        major: 'Computer Science',\r\n        id: 3,\r\n    },\r\n    {\r\n        name: 'Sean Parker',\r\n        age: 22,\r\n        grade: 'Senior',\r\n        gender: 'Male',\r\n        race: 'N/A',\r\n        major: 'Computer Science',\r\n        id: 4,\r\n    },\r\n    {\r\n        name: 'Vicenzo lar',\r\n        age: 20,\r\n        grade: 'Junior',\r\n        gender: 'Male',\r\n        race: 'N/A',\r\n        major: 'Computer Science',\r\n        id: 5,\r\n    },\r\n    {\r\n        name: 'Filler1',\r\n        age: 20,\r\n        grade: 'Junior',\r\n        gender: 'Female',\r\n        race: 'N/A',\r\n        major: 'Computer Science',\r\n        id: 6,\r\n    },\r\n    {\r\n        name: 'Filler2',\r\n        age: 20,\r\n        grade: 'Junior',\r\n        gender: 'Female',\r\n        race: 'N/A',\r\n        major: 'Computer Science',\r\n        id: 7,\r\n    },\r\n    {\r\n        name: 'Filler3',\r\n        age: 20,\r\n        grade: 'Junior',\r\n        gender: 'Female',\r\n        race: 'N/A',\r\n        major: 'Computer Science',\r\n        id: 8,\r\n    },\r\n    {\r\n        name: 'Filler4',\r\n        age: 20,\r\n        grade: 'Junior',\r\n        gender: 'Female',\r\n        race: 'N/A',\r\n        major: 'Computer Science',\r\n        id: 9,\r\n    },\r\n    {\r\n        name: 'Filler5',\r\n        age: 20,\r\n        grade: 'Junior',\r\n        gender: 'Male',\r\n        race: 'N/A',\r\n        major: 'Math',\r\n        id: 10,\r\n    },\r\n    {\r\n        name: 'Filler6',\r\n        age: 20,\r\n        grade: 'Junior',\r\n        gender: 'Male',\r\n        race: 'N/A',\r\n        major: 'Math',\r\n        id: 11,\r\n    },\r\n];\r\n\r\nexport {\r\n    mockUnfinishedScenarioData,\r\n    mockFinishedScenarioData,\r\n    mockUnfinishedScenario,\r\n    mockFinishedScenario,\r\n    mockActionHistory,\r\n    mockGenericHistory,\r\n    mockReflectionHistory,\r\n    mockIssuesHistory,\r\n    mockGenericComponent,\r\n    mockActionComponent,\r\n    mockReflectionComponent,\r\n    mockConversationEditorHistory,\r\n    mockFinishedScenarioStudentResponse,\r\n    mockStudents,\r\n    mockComponentsFlowChart,\r\n};\r\n","import React, { useState } from 'react';\r\nimport { makeStyles, useTheme, withStyles } from '@material-ui/core/styles';\r\nimport { Drawer, Box, Button, Typography, Dialog } from '@material-ui/core';\r\nimport clsx from 'clsx';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ReflectionResponse from './ReflectionResponseComponent/ReflectionResponse';\r\nimport ActionResponse from './ActionResponseComponent/ActionResponse';\r\nimport NavSideBarList from './SideBar/NavSideBarList';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport PropTypes from 'prop-types';\r\nimport { mockFinishedScenarioStudentResponse } from '../../shared/mockScenarioData';\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    exitButton: {\r\n        margin: theme.spacing(2),\r\n        borderStyle: 'solid',\r\n        borderColor: 'white',\r\n        border: 2,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n    container: {\r\n        marginTop: theme.spacing(1),\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n    },\r\n    title: {\r\n        textAlign: 'center',\r\n    },\r\n    copyright: {\r\n        margin: theme.spacing(2),\r\n        opacity: 0.5,\r\n    },\r\n    addPageButton: {\r\n        margin: theme.spacing(2),\r\n        textTransform: 'unset',\r\n        border: 'solid 3px',\r\n        borderColor: theme.palette.primary.light,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    content1: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: drawerWidth,\r\n    },\r\n    closeDialogButton: {\r\n        color: 'white',\r\n        fontSize: '42px',\r\n    },\r\n}));\r\n\r\nconst addPage = (array, id, title, componentType, data) => {\r\n    var c = null;\r\n    switch (componentType) {\r\n        case 'Reflection':\r\n            c = <ReflectionResponse studentReflections={data} />;\r\n            break;\r\n        case 'Action':\r\n            c = (\r\n                <ActionResponse\r\n                    option1={data.option1}\r\n                    option2={data.option2}\r\n                    choice={data.choice}\r\n                    title={title}\r\n                />\r\n            );\r\n            break;\r\n        default:\r\n            c = <Typography>Error</Typography>;\r\n    }\r\n    return array.concat({ id, title, page: c });\r\n};\r\n\r\nData.propTypes = {\r\n    open: PropTypes.any,\r\n    selectedResponseData: PropTypes.any,\r\n    handleClose: PropTypes.any,\r\n};\r\n\r\nexport default function Data({ open, selectedResponseData, handleClose }) {\r\n    const classes = useStyles();\r\n    const { NAME } = selectedResponseData;\r\n    const [openDrawer, setOpenDrawer] = React.useState(true);\r\n    const theme = useTheme();\r\n    const handleDrawerOpen = () => {\r\n        setOpenDrawer(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpenDrawer(false);\r\n    };\r\n\r\n    const BlackTextTypography = withStyles({\r\n        root: {\r\n            color: '#000000',\r\n        },\r\n    })(Typography);\r\n\r\n    //Fake fetch of scenarioData with components\r\n    let fetchedStudentResponses = mockFinishedScenarioStudentResponse;\r\n    let reflectionResponses = fetchedStudentResponses.reflections;\r\n    let actionResponses = fetchedStudentResponses.actions;\r\n    actionResponses = actionResponses.reduce((result, currentValue) => {\r\n        return addPage(\r\n            result,\r\n            currentValue.id,\r\n            currentValue.title,\r\n            'Action',\r\n            currentValue\r\n        );\r\n    }, []);\r\n    let studentResponsePages = reflectionResponses.reduce(\r\n        (result, currentValue) => {\r\n            return addPage(\r\n                result,\r\n                currentValue.id,\r\n                currentValue.title,\r\n                'Reflection',\r\n                currentValue\r\n            );\r\n        },\r\n        actionResponses\r\n    );\r\n\r\n    const [studentResponsePage, setStudentResponsePage] = useState(\r\n        studentResponsePages[0].page\r\n    );\r\n    function Sidebar() {\r\n        const classes = useStyles();\r\n\r\n        const onClick = function (component) {\r\n            setStudentResponsePage(component);\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <Drawer\r\n                    className={classes.drawer}\r\n                    variant=\"persistent\"\r\n                    anchor=\"left\"\r\n                    open={openDrawer}\r\n                    classes={{\r\n                        paper: classes.drawerPaper,\r\n                    }}\r\n                >\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        {theme.direction === 'ltr' ? (\r\n                            <ChevronLeftIcon />\r\n                        ) : (\r\n                            <ChevronRightIcon />\r\n                        )}\r\n                        <BlackTextTypography variant=\"h6\">\r\n                            Hide Menu\r\n                        </BlackTextTypography>\r\n                    </IconButton>\r\n\r\n                    <NavSideBarList\r\n                        onClick={onClick}\r\n                        studentResponsePages={studentResponsePages}\r\n                    />\r\n                </Drawer>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            onClose={handleClose}\r\n            aria-labelledby=\"customized-dialog-title\"\r\n            open={open}\r\n            fullScreen={true}\r\n        >\r\n            <CssBaseline />\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: openDrawer,\r\n                })}\r\n            >\r\n                <Toolbar>\r\n                    <Box display=\"flex\" flexGrow={1}>\r\n                        <IconButton\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            edge=\"start\"\r\n                            className={clsx(\r\n                                classes.menuButton,\r\n                                openDrawer && classes.hide\r\n                            )}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n\r\n                        <Typography variant=\"h4\" noWrap>\r\n                            {NAME + \"'s Responses\"}\r\n                        </Typography>\r\n                    </Box>\r\n\r\n                    <Button\r\n                        onClick={handleClose}\r\n                        className={classes.closeButton}\r\n                    >\r\n                        <ExitToAppIcon className={classes.closeDialogButton} />\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Sidebar />\r\n\r\n            <main\r\n                className={clsx(classes.content1, {\r\n                    [classes.contentShift]: openDrawer,\r\n                })}\r\n            >\r\n                <div className={classes.drawerHeader} />\r\n                {studentResponsePage}\r\n            </main>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Container,\r\n    Box,\r\n    Button,\r\n    Typography,\r\n    CssBaseline,\r\n    AppBar,\r\n    Toolbar,\r\n} from '@material-ui/core';\r\nimport Copyright from '../components/Copyright';\r\nimport PropTypes from 'prop-types';\r\nimport MaterialTable from 'material-table';\r\nimport { forwardRef } from 'react';\r\nimport StudentResponseDialog from '../components/StudentResponsesComponents/StudentResposeDialog';\r\nimport './data.css';\r\nimport { Link } from 'react-router-dom';\r\nimport get from '../universalHTTPRequests/get';\r\nimport LoadingSpinner from '../components/LoadingSpinner';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport RateReviewIcon from '@material-ui/icons/RateReview';\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => (\r\n        <ChevronRight {...props} ref={ref} />\r\n    )),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => (\r\n        <ChevronLeft {...props} ref={ref} />\r\n    )),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => (\r\n        <ArrowDownward {...props} ref={ref} />\r\n    )),\r\n    ThirdStateCheck: forwardRef((props, ref) => (\r\n        <Remove {...props} ref={ref} />\r\n    )),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n    RateReview: forwardRef((props, ref) => (\r\n        <RateReviewIcon {...props} ref={ref} />\r\n    )),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        marginTop: theme.spacing(12),\r\n        textAlign: 'center',\r\n    },\r\n    button: {\r\n        marginBottom: theme.spacing(1),\r\n        textTransform: 'unset',\r\n    },\r\n    exitButton: {\r\n        margin: theme.spacing(2),\r\n        borderStyle: 'solid',\r\n        borderColor: 'white',\r\n        border: 2,\r\n    },\r\n    title: {\r\n        textAlign: 'center',\r\n    },\r\n    copyright: {\r\n        margin: theme.spacing(2),\r\n    },\r\n    issue: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    errorContainer: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    iconError: {\r\n        paddingRight: theme.spacing(2),\r\n        fontSize: '75px',\r\n    },\r\n    iconRefreshLarge: {\r\n        fontSize: '75px',\r\n    },\r\n    iconRefreshSmall: {\r\n        fontSize: '30px',\r\n    },\r\n}));\r\n\r\nData.propTypes = {\r\n    location: PropTypes.any,\r\n};\r\n\r\n//Needs scenario id\r\nconst endpointGET = '/student_info?scenario_id=';\r\n\r\nexport default function Data(props) {\r\n    const classes = useStyles();\r\n\r\n    const location = useLocation();\r\n    const scenarioIDFromURL = location.pathname.split('/').pop();\r\n    const scenario_ID = props.location.data\r\n        ? props.location.data.SCENARIO\r\n        : scenarioIDFromURL;\r\n\r\n    const title = 'Student Data';\r\n    const [open, setOpen] = useState(false);\r\n    const [selectedResponseData, setSelectedResponseData] = useState({});\r\n\r\n    const [studentList, setStudentList] = useState({\r\n        data: null,\r\n        loading: true,\r\n        error: null,\r\n    });\r\n\r\n    let getData = () => {\r\n        get(setStudentList, endpointGET + scenario_ID);\r\n    };\r\n\r\n    useEffect(getData, []);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const WhiteTextTypography = withStyles({\r\n        root: {\r\n            color: '#FFFFFF',\r\n        },\r\n    })(Typography);\r\n\r\n    const NavBar = (\r\n        <div>\r\n            <CssBaseline />\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    <Box display=\"flex\" flexGrow={1}>\r\n                        <Typography variant=\"h4\" noWrap>\r\n                            Student Data\r\n                        </Typography>\r\n                    </Box>\r\n\r\n                    <Button\r\n                        component={Link}\r\n                        to={{\r\n                            pathname: '/dashboard',\r\n                        }}\r\n                        className={classes.exitButton}\r\n                    >\r\n                        <WhiteTextTypography noWrap>\r\n                            Return to Dashboard\r\n                        </WhiteTextTypography>\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n\r\n    if (studentList.loading) {\r\n        return (\r\n            <div>\r\n                {NavBar}\r\n                <div style={{ marginTop: '100px' }}>\r\n                    <LoadingSpinner />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (studentList.error) {\r\n        return (\r\n            <div className={classes.issue}>\r\n                {NavBar}\r\n\r\n                <div className={classes.container}>\r\n                    <ErrorIcon className={classes.iconError} />\r\n                    <Typography align=\"center\" variant=\"h3\">\r\n                        Error in fetching Student Data.\r\n                    </Typography>\r\n                </div>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={getData}>\r\n                    <RefreshIcon className={classes.iconRefreshLarge} />\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" className={classes.container}>\r\n            {NavBar}\r\n\r\n            <StudentResponseDialog\r\n                open={open}\r\n                handleClickOpen={handleClickOpen}\r\n                handleClose={handleClose}\r\n                setSelectedResponseData={setSelectedResponseData}\r\n                selectedResponseData={selectedResponseData}\r\n            />\r\n            <MaterialTable\r\n                icons={tableIcons}\r\n                title={title}\r\n                options={{\r\n                    exportButton: true,\r\n                }}\r\n                actions={[\r\n                    {\r\n                        icon: () => <RateReviewIcon />,\r\n                        tooltip: 'View Student Response',\r\n                        onClick: (event, rowData) => {\r\n                            setOpen(true);\r\n                            setSelectedResponseData(rowData);\r\n                        },\r\n                    },\r\n                ]}\r\n                columns={[\r\n                    { title: 'Name', field: 'NAME' },\r\n                    { title: 'Date Taken', field: 'DATE_TAKEN' },\r\n                    { title: 'Age', field: 'AGE', type: 'numeric' },\r\n                    { title: 'Grade', field: 'GRADE' },\r\n                    { title: 'Gender', field: 'GENDER' },\r\n                    { title: 'Race', field: 'RACE' },\r\n                    { title: 'Major', field: 'MAJOR' },\r\n                ]}\r\n                data={studentList.data}\r\n            />\r\n            <Box className={classes.copyright}>\r\n                <Copyright />\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AppBar, Toolbar, Typography, Button } from '@material-ui/core/';\r\nimport { Link } from 'react-router-dom';\r\nimport WhiteLogo from '../../shared/WhiteLogo.png';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n        margin: theme.spacing(0),\r\n        padding: theme.spacing(0),\r\n    },\r\n    logo: {\r\n        height: '60px',\r\n        margin: theme.spacing(1),\r\n        marginRight: '15px',\r\n        '@media (max-width:500px)': {\r\n            marginRight: '5px',\r\n        },\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        '@media (max-width:500px)': {\r\n            fontSize: '15px',\r\n        },\r\n    },\r\n    signupButton: {\r\n        backgroundColor: 'white',\r\n        marginRight: theme.spacing(3),\r\n        padding: theme.spacing(1.5),\r\n        paddingBottom: 0,\r\n        paddingTop: 0,\r\n        textTransform: 'unset',\r\n        borderStyle: 'solid',\r\n        borderColor: 'white',\r\n        border: 2,\r\n        '@media (max-width:500px)': {\r\n            marginRight: theme.spacing(0.5),\r\n            padding: theme.spacing(1),\r\n        },\r\n    },\r\n    loginButton: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        marginRight: theme.spacing(3),\r\n        padding: theme.spacing(1.5),\r\n        paddingBottom: 0,\r\n        paddingTop: 0,\r\n        textTransform: 'unset',\r\n        borderStyle: 'solid',\r\n        borderColor: 'white',\r\n        border: 2,\r\n        '@media (max-width:500px)': {\r\n            marginRight: theme.spacing(0.5),\r\n            padding: theme.spacing(1),\r\n        },\r\n    },\r\n    signupButtonText: {\r\n        color: theme.palette.primary.main,\r\n        '@media (max-width:500px)': {\r\n            fontSize: '13px',\r\n        },\r\n    },\r\n    loginButtonText: {\r\n        color: 'white',\r\n        '@media (max-width:500px)': {\r\n            fontSize: '13px',\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function HomepageNavBar() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <img\r\n                        src={WhiteLogo}\r\n                        alt=\"EthismLogo\"\r\n                        className={classes.logo}\r\n                    />\r\n                    <Typography className={classes.title} variant=\"h5\">\r\n                        Ethisim\r\n                    </Typography>\r\n\r\n                    <Button\r\n                        component={Link}\r\n                        to={'/signup'}\r\n                        className={classes.signupButton}\r\n                        variant=\"contained\"\r\n                    >\r\n                        <Typography\r\n                            variant=\"h6\"\r\n                            className={classes.signupButtonText}\r\n                        >\r\n                            Sign Up\r\n                        </Typography>\r\n                    </Button>\r\n\r\n                    <Button\r\n                        component={Link}\r\n                        to={'/login'}\r\n                        className={classes.loginButton}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        m={-2}\r\n                    >\r\n                        <Typography\r\n                            className={classes.loginButtonText}\r\n                            variant=\"h6\"\r\n                        >\r\n                            Log In\r\n                        </Typography>\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Box,\r\n    Container,\r\n    Typography,\r\n    TextField,\r\n    Button,\r\n} from '@material-ui/core';\r\nimport Copyright from '../components/Copyright';\r\nimport HomepageNavBar from '../components/HomepageComponents/HomepageNavBar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        height: '100%',\r\n        width: '100%',\r\n        minHeight: '100vh',\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    studentAccessContainer: {\r\n        marginTop: '0',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n    },\r\n    ethisimIntroContainer: {\r\n        marginTop: theme.spacing(4),\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n    },\r\n    textField: {\r\n        marginTop: theme.spacing(4),\r\n    },\r\n    accessButton: {\r\n        marginTop: theme.spacing(2),\r\n        width: '225px',\r\n        textTransform: 'unset',\r\n        borderStyle: 'solid',\r\n        borderColor: 'white',\r\n        border: 2,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(3),\r\n    },\r\n    copyright: {\r\n        color: 'white',\r\n        paddingBottom: theme.spacing(2),\r\n        '@media (min-height:500px)': {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            bottom: '0px',\r\n            width: '100%',\r\n            position: 'absolute',\r\n        },\r\n    },\r\n}));\r\n\r\nconst ValidationTextField = withStyles({\r\n    root: {\r\n        width: '300px',\r\n        color: 'white',\r\n        '& .MuiOutlinedInput-root': {\r\n            '&:hover fieldset': {\r\n                borderColor: 'white',\r\n                borderWidth: '2',\r\n            },\r\n        },\r\n        '& .MuiFormLabel-root': {\r\n            color: 'white',\r\n        },\r\n        '& .MuiInputBase-root': {\r\n            color: 'white',\r\n        },\r\n        '& input:valid + fieldset': {\r\n            borderColor: 'white',\r\n            borderWidth: 2,\r\n        },\r\n        '& input:invalid + fieldset': {\r\n            borderColor: 'white',\r\n            borderWidth: 2,\r\n        },\r\n        '& input:valid:focus + fieldset': {\r\n            color: 'white',\r\n            borderColor: 'white',\r\n            borderLeftWidth: 6,\r\n            padding: '4px !important', // override inline-style\r\n        },\r\n    },\r\n})(TextField);\r\n\r\nfunction StudentAccess() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Container className={classes.studentAccessContainer}>\r\n                <form\r\n                    className={classes.textField}\r\n                    noValidate\r\n                    autoComplete=\"off\"\r\n                >\r\n                    <ValidationTextField\r\n                        label=\"Enter Class Code\"\r\n                        id=\"Enter Class Code\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                </form>\r\n                <Button\r\n                    className={classes.accessButton}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                >\r\n                    <Typography variant=\"h5\" display=\"block\" noWrap>\r\n                        Join\r\n                    </Typography>\r\n                </Button>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst WhiteTextTypography = withStyles({\r\n    root: {\r\n        color: '#FFFFFF',\r\n    },\r\n})(Typography);\r\n\r\nfunction EthisimIntro() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.ethisimIntroContainer}>\r\n            <WhiteTextTypography variant=\"h3\" align=\"center\">\r\n                Convenient Ethics Simulations\r\n            </WhiteTextTypography>\r\n            <WhiteTextTypography align=\"center\" className={classes.margin}>\r\n                Ethisim allows you to easily create and assign ethics\r\n                <br />\r\n                simulations. Run them for a participation grade, or\r\n                <br />\r\n                develop them further into longer discussions for class.\r\n                <br />\r\n            </WhiteTextTypography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function Homepage() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <HomepageNavBar />\r\n            <StudentAccess />\r\n            <EthisimIntro />\r\n            <Box className={classes.copyright}>\r\n                <Copyright />\r\n            </Box>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\r\nimport Signup from './pages/signup';\r\nimport Login from './pages/login';\r\nimport Dashboard from './pages/dashboard';\r\nimport Editor from './pages/editor';\r\nimport Data from './pages/data';\r\nimport Homepage from './pages/homepage';\r\n\r\nexport default function App() {\r\n    return (\r\n        <Router basename=\"/se\">\r\n            <Route exact path=\"/\">\r\n                <Redirect to=\"/home\" />\r\n            </Route>\r\n            <Route path=\"/home\" component={Homepage} />\r\n            <Route path=\"/login\" component={Login} />\r\n            <Route path=\"/signup\" component={Signup} />\r\n            <Route path=\"/dashboard\" component={Dashboard} />\r\n            <Route\r\n                path=\"/editor/:id\"\r\n                render={(props) => <Editor {...props} />}\r\n            />\r\n            <Route path=\"/data/:id\" render={(props) => <Data {...props} />} />\r\n        </Router>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#881c1c',\r\n            light: '#F7E7E7',\r\n        },\r\n    },\r\n});\r\n\r\nReactDOM.render(\r\n    <MuiThemeProvider theme={theme}>\r\n        <App />\r\n    </MuiThemeProvider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}