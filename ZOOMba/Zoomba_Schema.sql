CREATE TABLE students (
  STUDENT INTEGER PRIMARY KEY,
  FNAME TEXT,
  LNAME TEXT
);

CREATE TABLE demographics (
  STUDENT INTEGER PRIMARY KEY,
  AGE INTEGER,
  GRADE INTEGER,
  GENDER TEXT,
  RACE TEXT,
  MAJOR TEXT,
  FOREIGN KEY (STUDENT) REFERENCES students (STUDENT)
);

CREATE TABLE professors (
  PROFESSOR INTEGER PRIMARY KEY,
  FNAME TEXT,
  LNAME TEXT
);

CREATE TABLE scenarios (
  SCENARIO INTEGER,
  VERSION INTEGER,
  NAME TEXT,
  PUBLIC BOOLEAN,
  NUM_CONVERSATION INTEGER,
  IS_FINISHED BOOLEAN,
  DATE_CREATED DATE,
  SCENARIO_ID INT,
  PRIMARY KEY (SCENARIO_ID),
  UNIQUE (SCENARIO, VERSION)
);

CREATE TABLE courses (
  COURSE INTEGER PRIMARY KEY,
  NAME TEXT
);

CREATE TABLE professors_to_courses (
  PROFESSOR INTEGER,
  COURSE INTEGER,
  PRIMARY KEY (PROFESSOR, COURSE),
  FOREIGN KEY (PROFESSOR) REFERENCES professors (PROFESSOR),
  FOREIGN KEY (COURSE) REFERENCES courses (COURSE)
);

CREATE TABLE professors_to_scenario (
  PROFESSOR INTEGER,
  SCENARIO INTEGER,
  PERMISSION INTEGER,
  PRIMARY KEY (PROFESSOR, SCENARIO),
  FOREIGN KEY (PROFESSOR) REFERENCES professors (PROFESSOR),
  FOREIGN KEY (SCENARIO) REFERENCES scenarios (SCENARIO_ID)
);

CREATE TABLE students_to_course (
  STUDENT INTEGER,
  COURSE INTEGER,
  PRIMARY KEY (STUDENT, COURSE),
  FOREIGN KEY (STUDENT) REFERENCES students (STUDENT),
  FOREIGN KEY (COURSE) REFERENCES courses (COURSE)
);

CREATE TABLE student_times (
  STUDENT INTEGER,
  COURSE INTEGER,
  SCENARIO_ID INTEGER,
  DATE_TAKEN DATE,
  PAGE INTEGER,
  START_TIME DATE,
  END_TIME DATE,
  PRIMARY KEY (STUDENT, COURSE, SCENARIO_ID, DATE_TAKEN, PAGE),
  FOREIGN KEY (STUDENT) REFERENCES students (STUDENT),
  FOREIGN KEY (SCENARIO_ID) REFERENCES scenarios (SCENARIO_ID),
  FOREIGN KEY (COURSE) REFERENCES courses (COURSE)
);

CREATE TABLE pages (
  PAGE INTEGER,
  PAGE_TYPE TEXT,
  PAGE_TITLE TEXT,
  SCENARIO INTEGER,
  VERSION INTEGER,
  BODY TEXT,
  NEXT_PAGE INTEGER,
  NEXT_PAGE_VERSION INTEGER,
  X_COORDINATE INTEGER,
  Y_COORDINATE INTEGER,
  COMPLETED BOOLEAN,
  PRIMARY KEY (PAGE, VERSION),
  FOREIGN KEY (SCENARIO) REFERENCES scenarios (SCENARIO_ID),
  FOREIGN KEY (NEXT_PAGE, NEXT_PAGE_VERSION) REFERENCES pages (PAGE, VERSION)
);

CREATE TABLE pages_to_scenario (
  page_id INTEGER,
  scenario_id INTEGER,
  page_version INTEGER,
  PRIMARY KEY (page_id, scenario_id, page_version),
  FOREIGN KEY (page_id, page_version) REFERENCES pages (PAGE, VERSION),
  FOREIGN KEY (scenario_id) REFERENCES scenarios (SCENARIO_ID)
);

CREATE TABLE responses (
  RESPONSE_ID INTEGER,
  RESPONSE INTEGER,
  STUDENT INTEGER,
  SCENARIO INTEGER,
  VERSION INTEGER,
  PAGE INTEGER,
  PAGE_VERSION INTEGER,
  COURSE INTEGER,
  DATE_TAKEN DATE,
  CHOICE TEXT,
  PRIMARY KEY (RESPONSE_ID),
  FOREIGN KEY (STUDENT) REFERENCES students (STUDENT),
  FOREIGN KEY (COURSE) REFERENCES courses (COURSE),
  FOREIGN KEY (SCENARIO) REFERENCES scenarios (SCENARIO_ID),
  FOREIGN KEY (PAGE, PAGE_VERSION) REFERENCES pages (PAGE, VERSION),
  UNIQUE (RESPONSE, STUDENT, SCENARIO, PAGE, COURSE, DATE_TAKEN)
);

CREATE TABLE stakeholders (
  STAKEHOLDER INTEGER,
  SCENARIO INTEGER,
  VERSION INTEGER,
  NAME TEXT,
  DESCRIPTION TEXT,
  JOB TEXT,
  INTRODUCTION TEXT,
  PRIMARY KEY(STAKEHOLDER, VERSION),
  FOREIGN KEY (SCENARIO) REFERENCES scenarios (SCENARIO_ID)
);

CREATE TABLE reflections_taken (
  REFLECTIONS TEXT,
  RESPONSE_ID INTEGER PRIMARY KEY,
  FOREIGN KEY (RESPONSE_ID) REFERENCES responses (RESPONSE_ID)
);

CREATE TABLE issues (
  ISSUE INTEGER UNIQUE,
  SCENARIO_ID INTEGER,
  NAME TEXT,
  IMPORTANCE_SCORE INTEGER,
  PRIMARY KEY (ISSUE),
  FOREIGN KEY (SCENARIO_ID) REFERENCES scenarios (SCENARIO_ID)
);

CREATE TABLE coverage (
  STAKEHOLDER INTEGER,
  ISSUE INTEGER,
  COVERAGE_SCORE DECIMAL,
  PRIMARY KEY (STAKEHOLDER, ISSUE),
  FOREIGN KEY (ISSUE) REFERENCES issues (ISSUE),
  FOREIGN KEY (STAKEHOLDER) REFERENCES stakeholders (STAKEHOLDER)
);

CREATE TABLE conversations (
  CONVERSATION INTEGER,
  STAKEHOLDER INTEGER,
  QUESTION TEXT,
  RESPONSE TEXT,
  PRIMARY KEY (CONVERSATION),
  FOREIGN KEY (STAKEHOLDER) REFERENCES stakeholders (STAKEHOLDER)
);

CREATE TABLE responses_to_conversations (
  RESPONSE_ID INTEGER,
  STAKEHOLDER INTEGER,
  SCORE DECIMAL,
  CONVERSATION INTEGER,
  PRIMARY KEY (RESPONSE_ID, CONVERSATION),
  FOREIGN KEY (RESPONSE_ID) REFERENCES responses (RESPONSE_ID),
  FOREIGN KEY (STAKEHOLDER) REFERENCES stakeholders (STAKEHOLDER),
  FOREIGN KEY (CONVERSATION) REFERENCES conversations (CONVERSATION)
);

CREATE TABLE reflection_questions (
  id INTEGER,
  REFLECTION_QUESTION TEXT,
  VERSION INTEGER,
  PRIMARY KEY (id, version)
);

CREATE TABLE reflection_question_to_page (
  reflection_question_id INTEGER,
  page_id INTEGER,
  reflection_question_version INTEGER,
  page_version INTEGER,
  PRIMARY KEY (reflection_question_id, page_id, reflection_question_version, page_version),
  FOREIGN KEY (reflection_question_id, reflection_question_version) REFERENCES reflection_questions (id, VERSION),
  FOREIGN KEY (page_id, page_version) REFERENCES pages (PAGE, VERSION)
);

CREATE TABLE stakeholder_to_page (
  PAGE INTEGER,
  PAGE_VERSION INTEGER,
  STAKEHOLDER INTEGER,
  STAKEHOLDER_VERSION INTEGER,
  PRIMARY KEY (PAGE, PAGE_VERSION, STAKEHOLDER, STAKEHOLDER_VERSION),
  FOREIGN KEY (PAGE, PAGE_VERSION) REFERENCES pages (PAGE, VERSION),
  FOREIGN KEY (STAKEHOLDER) REFERENCES stakeholders (STAKEHOLDER, STAKEHOLDER_VERSION)
);

CREATE TABLE generic_page (
  id INTEGER,
  PAGE INTEGER,
  BODY TEXT,
  VERSION INTEGER,
  PRIMARY KEY (id, VERSION),
  FOREIGN KEY (PAGE, version) REFERENCES pages (PAGE, version)
);

CREATE TABLE action_page (
  id INTEGER UNIQUE,
  PAGE INTEGER,
  VERSION INTEGER,
  CHOICE TEXT,
  RESULT_PAGE INTEGER,
  PRIMARY KEY (id, VERSION),
  FOREIGN KEY (PAGE, version) REFERENCES pages (PAGE, version)
);

CREATE TABLE response_to_action_page (
  RESPONSE_ID INTEGER,
  ACTION_PAGE INTEGER,
  ACTION_PAGE_VERSION INTEGER,
  FOREIGN KEY (RESPONSE_ID) REFERENCES responses (RESPONSE_ID),
  FOREIGN KEY (ACTION_PAGE, ACTION_PAGE_VERSION) REFERENCES action_page (id, VERSION)
);

CREATE TABLE scenarios_for (
  SCENARIO_ID INTEGER,
  VERSION INTEGER,
  COURSE INTEGER,
  PRIMARY KEY (SCENARIO_ID, COURSE),
  FOREIGN KEY (COURSE) REFERENCES courses (COURSE),
  FOREIGN KEY (SCENARIO_ID) REFERENCES scenarios (SCENARIO_ID)
);

CREATE TABLE courses_to_scenario (
  COURSE INTEGER,
  SCENARIO INTEGER,
  PERMISSION INTEGER,
  PRIMARY KEY (COURSE, SCENARIO),
  FOREIGN key (COURSE) REFERENCES courses (COURSE),
  FOREIGN KEY (SCENARIO) REFERENCES scenarios (SCENARIO_ID)
);
